[ { "title": "G0, G1 : Linear Move", "content": "The G0 and G1 commands add a linear move to the queue to be performed after all previous moves are completed. These commands yield control back to the command parser as soon as the move is queued, but they may delay the command parser while awaiting a slot in the queue.\n\nA linear move traces a straight line from one point to another, ensuring that the specified axes will arrive simultaneously at the given coordinates (by linear interpolation). The speed may change over time following an acceleration curve, according to the acceleration and jerk settings of the given axes.\n\nA command like G1 F1000 sets the feedrate for all subsequent moves.\n\nBy convention, most G-code generators use G0 for non-extrusion movements (those without the E axis) and G1 for moves that include extrusion. This is meant to allow a kinematic system to, optionally, do a more rapid uninterpolated movement requiring much less calculation.\n\nFor Cartesians and Deltas the G0 (rapid linear movement) command is (and must be) a direct alias for G1 (rapid movement). On SCARA machines G0 does a fast non-linear move. Marlin 2.0 introduces an option to maintain a separate default feedrate for G0. Note: Slicers tend to override firmware feedrates!\n", "excerpt": "Add a straight line movement to the planner", "link": "/docs/gcode/G000-G001.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.0.0-beta</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n ", "class": "gcode" } ,{ "title": "G2, G3 : Controlled Arc Move", "content": "G2 adds a clockwise arc move to the planner; G3 adds a counter-clockwise arc. An arc move starts at the current position and ends at the given XYZ, pivoting around a center-point offset given by I and J or R.\n\nThis command has two forms:\nI J Form\n\n\n I specifies an X offset. J specifies a Y offset.\n At least one of the I J parameters is required.\n X and Y can be omitted to do a complete circle.\n The given X Y is not error-checked.\nThe arc ends based on the angle of the destination.\n Mixing I or J with R will throw an error.\n\n\nR Form\n\n R specifies the radius. X or Y is required.\n Omitting both X and Y will throw an error.\n X or Y must differ from the current XY position.\n Mixing R with I or J will throw an error.\n\n\nArc moves actually generate several short straight-line moves, the length of which are determined by the configuration option MM_PER_ARC_SEGMENT (default 1mm). Any change in the Z position is linearly interpolated over the whole arc.\n", "excerpt": "Add an arc movement to the planner", "link": "/docs/gcode/G002-G003.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.0.0-beta</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n ", "class": "gcode" } ,{ "title": "G4 : Dwell", "content": "[“Dwell pauses the command queue and waits for a period of time.”]\n", "excerpt": "Pause the planner", "link": "/docs/gcode/G004.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.0.0-beta</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n ", "class": "gcode" } ,{ "title": "G5 : Bézier cubic spline", "content": "G5 creates a cubic B-spline in the XY plane with the X and Y axes only. P and Q parameters are required. I and J are required for the first G5 command in a series. For subsequent G5 commands, either both I and J must be specified, or neither. If I and J are unspecified, the starting direction of the cubic will automatically match the ending direction of the previous cubic (as if I and J are the negation of the previous P and Q).\n\nSee This interactive demo to understand how Bézier control points work.\n", "excerpt": "Cubic B-spline with XYZE destination and IJPQ offsets", "link": "/docs/gcode/G005.html", "html": "\n \n <span class=\"label label-warning\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Experimental feature\"><i class=\"fa fa-flask\" aria-hidden=\"true\"></i></span></span>\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.1.0</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n ", "class": "gcode" } ,{ "title": "G10 : Retract", "content": "[“Retract the filament according to settings of M207.”, “Firmware retraction allows you to tune retraction at the machine level and can significantly reduce the size of G-code files.”, “Multiple consecutive G10 or G10 S1 commands without a corresponding G11 or G11 S1 will be ignored.”, “Performs two moves: a retract move at the retract feedrate/acceleration, and an optional Z lift at the maximum Z feedrate (travel acceleration).”]\n", "excerpt": "Retract the filament", "link": "/docs/gcode/G010.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.0.0-beta</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n \n \n <span class=\"label label-requires\"><code>FWRETRACT</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "G11 : Recover", "content": "[“Unretract (i.e., recover, prime) the filament according to settings of M208.”, “Multiple consecutive G11 or G11 S1 commands without a corresponding G10 or G10 S1 will be ignored.”, “Performs two moves: An optional Z lower at the maximum Z feedrate (travel acceleration), and a recovery move at the recover feedrate (retract acceleration).”]\n", "excerpt": "Recover the filament with firmware-based retract.", "link": "/docs/gcode/G011.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.0.0-beta</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n \n \n <span class=\"label label-requires\"><code>FWRETRACT</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "G12 : Clean the Nozzle", "content": "Start the nozzle cleaning process. Three types of cleaning patterns are supported: straight strokes, zigzags and circles. This feature requires a dedicated cleaning area on or outside the bed, but within reach of the nozzle. The pattern may be repeated as many times as desired.\n", "excerpt": "Perform the nozzle cleaning procedure.", "link": "/docs/gcode/G012.html", "html": "\n \n <span class=\"label label-warning\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Experimental feature\"><i class=\"fa fa-flask\" aria-hidden=\"true\"></i></span></span>\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.1.0</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>nozzle</span>\n \n \n \n \n <span class=\"label label-requires\"><code>NOZZLE_CLEAN_FEATURE</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "G20 : Inch Units", "content": "[“Set units to inches. In this mode, all positions, offsets, rates, accelerations, etc., specified in G-code parameters are interpreted as inches.”]\n", "excerpt": "Set Units to Inches.", "link": "/docs/gcode/G020.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.1.0</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>units</span>\n \n \n \n \n <span class=\"label label-requires\"><code>INCH_MODE_SUPPORT</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "G21 : Millimeter Units", "content": "Set units to millimeters. In this mode, all positions, offsets, rates, accelerations, etc., specified in GCode parameters are interpreted as millimeters.\n", "excerpt": "Set Units to Millimeters.", "link": "/docs/gcode/G021.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.1.0</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>units</span>\n \n \n \n \n <span class=\"label label-requires\"><code>INCH_MODE_SUPPORT</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "G26 : Mesh Validation Pattern", "content": "[“G26 Mesh Validation Pattern is designed to be used in conjunction with mesh-based leveling to test the accuracy of the probed mesh.\\n\\nThe G26 command prints a single-layer pattern over the entire print bed, giving a clear indication of how accurately every mesh point is defined. G26 can be used to determine which areas of the mesh are less-than-perfect and how much to adjust each mesh point.\\n”]\n", "excerpt": "Test the mesh and adjust.", "link": "/docs/gcode/G026.html", "html": "\n \n <span class=\"label label-warning\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Experimental feature\"><i class=\"fa fa-flask\" aria-hidden=\"true\"></i></span></span>\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.1.0</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>calibration</span>\n \n \n \n \n <span class=\"label label-requires\"><code>HAS_MESH</code></span>\n \n <span class=\"label label-requires\"><code>G26_MESH_VALIDATION</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "G27 : Park toolhead", "content": "Park the nozzle at a predefined XYZ position.\n", "excerpt": "Park the toolhead", "link": "/docs/gcode/G027.html", "html": "\n \n <span class=\"label label-warning\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Experimental feature\"><i class=\"fa fa-flask\" aria-hidden=\"true\"></i></span></span>\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.1.0</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>nozzle</span>\n \n \n \n \n <span class=\"label label-requires\"><code>NOZZLE_PARK_FEATURE</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "G28 : Auto Home", "content": "[“Auto-home one or more axes, moving them towards their endstops until triggered. Each axis is backed off and re-bumped according to the [XYZ]_HOME_BUMP_MM and HOMING_BUMP_DIVISOR settings.”]\n", "excerpt": "Auto home one or more axes.", "link": "/docs/gcode/G028.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>calibration</span>\n \n \n ", "class": "gcode" } ,{ "title": "G29 : Bed Leveling (Automatic)", "content": "[“ABL probes the bed at 3 or more points and enables bed leveling compensation. The exact procedure and method depends on the type of bed leveling chosen in Configuration.h:\\n\\n* AUTO_BED_LEVELING_3POINT probes 3 points and uses a matrix to compensate for bed tilt.\\n* AUTO_BED_LEVELING_LINEAR also uses a tilt matrix but probes a grid and applies \"least-squares.\"\\n* AUTO_BED_LEVELING_BILINEAR probes a grid and produces a mesh to adjust Z across the bed.\\n”, “The printer must be homed with G28 before G29.\\n\\n* For AUTO_BED_LEVELING_UBL see G29 UBL and G26 Mesh Editing.\\n* For MESH_BED_LEVELING see the G29 MBL page.\\n”, “#### Automatic Probing\\n\\nWith an electronic probe Marlin can probe the entire bed in a matter of seconds —even before every print— with a single G29 command. Available parameters depend on the style of leveling. See parameter descriptions and examples below for details.\\n”, “#### Manual Probing\\n\\nAuto Bed Leveling now includes a PROBE_MANUALLY option for systems lacking a probe.\\n\\nPROBE_MANUALLY adds these parameters to G29:\\n- Q : Query leveling and G29 state\\n- A : Abort current leveling procedure\\n\\nTo do manual probing simply repeat G29 until the procedure is complete.\\n\\nThe first G29 accepts the same parameters , shown in the Usage section below. The exact parameters available will depend on which style of bed leveling is enabled. (Note:** UBL parameters are not covered on this page unless they coincide. See the G29 for UBL page for a full list of its options.)\\n\\nBefore probing the bed:\\n1. Use G29 Q to get the current status. If G29 isn’t idle, abort with G29 A.\\n2. Use M420 V to view leveling data. You can send M420 S1 to use the existing data.\\n\\nTo probe the bed using GCode:\\n1. Use G29 to move to the first point for Z adjustment.\\n2. Adjust Z so a piece of paper can just pass under the nozzle.\\n3. Use G29 to save the Z value and move to the next point.\\n4. Repeat steps 3-4 until completed.\\n5. Use M500 to save the leveling data to EEPROM, if desired.\\n\\nTo probe the bed using your LCD controller:** (Requires LCD_BED_LEVELING)\\n\\n1. Select the Level Bed sub-menu, then choose Level Bed (not Cancel).\\n2. Wait for Homing XYZ to complete.\\n3. When Click to Begin appears, press the controller button to move to the first point.\\n4. Use the controller wheel to adjust Z so that a piece of paper can just pass under the nozzle.\\n5. Press the controller button to save the Z value and move to the next point.\\n6. Repeat steps 4-5 until completed.\\n7. Use Control &gt; Store memory to save the mesh to EEPROM, if desired.\\n”, “#### Mesh Editing\\n\\nAUTO_BED_LEVELING_BILINEAR adds these parameters to G29 for editing mesh points:\\n- W Write a mesh point. (Ignored during leveling.)\\n- I X index for mesh point\\n- J Y index for mesh point\\n- X logical X of mesh point\\n- Y logical Y of mesh point\\n- Z Z to store in mesh. If omitted, current raw Z.\\n”]\n", "excerpt": "Probe the bed and enable leveling compensation.", "link": "/docs/gcode/G029-abl.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>calibration</span>\n \n \n \n \n <span class=\"label label-requires\"><code>AUTO_BED_LEVELING_(3POINT|LINEAR|BILINEAR)</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "G29 : Bed Leveling (Manual)", "content": "[“Mesh Bed Leveling (MBL) allows interactively measuring a Z height mesh without a bed probe. The only tool required is a piece of paper or a feeler gauge. MBL uses the mesh to compensate for variations in height across the bed.\\n\\nMesh Bed Leveling from the host:\\n\\n1. Use G29 S0 to get the current status and mesh. If there’s an existing mesh, you can send M420 S1 to use it.\\n2. Use G29 S1 to move to the first point for Z adjustment.\\n3. Adjust Z so a piece of paper can just pass under the nozzle.\\n4. Use G29 S2 to save the Z value and move to the next point.\\n5. Repeat steps 3-4 until completed.\\n6. Use M500 to save the mesh to EEPROM, if desired.\\n\\nMesh Bed Leveling using an LCD controller: (Requires LCD_BED_LEVELING)\\n\\n1. Select Level Bed then choose Level Bed (not Cancel) in the sub-menu.\\n2. Wait for Homing XYZ to complete.\\n3. When Click to Begin appears, press the controller button to move to the first point.\\n4. Use the controller wheel to adjust Z so that a piece of paper can just pass under the nozzle.\\n5. Press the controller button to save the Z value and move to the next point.\\n6. Repeat steps 4-5 until completed.\\n7. Use Control &gt; Store memory to save the mesh to EEPROM, if desired.\\n”]\n", "excerpt": "Measure Z heights in a grid, enable leveling compensation", "link": "/docs/gcode/G029-mbl.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>calibration</span>\n \n \n \n \n <span class=\"label label-requires\"><code>MESH_BED_LEVELING</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "G29 : Bed Leveling (Unified)", "content": "[“The Unified Bed Leveling System (UBL) provides a comprehensive set of resources to produce the best bed leveling results possible.”, “See the full Unified Bed Leveling documentation for more details. (Examples below.)”]\n", "excerpt": "Probe the bed and enable leveling compensation.", "link": "/docs/gcode/G029-ubl.html", "html": "\n \n <span class=\"label label-warning\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Experimental feature\"><i class=\"fa fa-flask\" aria-hidden=\"true\"></i></span></span>\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>calibration</span>\n \n \n \n \n <span class=\"label label-requires\"><code>AUTO_BED_LEVELING_UBL</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "G30 : Single Z-Probe", "content": "Do a single Z probe at a specified position. By default probe in the current position.\n", "excerpt": "Probe bed at current XY location", "link": "/docs/gcode/G030.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.0.0-beta</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>calibration</span>\n \n \n \n \n <span class=\"label label-requires\"><code>HAS_BED_PROBE</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "G31 : Dock Sled", "content": "Dock the Z probe sled.\n", "excerpt": "Dock the Z probe sled.", "link": "/docs/gcode/G031.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.0.0-beta</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n \n \n <span class=\"label label-requires\"><code>Z_PROBE_SLED</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "G32 : Undock Sled", "content": "Undock the Z probe sled.\n", "excerpt": "Undock the Z probe sled.", "link": "/docs/gcode/G032.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.0.0-beta</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n \n \n <span class=\"label label-requires\"><code>Z_PROBE_SLED</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "G33 : Delta Auto Calibration", "content": "With the G33 command you can:\n\n Probe a circular grid of points,\n Calibrate Delta Height,\n Calibrate endstops,\n Calibrate Delta Radius, and\n Calibrate Tower Angles.\n\n", "excerpt": "Calibrate various Delta parameters", "link": "/docs/gcode/G033.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.1.0</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>calibration</span>\n \n \n \n \n <span class=\"label label-requires\"><code>DELTA_AUTO_CALIBRATION</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "G38.2, G38.3 : Probe target", "content": "[“The Probe Target commands are used to probe towards a workpiece and determine its precise position. The Z endstop doubles as the probe for these commands. You might, for example, use a grounded metal workpiece, with a metal probe spliced into the Z endstop circuit.\\n\\n- G38.2 probes towards a target and stops on contact, signaling an error if it reaches the target position without triggering the Z endstop.\\n- G38.3 probes towards a target and stops on contact. No error is given if it fails to trigger the Z endstop.\\n\\nThese commands use the current homing feedrate, by default.\\n”]\n", "excerpt": "Probe towards a workpiece and stop on contact.", "link": "/docs/gcode/G038.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.1.0</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>calibration</span>\n \n \n \n \n <span class=\"label label-requires\"><code>G38_PROBE_TARGET</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "G42 : Move to mesh coordinate", "content": "The G42 command moves the nozzle to the location corresponding to a specific coordinate in the bed leveling mesh. It operates similarly to the G0 and G1 commands except that the provided coordinates are a mesh row and column instead of an absolute or relative position on the bed.\n\nThe G42 command will determine the bed position that corresponds to the provided mesh row and column and move the nozzle to that position.\n", "excerpt": "Move to a specific point in the leveling mesh", "link": "/docs/gcode/G042.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.1.2</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>calibration</span>\n \n \n \n \n <span class=\"label label-requires\"><code>HAS_MESH</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "G53 : Move in Machine Coordinates", "content": "G53 applies native workspace to the current move.\nIn CNC G-code G53 is a modifier. It precedes a movement command (or other modifiers) on the same line.\nMarlin also accepts G53 on a line by itself as the command to return to the native workspace.\n", "excerpt": "Apply native workspace to the current move.", "link": "/docs/gcode/G053.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>units</span>\n \n \n \n \n <span class=\"label label-requires\"><code>CNC_COORDINATE_SYSTEMS</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "G54, G55, G56, G57, G58, G59, G59.1, G59.2, G59.3 : Workspace Coordinate System", "content": "A workspace is an XYZ offset to the native machine space. All workspaces default to 0,0,0 at start, or with EEPROM support they may be restored from a previous session.\n\n “G92 is used to set the current workspace’s offset.”\n “G54 - use coordinate system 1”\n “G55 - use coordinate system 2”\n “G56 - use coordinate system 3”\n “G56 - use coordinate system 4”\n “G57 - use coordinate system 5”\n “G58 - use coordinate system 6”\n “G59 - use coordinate system 7”\n “G59.1 - use coordinate system 8”\n “G59.2 - use coordinate system 9”\n “G59.3 - use coordinate system 10”\n\n", "excerpt": "Select a workspace coordinate system", "link": "/docs/gcode/G054-059.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>units</span>\n \n \n \n \n <span class=\"label label-requires\"><code>CNC_COORDINATE_SYSTEMS</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "G90 : Absolute Positioning", "content": "[“In absolute mode all coordinates given in G-code are interpreted as positions in the logical coordinate space. This includes the extruder position unless overridden by M83.”]\n", "excerpt": "Use absolute positions.", "link": "/docs/gcode/G090.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.0.0-beta</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>units</span>\n \n \n ", "class": "gcode" } ,{ "title": "G91 : Relative Positioning", "content": "[“Set relative position mode. In this mode all coordinates are interpreted as relative to the last position. This includes the extruder position unless overridden by M82.”]\n", "excerpt": "Use relative positions.", "link": "/docs/gcode/G091.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.0.0-beta</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>units</span>\n \n \n ", "class": "gcode" } ,{ "title": "G92 : Set Position", "content": "[“Set the current position to the values specified. In Marlin 1.1.0 and up, the software endstops are adjusted to preserve the physical movement limits. Thus you could use G92 to set the middle of the bed to 0,0 and then run .gcode that was sliced for a Deltabot.”]\n", "excerpt": "Set the current position of one or more axes.", "link": "/docs/gcode/G092.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.0.0-beta</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n ", "class": "gcode" } ,{ "title": "G425 : Perform auto-calibration", "content": "[“This command performs an automatic calibration of backlash, positional errors, and nozzle offset by touching the nozzle on the sides of a bed-mounted, electrically-conductive object (e.g., a cube, washer or bolt).”, “This command measures backlash but doesn’t enable backlash correction. Use M425 to enable backlash correction.”]\n", "excerpt": "Uses a calibration cube, washer or bolt for automatic calibration", "link": "/docs/gcode/G425.html", "html": "\n \n <span class=\"label label-warning\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Experimental feature\"><i class=\"fa fa-flask\" aria-hidden=\"true\"></i></span></span>\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>calibration</span>\n \n \n \n \n <span class=\"label label-requires\"><code>CALIBRATION_GCODE</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M0, M1 : Unconditional stop", "content": "[“The M0 and M1 commands pause after the last movement and wait for the user to continue.”]\n", "excerpt": "Stop and wait for user.", "link": "/docs/gcode/M000-M001.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.0.0-beta</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n ", "class": "gcode" } ,{ "title": "M3 : Spindle CW / Laser On", "content": "Wait for moves to complete, then set the spindle speed (clockwise) or laser power.\n", "excerpt": "Set the spindle CW speed or laser power", "link": "/docs/gcode/M003.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.1.2</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>SPINDLE_LASER_ENABLE</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M4 : Spindle CCW / Laser On", "content": "Wait for moves to complete, then set the spindle speed (counter-clockwise) or laser power.\n", "excerpt": "Set the spindle CCW speed or laser power", "link": "/docs/gcode/M004.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.1.2</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>SPINDLE_LASER_ENABLE</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M5 : Spindle / Laser Off", "content": "Wait for moves to complete, then turn off the spindle / laser power and PWM.\n", "excerpt": "Turn off spindle or laser", "link": "/docs/gcode/M005.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.1.2</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>SPINDLE_LASER_ENABLE</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M17 : Enable Steppers", "content": "Enable power on all stepper motors.\n", "excerpt": "Power on all steppers", "link": "/docs/gcode/M017.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n ", "class": "gcode" } ,{ "title": "M18, M84 : Disable steppers", "content": "This command can be used to set the stepper inactivity timeout (S) or to disable one or more steppers (X,Y,Z,E).\n\nIf a timeout is given with S, this command just sets the stepper inactivity timeout.\n\nIf no steppers are specified, this command disables all steppers immediately.\n\nIf one or more axes are specified, this command disables the specified steppers immediately.\n", "excerpt": "Disable steppers (same as M84).", "link": "/docs/gcode/M018.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n ", "class": "gcode" } ,{ "title": "M20 : List SD Card", "content": "List the entire contents of the SD card to serial output in the more compact DOS 8.3 format.\n\nMarlin 1.1.0 includes file sizes in the output.\n", "excerpt": "List the contents of the SD Card.", "link": "/docs/gcode/M020.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>sdcard</span>\n \n \n \n \n <span class=\"label label-requires\"><code>SDSUPPORT</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M21 : Init SD card", "content": "Use this command if the SD card isn’t detected automatically.\n", "excerpt": "Attempt to detect an SD card in the slot.", "link": "/docs/gcode/M021.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>sdcard</span>\n \n \n \n \n <span class=\"label label-requires\"><code>SDSUPPORT</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M22 : Release SD card", "content": "If Marlin gets confused about the state of the SD card, this command can be used to simulate an ejection of the SD card.\n\nRe-insert the SD card or use M21 to enable the SD card following M22.\n", "excerpt": "Simulate ejection of the SD card", "link": "/docs/gcode/M022.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>sdcard</span>\n \n \n \n \n <span class=\"label label-requires\"><code>SDSUPPORT</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M23 : Select SD file", "content": "\n", "excerpt": "Select an SD file to be executed", "link": "/docs/gcode/M023.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>sdcard</span>\n \n \n \n \n <span class=\"label label-requires\"><code>SDSUPPORT</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M24 : Start or Resume SD print", "content": "Start an SD print or resume the paused SD print. If PARK_HEAD_ON_PAUSE is enabled, unpark the nozzle.\n\nIf POWER_LOSS_RECOVERY is enabled M24 accepts parameters which allow resuming the print from a specific point in the file. These parameters are usually only used in this scenario.\n", "excerpt": "Start or resume a file selected with `M23`", "link": "/docs/gcode/M024.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>sdcard</span>\n \n \n \n \n <span class=\"label label-requires\"><code>SDSUPPORT</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M25 : Pause SD print", "content": "Pause the SD print in progress. If PARK_HEAD_ON_PAUSE is enabled, park the nozzle.\n", "excerpt": "Pause printing from the SD card", "link": "/docs/gcode/M025.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>sdcard</span>\n \n \n \n \n <span class=\"label label-requires\"><code>SDSUPPORT</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M26 : Set SD position", "content": "Set the next read position in the open SD file.\n", "excerpt": "Set the SD read position", "link": "/docs/gcode/M026.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>sdcard</span>\n \n \n \n \n <span class=\"label label-requires\"><code>SDSUPPORT</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M27 : Report SD print status", "content": "[“With no parameter, report the current SD read position in the form \"SD printing byte 123/12345.\" If no file is open the response is \"Not SD printing.\"”, “With ‘S', set the SD status auto-report interval. (Requires `AUTO_REPORT_SD_STATUS`)\", \"With 'C', get the currently open file's name (and long filename if possible). Print \\\"`(no file)`\\\" if no file is open.\"]\n", "excerpt": "Print SD progress to serial", "link": "/docs/gcode/M027.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>sdcard</span>\n \n \n \n \n <span class=\"label label-requires\"><code>SDSUPPORT</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M28 : Start SD write", "content": "This command starts a file write. All commands received by Marlin are written to the file and are not executed until M29 closes the file.\n", "excerpt": "Start writing to a file on the SD card", "link": "/docs/gcode/M028.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>sdcard</span>\n \n \n \n \n <span class=\"label label-requires\"><code>SDSUPPORT</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M29 : Stop SD write", "content": "Stop writing to a file that was begun with M28 or M928. Logging is disabled.\n", "excerpt": "Stop writing the file, end logging.", "link": "/docs/gcode/M029.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>sdcard</span>\n \n \n \n \n <span class=\"label label-requires\"><code>SDSUPPORT</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M30 : Delete SD file", "content": "\n", "excerpt": "Delete a specified file from SD.", "link": "/docs/gcode/M030.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>sdcard</span>\n \n \n ", "class": "gcode" } ,{ "title": "M31 : Print time", "content": "[“This command reports the time elapsed since the start of the current print job to the host. When printing from SD card, the print job timer starts as soon as SD printing starts.\\n\\nIf PRINTJOB_TIMER_AUTOSTART is enabled then the first M109 or M190 command received from the host will also start the print job timer.\\n\\nFor manual control from the host, use M75, M76, and M77 to start, pause, and stop the print job timer.\\n”]\n", "excerpt": "Report the current print time.", "link": "/docs/gcode/M031.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>printjob</span>\n \n \n ", "class": "gcode" } ,{ "title": "M32 : Select and Start", "content": "[“The M32 command exists to allow G-code to load other G-code files and run them as sub-programs. This can be useful to change the start / end gcode for a batch of files without having to edit them all.”, “For legacy reasons M32 uses ‘!’ (and ‘#’) to delimit the filepath parameter. The filepath must be the last parameter.”]\n", "excerpt": "Begin an SD print from a file.", "link": "/docs/gcode/M032.html", "html": "\n \n <span class=\"label label-warning\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Experimental feature\"><i class=\"fa fa-flask\" aria-hidden=\"true\"></i></span></span>\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>sdcard</span>\n \n \n \n \n <span class=\"label label-requires\"><code>SDSUPPORT</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M33 : Get Long Path", "content": "\n", "excerpt": "Convert a short pathname to a long pathname.", "link": "/docs/gcode/M033.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.0.2</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>sdcard</span>\n \n \n \n \n <span class=\"label label-requires\"><code>SDSUPPORT</code></span>\n \n <span class=\"label label-requires\"><code> LONG_FILENAME_HOST_SUPPORT</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M34 : SDCard Sorting", "content": "[“Marlin now contains support for SDCard alphabetical file sorting in the LCD menus. This feature uses free SRAM to create a sorting index for up to the first 256 files in the current folder, and (if you have lots of SRAM) can optionally cache file listings for a more responsive UI. Buffering only occurs during file browsing. Otherwise the SRAM is freed.”]\n", "excerpt": "Set SDCard file sorting options.", "link": "/docs/gcode/M034.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.1.0</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>sdcard</span>\n \n \n \n \n <span class=\"label label-requires\"><code>SDSUPPORT</code></span>\n \n <span class=\"label label-requires\"><code>SDCARD_SORT_ALPHA</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M42 : Set Pin State", "content": "For custom hardware not officially supported in Marlin, you can often just connect up an unused pin and use M42 to control it.\n", "excerpt": "Set an analog or digital pin to a specified state.", "link": "/docs/gcode/M042.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n ", "class": "gcode" } ,{ "title": "M43 T : Toggle Pins", "content": "[“The M43 T command toggles one or more pins.”]\n", "excerpt": "Get information about pins.", "link": "/docs/gcode/M043-T.html", "html": "\n \n <span class=\"label label-warning\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Experimental feature\"><i class=\"fa fa-flask\" aria-hidden=\"true\"></i></span></span>\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>debug</span>\n \n \n \n \n <span class=\"label label-requires\"><code>PINS_DEBUGGING</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M43 : Debug Pins", "content": "[“When setting up or debugging a machine it’s useful to know how pins are assigned to functions by the firmware, and to be able to find pins for use with new functions. M43 provides these tools. M43 by itself reports all pin assignments. Use P to specify a single pin. Use I to report the values on pins that are protected. Use W to watch the specified pin, or all pins. Use the E option to monitor endstops. Use S option to test a BLTouch type servo probe. Use T option to toggle pins.”, “The W watch mode option continues looping, blocking all further commands, until the board is reset. If EMERGENCY_PARSER is enabled, M108 may also be used to exit the watch loop without needing to reset the board.”, “See M43 T for Pins Debugging toggle options.”]\n", "excerpt": "Get information about pins.", "link": "/docs/gcode/M043.html", "html": "\n \n <span class=\"label label-warning\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Experimental feature\"><i class=\"fa fa-flask\" aria-hidden=\"true\"></i></span></span>\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>debug</span>\n \n \n \n \n <span class=\"label label-requires\"><code>PINS_DEBUGGING</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M48 : Probe Accuracy Test", "content": "[“Probes come in many flavors and as such have varying levels of accuracy, reliability, and repeatability, depending on several factors. This command tests the probe for accuracy and produces a standard deviation based on two or more probes of the same XY position.”]\n", "excerpt": "Measure Z Probe repeatability.", "link": "/docs/gcode/M048.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>calibration</span>\n \n \n \n \n <span class=\"label label-requires\"><code>Z_MIN_PROBE_REPEATABILITY_TEST</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M73 : Set Print Progress", "content": "[“Set current print progress percentage for LCD.”]\n", "excerpt": "Set current print progress percentage for LCD.", "link": "/docs/gcode/M073.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.1.7</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>lcd</span>\n \n \n \n \n <span class=\"label label-requires\"><code>LCD_SET_PROGRESS_MANUALLY</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M75 : Start Print Job Timer", "content": "[“Start the print job timer.”]\n", "excerpt": "Start the print job timer.", "link": "/docs/gcode/M075.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>printjob</span>\n \n \n ", "class": "gcode" } ,{ "title": "M76 : Pause Print Job", "content": "[“Pause the print job timer.”]\n", "excerpt": "Pause the print job timer.", "link": "/docs/gcode/M076.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>printjob</span>\n \n \n ", "class": "gcode" } ,{ "title": "M77 : Stop Print Job Timer", "content": "[“Stop the print job timer.”]\n", "excerpt": "Stop the print job timer.", "link": "/docs/gcode/M077.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>printjob</span>\n \n \n ", "class": "gcode" } ,{ "title": "M78 : Print Job Stats", "content": "\n", "excerpt": "Print statistics about print jobs.", "link": "/docs/gcode/M078.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>printjob</span>\n \n \n \n \n <span class=\"label label-requires\"><code>PRINTCOUNTER</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M80 : Power On", "content": "[“Turn on the high-voltage power supply. Requires a board that’s powered from USB or another 5V source.”]\n", "excerpt": "Turn on the power supply.", "link": "/docs/gcode/M080.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>PSU_CONTROL</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M81 : Power Off", "content": "[“Turn off the high-voltage power supply. If the board is not powered from another source, this may also shut down the electronics.”]\n", "excerpt": "Turn off the power supply.", "link": "/docs/gcode/M081.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>PSU_CONTROL</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M82 : E Absolute", "content": "[“This command is used to override G91 and put the E axis into absolute mode independent of the other axes.”]\n", "excerpt": "Set E to absolute positioning.", "link": "/docs/gcode/M082.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>units</span>\n \n \n ", "class": "gcode" } ,{ "title": "M83 : E Relative", "content": "[“This command is used to override G90 and put the E axis into relative mode independent of the other axes.”]\n", "excerpt": "Set E to relative positioning.", "link": "/docs/gcode/M083.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>units</span>\n \n \n ", "class": "gcode" } ,{ "title": "M85 : Inactivity Shutdown", "content": "[“Use this command to set a maximum period of time for the machine to be inactive (with no moves). If the machine is idle for longer than the set period, the firmware will shut everything down and halt the machine.”]\n", "excerpt": "Set the inactivity timeout.", "link": "/docs/gcode/M085.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n ", "class": "gcode" } ,{ "title": "M92 : Set Axis Steps-per-unit", "content": "[“Use M92 to set the steps-per-unit for one or more axes. This setting affects how many steps will be done for each unit of movement. Units will be in steps/mm unless inch mode is set with G20 (which requires INCH_MODE_SUPPORT).”]\n", "excerpt": "Set the number of steps-per-mm or steps-per-inch.", "link": "/docs/gcode/M092.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n ", "class": "gcode" } ,{ "title": "M100 : Free Memory", "content": "[“Use M100 for development purposes to observe how much memory (particularly stack) is being used by code. Proper AVR code should avoid use of new, malloc, etc., and instead use either pre-allocated static variables or stack.”]\n", "excerpt": "Description Here", "link": "/docs/gcode/M100.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>debug</span>\n \n \n \n \n <span class=\"label label-requires\"><code>M100_FREE_MEMORY_WATCHER</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M104 : Set Hotend Temperature", "content": "[“Set a new target hot end temperature and continue without waiting. The firmware will continue to try to reach and hold the temperature in the background.”, “Use M109 to wait for the hot end to reach the target temperature.”]\n", "excerpt": "Set a new target hot end temperature.", "link": "/docs/gcode/M104.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>thermal</span>\n \n \n ", "class": "gcode" } ,{ "title": "M105 : Report Temperatures", "content": "[“Request a temperature report to be sent to the host at some point in the future.”]\n", "excerpt": "Send a temperature report to the host.", "link": "/docs/gcode/M105.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>thermal</span>\n \n \n ", "class": "gcode" } ,{ "title": "M106 : Set Fan Speed", "content": "Turn on one of the fans and set its speed. If no fan index is given, the print cooling fan is selected. The fan speed applies to the next block added to the planner, so it will not take effect until previous moves in the planner are done. Under manual control with an idle machine, M106 will change the fan speed immediately.\n", "excerpt": "Turn on the fan and set its speed", "link": "/docs/gcode/M106.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>thermal</span>\n \n \n \n \n <span class=\"label label-requires\"><code>EXTRA_FAN_SPEED</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M107 : Fan Off", "content": "Turn off one of the fans. If no fan index is given, the print cooling fan.\n", "excerpt": "Turn off a fan", "link": "/docs/gcode/M107.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>thermal</span>\n \n \n ", "class": "gcode" } ,{ "title": "M108 : Break and Continue", "content": "[“The M108 command requires EMERGENCY_PARSER for full effectiveness. (Otherwise a full queue blocks the parser.)\\n\\nSome G-code commands cause Marlin to go into a closed loop, waiting indefinitely for a certain state or event. For example, M109 waits for the target temperature to be reached, and M0 waits for an LCD click.\\n\\n- In the case of M109, the M108 command stops waiting for the target temperature and continues processing G-code. This may result in \"cold extrude\" messages. For a full stop use M112.\\n- In the case of M0 the M108 command acts like the LCD button, breaking out of M0 and continuing to process the G-code queue.\\n”]\n", "excerpt": "Break out of the current waiting loop", "link": "/docs/gcode/M108.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n ", "class": "gcode" } ,{ "title": "M109 : Wait for Hotend Temperature", "content": "[“This command optionally sets a new target hot end temperature and waits for the target temperature to be reached before proceeding. If the temperature is set with S then M109 waits only when heating. If the temperature is set with R then M109 will also wait for the temperature to go down.”]\n", "excerpt": "Wait for the hot end to reach its target.", "link": "/docs/gcode/M109.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>thermal</span>\n \n \n ", "class": "gcode" } ,{ "title": "M110 : Set Line Number", "content": "Hosts can use M110 to set the current line number in a print job. Each line number sent by a host must be one higher than the previous line number, or the firmware will ignore the line and send an error requesting a resend of the missing line. This is one technique Marlin uses to keep in sync with hosts.\n", "excerpt": "Set the current line number.", "link": "/docs/gcode/M110.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>hosts</span>\n \n \n ", "class": "gcode" } ,{ "title": "M111 : Debug Level", "content": "Marlin has several debug bits that can be set, in combination, to help configure, troubleshoot, and debug the firmware. Add up the debug bits you need:\n\n\n \n \n Mask\n Name\n Description\n \n \n 1\n ECHO\n Echo all commands sent to the parser.\n \n \n 2\n INFO\n Print extra informational messages.\n \n \n 4\n ERRORS\n Print extra error messages.\n \n \n 8\n DRYRUN\n Don’t extrude, don’t save leveling data, etc.\n \n \n 16\n COMMUNICATION\n Not currently used.\n \n \n 32\n LEVELING\n Detailed messages for homing, probing, and leveling. (Requires DEBUG_LEVELING_FEATURE.)\n \n \n 64\n Reserved\n Reserved for future usage\n \n \n 128\n Reserved\n Reserved for future usage\n \n \n\n", "excerpt": "Report and optionally set the debug flags.", "link": "/docs/gcode/M111.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>hosts</span>\n \n \n ", "class": "gcode" } ,{ "title": "M112 : Emergency Stop", "content": "Used for emergency stopping, M112 shuts down the machine, turns off all the steppers and heaters, and if possible, turns off the power supply. A reset is required to return to operational mode.\n", "excerpt": "Shut everything down and halt the machine.", "link": "/docs/gcode/M112.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>safety</span>\n \n \n ", "class": "gcode" } ,{ "title": "M113 : Host Keepalive", "content": "During some lengthy processes, such as G29, Marlin may appear to the host to have “gone away.” The “host keepalive” feature will send messages to the host when Marlin is busy or waiting for user response so the host won’t try to reconnect.\n", "excerpt": "Get or set the host keepalive interval.", "link": "/docs/gcode/M113.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>hosts</span>\n \n \n \n \n <span class=\"label label-requires\"><code>HOST_KEEPALIVE_FEATURE</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M114 : Get Current Position", "content": "Get the current position of the active nozzle. Includes stepper values.\nIf M114_DETAIL is enabled the D parameter will provide more details such as leveling information and kinematics.\n", "excerpt": "Report the current tool position to the host.", "link": "/docs/gcode/M114.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>hosts</span>\n \n \n ", "class": "gcode" } ,{ "title": "M115 : Firmware Info", "content": "This command causes Marlin to output a string like this:\n\nFIRMWARE_NAME:Marlin 1.1.0 (Github) SOURCE_CODE_URL:https://github.com/MarlinFirmware/Marlin PROTOCOL_VERSION:1.0 MACHINE_TYPE:RepRap EXTRUDER_COUNT:1 UUID:cede2a2f-41a2-4748-9b12-c55c62f367ff\n\n\n\nWhen EXTENDED_CAPABILITIES_REPORT is enabled, Marlin also reports its capabilities:\n\nCap:EEPROM:1\nCap:AUTOREPORT_TEMP:1\nCap:PROGRESS:0\nCap:AUTOLEVEL:1\nCap:Z_PROBE:1\nCap:SOFTWARE_POWER:0\nCap:TOGGLE_LIGHTS:0\nCap:EMERGENCY_PARSER:1\n\n\n\nHosts use this information to improve interoperability, so it’s a good feature to enable.\n", "excerpt": "Print the firmware info and capabilities.", "link": "/docs/gcode/M115.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>hosts</span>\n \n \n ", "class": "gcode" } ,{ "title": "M117 : Set LCD Message", "content": "Set the status line message on the LCD.\n", "excerpt": "Set the message line on the LCD.", "link": "/docs/gcode/M117.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>lcd</span>\n \n \n \n \n <span class=\"label label-requires\"><code>ULTRA_LCD</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M118 : Serial print", "content": "Send a message to the connected host for display in the host console or to perform a host action.\n", "excerpt": "Send text to serial", "link": "/docs/gcode/M118.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>hosts</span>\n \n \n ", "class": "gcode" } ,{ "title": "M119 : Endstop States", "content": "[“Use this command to get the current state of all endstops, useful for setup and troubleshooting. Endstops are reported as either \"open\" or \"TRIGGERED\".”, “The state of the Z probe and filament runout sensors are also reported with this command.”]\n", "excerpt": "Report endstop and probe states to the host.", "link": "/docs/gcode/M119.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>debug</span>\n \n \n ", "class": "gcode" } ,{ "title": "M120 : Enable Endstops", "content": "Enable endstops.\n", "excerpt": "Enable endstops and keep them enabled when not homing.", "link": "/docs/gcode/M120.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n ", "class": "gcode" } ,{ "title": "M121 : Disable Endstops", "content": "Disable endstops.\n", "excerpt": "Disable endstops and keep them enabled when not homing.", "link": "/docs/gcode/M121.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n ", "class": "gcode" } ,{ "title": "M122 : TMC Debugging", "content": "[“Do a communication check for configured TMC drivers.”, “With no parameters, this command returns the current settings for all installed Trinamic TMC2130 and TMC2208 stepper motor drivers. The S[0|1] parameter enables/disables continuous debugging output.”]\n", "excerpt": "Get TMC Debug Info", "link": "/docs/gcode/M122.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.1.7</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>debug</span>\n \n \n \n \n <span class=\"label label-requires\"><code>TMC2130</code></span>\n \n <span class=\"label label-requires\"><code>TMC2208</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M125 : Park Head", "content": "Save the current nozzle position and move to the configured park position.\n", "excerpt": "Save current position and move to filament change position.", "link": "/docs/gcode/M125.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>nozzle</span>\n \n \n \n \n <span class=\"label label-requires\"><code>PARK_HEAD_ON_PAUSE</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M126 : Baricuda 1 Open", "content": "Open the valve for Baricuda paste extruder 1.\n", "excerpt": "Open the valve for Baricuda 1.", "link": "/docs/gcode/M126.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>baricuda</span>\n \n \n \n \n <span class=\"label label-requires\"><code>BARICUDA</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M127 : Baricuda 1 Close", "content": "Close the valve for Baricuda paste extruder 1.\n", "excerpt": "Close the valve for Baricuda 1.", "link": "/docs/gcode/M127.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>baricuda</span>\n \n \n \n \n <span class=\"label label-requires\"><code>BARICUDA</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M128 : Baricuda 2 Open", "content": "Open the valve for Baricuda paste extruder 2.\n", "excerpt": "Open the valve for Baricuda 2.", "link": "/docs/gcode/M128.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>baricuda</span>\n \n \n \n \n <span class=\"label label-requires\"><code>BARICUDA</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M129 : Baricuda 2 Close", "content": "Close the valve for Baricuda paste extruder 2.\n", "excerpt": "Close the valve for Baricuda 2.", "link": "/docs/gcode/M129.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>baricuda</span>\n \n \n \n \n <span class=\"label label-requires\"><code>BARICUDA</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M140 : Set Bed Temperature", "content": "[“Set a new target heated bed temperature and continue without waiting. The firmware will continue to try to reach and hold the temperature in the background.”, “Use M190 to wait for the bed to reach the target temperature.”]\n", "excerpt": "Set a new target bed temperature.", "link": "/docs/gcode/M140.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>thermal</span>\n \n \n ", "class": "gcode" } ,{ "title": "M141 : Set Chamber Temperature", "content": "[“Set a new target heated chamber temperature and continue without waiting. The firmware will continue to try to reach and hold the temperature in the background.”]\n", "excerpt": "Set a new target chamber temperature.", "link": "/docs/gcode/M141.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>thermal</span>\n \n \n ", "class": "gcode" } ,{ "title": "M145 : Set Material Preset", "content": "Set the preheating presets for materials in the LCD menu.\n", "excerpt": "Set material presets in the LCD menu.", "link": "/docs/gcode/M145.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>lcd</span>\n \n \n \n \n <span class=\"label label-requires\"><code>NEWPANEL</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M149 : Set Temperature Units", "content": "Set temperature units to Celsius, Fahrenheit, or Kelvin. Celsius is the default.\n", "excerpt": "Set temperature units to Celsius, Fahrenheit, or Kelvin.", "link": "/docs/gcode/M149.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>units</span>\n \n \n ", "class": "gcode" } ,{ "title": "M150 : Set RGB(W) Color", "content": "If you have an RGB(W) light, either as part of a controller or installed separately, the M150 command can be used to set its color.\n", "excerpt": "Set the color of the RGB(W) LED, backlight, or LED strip.", "link": "/docs/gcode/M150.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>lcd</span>\n \n \n \n \n <span class=\"label label-requires\"><code>BLINKM|RGB_LED|RGBW_LED|NEOPIXEL_LED|PCA9632</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M155 : Temperature Auto-Report", "content": "It can be useful for host software to track temperatures, display and graph them over time, but polling with M105 is less than optimal. With M155 hosts simply set an interval and Marlin will keep sending data automatically. This method is preferred over polling with M105.\n", "excerpt": "Auto-report temperatures to host periodically.", "link": "/docs/gcode/M155.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>hosts</span>\n \n \n \n \n <span class=\"label label-requires\"><code>AUTO_REPORT_TEMPERATURES</code></span>\n \n <span class=\"label label-requires\"><code>EXTENDED_CAPABILITIES_REPORT</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M163 : Set Mix Factor", "content": "Set a single mix factor (in proportion to the sum total of all mix factors). The mix must be committed to a virtual tool by M164 before it takes effect.\n", "excerpt": "Set a single mix factor for a mixing extruder.", "link": "/docs/gcode/M163.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>mixing</span>\n \n \n \n \n <span class=\"label label-requires\"><code>MIXING_EXTRUDER</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M164 : Save Mix", "content": "\n", "excerpt": "Save the current mix as a virtual tool.", "link": "/docs/gcode/M164.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>mixing</span>\n \n \n \n \n <span class=\"label label-requires\"><code>MIXING_EXTRUDER</code></span>\n \n <span class=\"label label-requires\"><code>MIXING_VIRTUAL_TOOLS</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M165 : Set Mix", "content": "Set the mix for the active virtual extruder all at once. Any factors left out are set to 0.0. This is based on a reference implementation by Pìa Taubert.\n", "excerpt": "Set all mix factors for the mixing extruder.", "link": "/docs/gcode/M165.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>mixing</span>\n \n \n \n \n <span class=\"label label-requires\"><code>MIXING_EXTRUDER</code></span>\n \n <span class=\"label label-requires\"><code>DIRECT_MIXING_IN_G1</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M166 : Gradient Mix", "content": "Use M166 to set a gradient that will be automatically updated as the Z position changes during a print. The gradient smoothly transitions from one virtual tool to another between the given starting and ending Z heights. Below the starting height the starting virtual tool fully applies, and above the ending height the ending virtual tool fully applies.\n", "excerpt": "Set a Gradient Mix", "link": "/docs/gcode/M166.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>2.0.0</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>mixing</span>\n \n \n \n \n <span class=\"label label-requires\"><code>MIXING_EXTRUDER</code></span>\n \n <span class=\"label label-requires\"><code>GRADIENT_MIX</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M190 : Wait for Bed Temperature", "content": "[“This command optionally sets a new target bed temperature and waits for the target temperature to be reached before proceeding. If the temperature is set with S then it waits only when heating.”]\n", "excerpt": "Wait for the bed to reach target temperature.", "link": "/docs/gcode/M190.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>thermal</span>\n \n \n ", "class": "gcode" } ,{ "title": "M200 : Set Filament Diameter", "content": "[“Set the filament’s current diameter and enable volumetric extrusion.”, “In volumetric extrusion mode the E axis specifies cubic mm instead of linear mm, and the firmware calculates how much length to extrude for the given volume based on the filament diameter.”]\n", "excerpt": "Set the diameter for volumetric extrusion.", "link": "/docs/gcode/M200.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n ", "class": "gcode" } ,{ "title": "M201 : Set Print Max Acceleration", "content": "Set the max acceleration for one or more axes (in current units-per-second squared).\n", "excerpt": "Set maximum acceleration for print moves one or more axes.", "link": "/docs/gcode/M201.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n ", "class": "gcode" } ,{ "title": "M203 : Set Max Feedrate", "content": "Set the max feedrate for one or more axes (in current units-per-second).\n", "excerpt": "Set maximum feedrate for one or more axes.", "link": "/docs/gcode/M203.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n ", "class": "gcode" } ,{ "title": "M204 : Set Starting Acceleration", "content": "Set the preferred starting acceleration for moves of different types.\n", "excerpt": "Set the starting acceleration for moves by type.", "link": "/docs/gcode/M204.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n ", "class": "gcode" } ,{ "title": "M205 : Set Advanced Settings", "content": "Set various motion settings. See parameters for details.\n", "excerpt": "Set some advanced settings related to movement.", "link": "/docs/gcode/M205.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n ", "class": "gcode" } ,{ "title": "M206 : Set Home Offsets", "content": "Use M206 to apply a persistent offset to the native home position and coordinate space. This effectively shifts the coordinate space in the negative direction. See examples below.\n\n\n The current position is adjusted to align to the new home offset values.\n The home offset is persistent — added to the current position until changed.\n Some uses include fine adjustment of Z position (without moving endstops) and shifting the coordinate space to print on a different part of the bed.\n\n", "excerpt": "Description Here", "link": "/docs/gcode/M206.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n \n \n <span class=\"label label-requires\"><code>HAS_HOME_OFFSET</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M207 : Set Firmware Retraction", "content": "Set lengths, feedrate, and Z lift for firmware-based retraction. See parameters below.\n", "excerpt": "Set options for firmware-based retraction.", "link": "/docs/gcode/M207.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n \n \n <span class=\"label label-requires\"><code>FWRETRACT</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M208 : Firmware Recover", "content": "[“Set the added lengths and feedrates for firmware-based retract recovery. The lengths set by M208 are applied in addition to the lengths set by M207 when un-retracting (aka \"recovering\") the filament. The new values will apply to all subsequent G11 commands.”, “The \"swap\" values apply to firmware-based recover moves after a tool-change.”]\n", "excerpt": "Firmware-retraction recover settings.", "link": "/docs/gcode/M208.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n \n \n <span class=\"label label-requires\"><code>FWRETRACT</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M209 : Set Auto Retract", "content": "[“Enable or disable automatic retraction. This option is meant to help slicers that don’t support G10/G11. But it can be used to override retraction in any GCode.”, “When auto-retract is enabled, all reversed E-only moves are treated as retraction. (Recover moves are also automatically overridden.) When disabled, E retraction derives from G-code.”]\n", "excerpt": "Enable / disable auto-retraction.", "link": "/docs/gcode/M209.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n \n \n <span class=\"label label-requires\"><code>FWRETRACT</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M211 : Software Endstops", "content": "[“Optionally enable/disable software endstops, then report the current state.”, “With software endstops enabled, moves will be clipped to the physical boundaries from [XYZ]_MIN_POS to [XYZ]_MAX_POS.”]\n", "excerpt": "Set and/or get the software endstops state", "link": "/docs/gcode/M211.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n \n \n <span class=\"label label-requires\"><code>(MIN|MAX)_SOFTWARE_ENDSTOPS</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M217 : Filament swap parameters", "content": "[“When changing tools on some setups, one filament may be retracted before the other is primed. This command sets the length and feedrates used for the filament swap retract and prime.”, “If no parameters are given this command reports the current filament swap parameters.”]\n", "excerpt": "Set length and speed for filament swapping", "link": "/docs/gcode/M217.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>2.0.0</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>calibration</span>\n \n \n \n \n <span class=\"label label-requires\"><code>EXTRUDERS > 1</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M218 : Set Hotend Offset", "content": "[“To keep nozzles aligned to the work area between tool-changes, the firmware needs to know how they relate to each other.”]\n", "excerpt": "Set the offset of a hotend (from hotend 0).", "link": "/docs/gcode/M218.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>calibration</span>\n \n \n \n \n <span class=\"label label-requires\"><code>EXTRUDERS>1</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M220 : Set Feedrate Percentage", "content": "Set the feedrate percentage, which applies to all G-code-based moves in all (X, Y, Z, and E) axes.\n", "excerpt": "Set the global feedrate percentage.", "link": "/docs/gcode/M220.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n ", "class": "gcode" } ,{ "title": "M221 : Set Flow Percentage", "content": "Set the flow percentage, which applies to all E moves added to the planner.\n", "excerpt": "Set the flow percentage, which applies to all E moves.", "link": "/docs/gcode/M221.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n ", "class": "gcode" } ,{ "title": "M226 : Wait for Pin State", "content": "Wait for a pin to have a certain value or state.\n", "excerpt": "Wait for a pin to have a given state.", "link": "/docs/gcode/M226.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n ", "class": "gcode" } ,{ "title": "M240 : Trigger Camera", "content": "Trigger a camera shutter using a digital pin or by bumping a physical switch.\n", "excerpt": "Trigger a camera shutter", "link": "/docs/gcode/M240.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>extras</span>\n \n \n \n \n <span class=\"label label-requires\"><code>PHOTO_GCODE</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M250 : LCD Contrast", "content": "Set and/or get the LCD contrast. The value is constrained based on the LCD.\n", "excerpt": "Set and/or get the LCD contrast.", "link": "/docs/gcode/M250.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>lcd</span>\n \n \n \n \n <span class=\"label label-requires\"><code>HAS_LCD_CONTRAST</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M260 : I2C Send", "content": "Utility to send data over the I2C bus.\n", "excerpt": "Send data to the I2C bus.", "link": "/docs/gcode/M260.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>i2c</span>\n \n \n \n \n <span class=\"label label-requires\"><code>EXPERIMENTAL_I2CBUS</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M261 : I2C Request", "content": "Request bytes from the I2C bus and echo them to the host. To find out how to do more useful things with I2C see the I2C master / slave article.\n", "excerpt": "Request and echo bytes from the I2C bus.", "link": "/docs/gcode/M261.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>i2c</span>\n \n \n \n \n <span class=\"label label-requires\"><code>EXPERIMENTAL_I2CBUS</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M280 : Servo Position", "content": "Set or get the position of a servo.\n", "excerpt": "Set or get a servo position.", "link": "/docs/gcode/M280.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>servos</span>\n \n \n \n \n <span class=\"label label-requires\"><code>NUM_SERVOS>0</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M290 : Babystep", "content": "[“Apply babysteps to one or more axes using current units. Offsets applied with M290 aren’t added to the current coordinates, but are intended for making small adjustments, especially in the Z axis, at the start of a print.”, “Note that when BABYSTEP_ZPROBE_OFFSET is enabled, M290 also modifies the Probe Z Offset (with no immediate effects). The new Z offset applies to successive probing operations, and can be saved with M500. This behavior is means to coincide with the LCD Menu replacing \"Z Babystepping\" with \"Babystep Z Probe Offset.\" To avoid this side-effect, use M290 P0 or leave BABYSTEP_ZPROBE_OFFSET disabled.”]\n", "excerpt": "Babystep one or more axes", "link": "/docs/gcode/M290.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.1.7</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>calibration</span>\n \n \n \n \n <span class=\"label label-requires\"><code>BABYSTEPPING</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M300 : Play Tone", "content": "Add a tone to the tone queue.\n", "excerpt": "Play a single tone, buzz, or beep.", "link": "/docs/gcode/M300.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>lcd</span>\n \n \n \n \n <span class=\"label label-requires\"><code>SPEAKER</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M301 : Set Hotend PID", "content": "Set the values that control the PID loop for a hotend.\n", "excerpt": "Set PID values for a hotend.", "link": "/docs/gcode/M301.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>thermal</span>\n \n \n \n \n <span class=\"label label-requires\"><code>PIDTEMP</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M302 : Cold Extrude", "content": "Set the minimum extrusion temperature, potentially allowing E movement at temperatures below the melting point of the material.\n", "excerpt": "Set minimum extrusion temperature, allow cold extrusion.", "link": "/docs/gcode/M302.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>thermal</span>\n \n \n \n \n <span class=\"label label-requires\"><code>PREVENT_COLD_EXTRUSION</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M303 : PID autotune", "content": "This command initiates a process of heating and cooling to determine the proper PID values for the specified hotend or the heated bed.\n", "excerpt": "Auto-tune the PID system to find stable values.", "link": "/docs/gcode/M303.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>thermal</span>\n \n \n \n \n <span class=\"label label-requires\"><code>PIDTEMP|PIDTEMPBED</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M304 : Set Bed PID", "content": "Set the values that control the PID loop for the heated bed.\n", "excerpt": "Set PID values for the heated bed.", "link": "/docs/gcode/M304.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>thermal</span>\n \n \n \n \n <span class=\"label label-requires\"><code>PIDTEMPBED</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M350 : Set micro-stepping", "content": "If your board has digital micro-stepping pins (X_MS1, Y_MS1, etc.), use this command to set the micro-steps.\n", "excerpt": "Set micro-stepping for drivers that support it", "link": "/docs/gcode/M350.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>HAS_MICROSTEPS</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M351 : Set Microstep Pins", "content": "If your board has digital micro-stepping pins (X_MS1, Y_MS1, etc.), use this command to set the micro-steps.\n", "excerpt": "Directly set the micro-stepping pins", "link": "/docs/gcode/M351.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>HAS_MICROSTEPS</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M355 : Case Light Control", "content": "Set the case light power state and/or brightness.\n", "excerpt": "Turn the case light on or off, set brightness", "link": "/docs/gcode/M355.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>CASE_LIGHT_PIN</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M360 : SCARA Theta A", "content": "Move the nozzle to SCARA calibration position Theta 0 (A0 B120) for calibration of “zero degrees.”\n", "excerpt": "Move to Theta A", "link": "/docs/gcode/M360.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>MORGAN_SCARA</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M361 : SCARA Theta-B", "content": "Move the nozzle to SCARA Theta-B calibration position Theta 90 (A90 B130) for calibration of “90 degrees steps-per-degree.”\n", "excerpt": "Move to Theta-B", "link": "/docs/gcode/M361.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>MORGAN_SCARA</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M362 : SCARA Psi-A", "content": "Move the nozzle to SCARA Psi-A calibration position Psi 0 (A60 B180) for calibration of “zero degrees.”\n", "excerpt": "Move to Psi-A", "link": "/docs/gcode/M362.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>MORGAN_SCARA</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M363 : SCARA Psi-B", "content": "Move the nozzle to SCARA Psi-B calibration position Psi 90 (A50 B90) for calibration of “90 degrees steps-per-degree.”\n", "excerpt": "Move to Psi-B", "link": "/docs/gcode/M363.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>MORGAN_SCARA</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M364 : SCARA Psi-C", "content": "Move the nozzle to SCARA Psi-C calibration position Theta-Psi 90 (A45 B135) for calibration of “90 degrees to Theta.”\n", "excerpt": "Move to Psi-C", "link": "/docs/gcode/M364.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>MORGAN_SCARA</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M380 : Activate Solenoid", "content": "Activate the solenoid on the active extruder.\n", "excerpt": "Activate", "link": "/docs/gcode/M380.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>none</span>\n \n \n \n \n <span class=\"label label-requires\"><code>EXT_SOLENOID</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M381 : Deactivate Solenoids", "content": "Deactivate all solenoids on all extruders.\n", "excerpt": "Deactivate all extruder solenoids", "link": "/docs/gcode/M381.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>none</span>\n \n \n \n \n <span class=\"label label-requires\"><code>EXT_SOLENOID</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M400 : Finish Moves", "content": "This command causes all GCode processing to pause and wait in a loop until all moves in the planner are completed.\n", "excerpt": "Wait for all moves to finish", "link": "/docs/gcode/M400.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n ", "class": "gcode" } ,{ "title": "M401 : Deploy Probe", "content": "Deploy the bed probe. The Z axis may raise up to make room for the probe to deploy.\n", "excerpt": "Deploy the bed probe", "link": "/docs/gcode/M401.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>calibration</span>\n \n \n \n \n <span class=\"label label-requires\"><code>HAS_BED_PROBE</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M402 : Stow Probe", "content": "Stow the bed probe. The Z axis may raise up to make room for the probe to stow.\n", "excerpt": "Stow the bed probe", "link": "/docs/gcode/M402.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>calibration</span>\n \n \n \n \n <span class=\"label label-requires\"><code>HAS_BED_PROBE</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M403 : MMU2 Filament Type", "content": "Set the filament type for a Prusa MMU2 (or compatible) material slot.\n", "excerpt": "Set filament type for Multi-Material Unit 2.0", "link": "/docs/gcode/M403.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>PRUSA_MMU2</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M404 : Set Filament Diameter", "content": "Report or set the nominal filament width, such as 1.75 or 3.00.\n\nThis value is used to determine the percentage difference when auto-adjusting flow in response to the measured filament width, and should match the value used for filament width in your slicer settings.\n", "excerpt": "Set the nominal diameter for filament width sensor auto-flow", "link": "/docs/gcode/M404.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>FILAMENT_WIDTH_SENSOR</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M405 : Filament Width Sensor On", "content": "Turn on the filament width sensor and start using it to do flow control. Initially, the filament between the sensor and the hot-end will be treated as the nominal width.\n", "excerpt": "Enable filament width sensor flow control", "link": "/docs/gcode/M405.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>FILAMENT_WIDTH_SENSOR</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M406 : Filament Width Sensor Off", "content": "Turn off the filament width sensor and stop using it to do flow control.\n", "excerpt": "Disable filament width sensor flow control", "link": "/docs/gcode/M406.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>FILAMENT_WIDTH_SENSOR</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M407 : Filament Width", "content": "Report the current measured filament width to the host.\n", "excerpt": "Report the measured filament width", "link": "/docs/gcode/M407.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>FILAMENT_WIDTH_SENSOR</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M410 : Quickstop", "content": "Stop all steppers instantly. Since there will be no deceleration, steppers are expected to be out of position after this command.\n", "excerpt": "Stop all steppers instantly", "link": "/docs/gcode/M410.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n ", "class": "gcode" } ,{ "title": "M412 : Filament Runout", "content": "Enable or disable filament runout detection. When filament sensors are enabled, Marlin will respond to a filament runout by running the configured G-code (usually M600 Filament Change). When filament runout detection is disabled, Marlin will take no action for filament runout.\n", "excerpt": "Enable / disable filament runout detection", "link": "/docs/gcode/M412.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>2.0.0</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>FILAMENT_RUNOUT_SENSOR</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M413 : Power-loss Recovery", "content": "Enable or disable the Power-loss Recovery feature. When this feature is enabled, the state of the current print job (SD card only) will be saved to a file on the SD card. If the machine crashes or a power outage occurs, the firmware will present an option to Resume the interrupted print job. In Marlin 2.0 the POWER_LOSS_RECOVERY option must be enabled.\n\nThis feature operates without a power-loss detection circuit by writing to the recovery file periodically (e.g., once per layer), or if a POWER_LOSS_PIN is configured then it will write the recovery info only when a power-loss is detected. The latter option is preferred, since constant writing to the SD card can shorten its life, and the print will be resumed where it was interrupted rather than repeating the last layer. (Future implementations may allow use of the EEPROM or the on-board SD card.)\n", "excerpt": "Enable / disable power-loss recovery", "link": "/docs/gcode/M413.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>2.0.0</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>POWER_LOSS_RECOVERY</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M420 : Bed Leveling State", "content": "[“Get and/or set the enabled state of bed leveling compensation, plus Z fade height.”, “This command has been extended with L to load a mesh for Unified Bed Leveling.”]\n", "excerpt": "Get and/or set bed leveling state and fade height", "link": "/docs/gcode/M420.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n \n \n <span class=\"label label-requires\"><code>AUTO_BED_LEVELING_(3POINT|LINEAR|BILINEAR|UBL)|MESH_BED_LEVELING</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M421 : Set Mesh Value", "content": "[“This command is used to set a single Z value for a mesh point in the stored bed leveling data.”, “Allowed forms are M421 In Jn Zn, M421 Xn Yn Zn (MESH_BED_LEVELING only) or M421 C Zn (AUTO_BED_LEVELING_UBL only).”]\n", "excerpt": "Set a single mesh Z height", "link": "/docs/gcode/M421.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n \n \n <span class=\"label label-requires\"><code>AUTO_BED_LEVELING_(BILINEAR|UBL)|MESH_BED_LEVELING</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M425 : Backlash compensation", "content": "[“Backlash compensation will add extra steps to one or more segments whenever a motor reverses direction.”, “By default, steps are added to the first segment after a direction change. This gives the best dimensional accuracy but may cause marks to appear in the print. Smoothing spreads the added steps over multiple consecutive segments to prevent blemishes in the print, at the expense of dimensional accuracy.”, “Backlash compensation can be configured at either compile-time or run-time. Enable BACKLASH_GCODE to turn on M425 and a \"Backlash\" menu item.”, “Backlash can be measured automatically on all axes with G425 or on Z only with G29 when MEASURE_BACKLASH_WHEN_PROBING is enabled.”]\n", "excerpt": "Enable and tune backlash compensation", "link": "/docs/gcode/M425.html", "html": "\n \n <span class=\"label label-warning\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Experimental feature\"><i class=\"fa fa-flask\" aria-hidden=\"true\"></i></span></span>\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>calibration</span>\n \n \n \n \n <span class=\"label label-requires\"><code>BACKLASH_COMPENSATION</code></span>\n \n <span class=\"label label-requires\"><code>BACKLASH_GCODE</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M428 : Home Offsets Here", "content": "Use M428 to set a persistent offset to the native home position and coordinate space by assigning the current position as the native home position. See the example below.\n\n\n The current position must be within 2cm from 0 or an endstop.\n The current position is set to the native home position.\n Any previous position shift from G92 is cleared.\n The home offset is persistent — added to the current position until changed.\n Some uses include fine adjustment of Z position (without moving endstops) and shifting the coordinate space to print on a different part of the bed.\n\n", "excerpt": "Set home offsets based on current position", "link": "/docs/gcode/M428.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>planner</span>\n \n \n \n \n <span class=\"label label-requires\"><code>HAS_HOME_OFFSET</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M500 : Save Settings", "content": "Save all configurable settings to EEPROM.\n", "excerpt": "Save settings to EEPROM.", "link": "/docs/gcode/M500.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>eeprom</span>\n \n \n \n \n <span class=\"label label-requires\"><code>EEPROM_SETTINGS</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M501 : Restore Settings", "content": "Load all saved settings from EEPROM.\n", "excerpt": "Restore settings from EEPROM.", "link": "/docs/gcode/M501.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>eeprom</span>\n \n \n \n \n <span class=\"label label-requires\"><code>EEPROM_SETTINGS</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M502 : Factory Reset", "content": "[“Reset all configurable settings to their factory defaults.”, “To also reset settings in EEPROM, follow with M500.”]\n", "excerpt": "Restore all settings to factory defaults.", "link": "/docs/gcode/M502.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>eeprom</span>\n \n \n ", "class": "gcode" } ,{ "title": "M503 : Report Settings", "content": "Print a concise report of all current settings (in SRAM) to the host console.\n", "excerpt": "Report all settings that may be saved to EEPROM.", "link": "/docs/gcode/M503.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>eeprom</span>\n \n \n ", "class": "gcode" } ,{ "title": "M504 : Validate EEPROM contents", "content": "Validate the contents of the EEPROM.\n", "excerpt": "Validate the contents of the EEPROM.", "link": "/docs/gcode/M504.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>eeprom</span>\n \n \n \n \n <span class=\"label label-requires\"><code>EEPROM_SETTINGS</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M524 : Abort SD print", "content": "Abort an SD print in progress and turn off all heaters.\n", "excerpt": "Abort an SD print started with `M24`", "link": "/docs/gcode/M524.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>2.0.0</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>sdcard</span>\n \n \n \n \n <span class=\"label label-requires\"><code>SDSUPPORT</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M540 : Endstops Abort SD", "content": "Set whether SD printing should abort in the event of any endstop being triggered. This provides a fast way to abort a print in the event of mechanical failure such as loose couplings, lost steps, diverted axes, binding, etc., which lead to axes being very far out of position.\n", "excerpt": "Abort SD printing when an endstop is triggered.", "link": "/docs/gcode/M540.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>sdcard</span>\n \n \n \n \n <span class=\"label label-requires\"><code>SDSUPPORT</code></span>\n \n <span class=\"label label-requires\"><code>SD_ABORT_ON_ENDSTOP_HIT</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M569 : Set TMC stepping mode", "content": "Toggle between stealthChop and spreadCycle on supporting TMC drivers.\n", "excerpt": "Toggle stealthChop", "link": "/docs/gcode/M569.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>2.0.0</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>none</span>\n \n \n \n \n <span class=\"label label-requires\"><code>TMC2130</code></span>\n \n <span class=\"label label-requires\"><code> TMC2208</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M600 : Filament Change", "content": "[“The M600 command initiates the filament change procedure. The basic procedure will move the print head away from the print, eject the filament, wait for new filament to be inserted and the user to confirm, load and prime the filament, and continue with the print. M600 may be initiated automatically if a filament runout sensor is installed.”]\n", "excerpt": "Automatically change filament", "link": "/docs/gcode/M600.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.1.0</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>filament</span>\n \n \n \n \n <span class=\"label label-requires\"><code>ADVANCED_PAUSE_FEATURE</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M603 : Configure Filament Change", "content": "[“The M603 command configures automatic filament change parameters.”]\n", "excerpt": "Configure automatic filament change parameters", "link": "/docs/gcode/M603.html", "html": "\n \n \n <span class=\"label label-success\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Available since\"><i class=\"fa fa-code\" aria-hidden=\"true\"></i>1.1.0</span></span>\n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>filament</span>\n \n \n \n \n <span class=\"label label-requires\"><code>ADVANCED_PAUSE_FEATURE</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M605 : Dual Nozzle Mode", "content": "[“This command behaves differently for DUAL_X_CARRIAGE vs. DUAL_NOZZLE_DUPLICATION_MODE”, “For DUAL_NOZZLE_DUPLICATION_MODE the S2 parameter enables duplication mode. Any other value disables it.”, “For DUAL_X_CARRIAGE, this command sets the Dual X mode. See the description of S below.”]\n", "excerpt": "Set the behavior mode for dual nozzles", "link": "/docs/gcode/M605.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>DUAL_NOZZLE_DUPLICATION_MODE|DUAL_X_CARRIAGE</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M665 : SCARA Configuration", "content": "[“Configure SCARA geometry values”]\n", "excerpt": "Set SCARA geometry values", "link": "/docs/gcode/M665-scara.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>none</span>\n \n \n \n \n <span class=\"label label-requires\"><code>MORGAN_SCARA|MAKERARM_SCARA</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M665 : Delta Configuration", "content": "[“Delta machines are very fast and accurate when tuned. The first key is to make sure all your dimensions are set correctly. Even small errors in these values can lead to curved movements and failed prints. To ensure the best delta experience, use this command in conjunction with G33 to get these dimensions set perfectly before beginning to print.”]\n", "excerpt": "Set delta geometry values", "link": "/docs/gcode/M665.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>none</span>\n \n \n \n \n <span class=\"label label-requires\"><code>DELTA</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M666 : Set dual endstop offsets", "content": "The M666 command allows adjusting the offsets for dual endstops\n", "excerpt": "Set dual endstop offsets", "link": "/docs/gcode/M666-dual.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>calibration</span>\n \n \n \n \n <span class=\"label label-requires\"><code>(X|Y|Z)_DUAL_ENDSTOPS</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M666 : Set Delta endstop adjustments", "content": "The M666 command allows adjusting the endstops on a Delta printer.\n", "excerpt": "Set Delta endstop adjustments", "link": "/docs/gcode/M666.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>calibration</span>\n \n \n \n \n <span class=\"label label-requires\"><code>DELTA</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M701 : Load filament", "content": "Load filament into the active extruder. By default this will use the configured ADVANCED_PAUSE_FEATURE settings.\n", "excerpt": "Load filament", "link": "/docs/gcode/M701.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>NOZZLE_PARK_FEATURE</code></span>\n \n <span class=\"label label-requires\"><code>ADVANCED_PAUSE_FEATURE</code></span>\n \n <span class=\"label label-requires\"><code>FILAMENT_LOAD_UNLOAD_GCODES</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M702 : Unload filament", "content": "Unload filament. By default this command will use the configured ADVANCED_PAUSE_FEATURE settings.\n", "excerpt": "Unload filament", "link": "/docs/gcode/M702.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>NOZZLE_PARK_FEATURE</code></span>\n \n <span class=\"label label-requires\"><code>ADVANCED_PAUSE_FEATURE</code></span>\n \n <span class=\"label label-requires\"><code>FILAMENT_LOAD_UNLOAD_GCODES</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M7219 : MAX7219 Control", "content": "Set the state of one or more Max7219 matrix displays or 7-segment digital displays.\n", "excerpt": "Control Max7219 Segmented LEDs", "link": "/docs/gcode/M7219.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>debug</span>\n \n \n \n \n <span class=\"label label-requires\"><code>MAX7219_DEBUG</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M851 : Z Probe Offset", "content": "[“Set the vertical distance from the nozzle to the Z probe trigger-point.”, “The easiest way to get the value is to:\\n- Home the Z axis.\\n- Raise Z and deploy the probe.\\n- Move Z down slowly until the probe triggers.\\n- Take the current Z value and negate it. (5.2 =&gt; -5.2)\\n- Set with M851 Z-5.2 and #define Z_PROBE_OFFSET_FROM_EXTRUDER -5.2.\\n”]\n", "excerpt": "Set the Z probe Z offset from nozzle", "link": "/docs/gcode/M851.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>none</span>\n \n \n \n \n <span class=\"label label-requires\"><code>HAS_BED_PROBE</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M852 : Bed Skew Compensation", "content": "[“Bed Skew Compensation corrects for misalignment in the XY, XZ, and ZY axes through the use of correction factors.”]\n", "excerpt": "Misalignment in the XYZ axes.", "link": "/docs/gcode/M852.html", "html": "\n \n <span class=\"label label-warning\"><span data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Experimental feature\"><i class=\"fa fa-flask\" aria-hidden=\"true\"></i></span></span>\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>calibration</span>\n \n \n ", "class": "gcode" } ,{ "title": "M900 : Linear Advance Factor", "content": "Get and/or set the Linear Advance K factor.\n", "excerpt": "Get and set Linear Advance K value", "link": "/docs/gcode/M900.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>LIN_ADVANCE</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M906 : TMC Motor Current", "content": "Set the current for a stepper motor in milliamps units.\n", "excerpt": "Set the motor current (in milliamps)", "link": "/docs/gcode/M906.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>none</span>\n \n \n \n \n <span class=\"label label-requires\"><code>TMC2130</code></span>\n \n <span class=\"label label-requires\"><code>TMC2208</code></span>\n \n <span class=\"label label-requires\"><code>TMC2660</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M907 : Set Motor Current", "content": "Set digital trimpot motor current using axis codes X, Y, Z, E, plus B and S. The unit used for current depends on the type of stepper driver.\n", "excerpt": "Set motor current via digital trimpot", "link": "/docs/gcode/M907.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>DIGIPOTSS_PIN|HAS_MOTOR_CURRENT_PWM|DIGIPOT_I2C|DAC_STEPPER_CURRENT</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M908 : Set Trimpot Pins", "content": "Set the digital trimpot current directly by address/channel/pin index. DAC_STEPPER_CURRENT pertains to the MCP4728.\n", "excerpt": "Set a digital trimpot directly", "link": "/docs/gcode/M908.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>DAC_STEPPER_CURRENT|DIGIPOTSS_PIN</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M909 : DAC Print Values", "content": "Print the DAC stepper current values in the format “% (Amps)”.\n", "excerpt": "Report DAC current values to host", "link": "/docs/gcode/M909.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>DAC_STEPPER_CURRENT</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M910 : Commit DAC to EEPROM", "content": "Commit digipot/DAC value to external EEPROM via I2C.\n", "excerpt": "Commit digipot/DAC value to external EEPROM", "link": "/docs/gcode/M910.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>DAC_STEPPER_CURRENT</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M911 : TMC OT Pre-Warn Condition", "content": "Report the TMC stepper driver overtemperature pre-warn condition to the host.\n", "excerpt": "Driver overtemperature pre-warn condition", "link": "/docs/gcode/M911.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>TMC2130</code></span>\n \n <span class=\"label label-requires\"><code> TMC2208</code></span>\n \n <span class=\"label label-requires\"><code> TMC2660</code></span>\n \n <span class=\"label label-requires\"><code> MONITOR_DRIVER_STATUS</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M912 : Clear TMC OT Pre-Warn", "content": "Clear the stepper driver overtemperature pre-warn condition flag.\n", "excerpt": "Clear overtemperature pre-warn condition flag", "link": "/docs/gcode/M912.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>TMC2130</code></span>\n \n <span class=\"label label-requires\"><code> TMC2208</code></span>\n \n <span class=\"label label-requires\"><code> TMC2660</code></span>\n \n <span class=\"label label-requires\"><code> MONITOR_DRIVER_STATUS</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M913 : Set Hybrid Threshold Speed", "content": "[“When HYBRID_THRESHOLD is enabled, the TMC driver is switched from the quieter StealthChop to spreadCycle when the feed rate for a given stepper motor is over its _HYBRID_THRESHOLD.”, “### Individual Threshold Values\\n- X_HYBRID_THRESHOLD\\n- X2_HYBRID_THRESHOLD\\n- Y_HYBRID_THRESHOLD\\n- Y2_HYBRID_THRESHOLD\\n- Z_HYBRID_THRESHOLD\\n- Z2_HYBRID_THRESHOLD\\n- E0_HYBRID_THRESHOLD\\n- E1_HYBRID_THRESHOLD\\n- E2_HYBRID_THRESHOLD\\n- E3_HYBRID_THRESHOLD\\n- E4_HYBRID_THRESHOLD\\n”]\n", "excerpt": "TMC driver switching to spreadCycle", "link": "/docs/gcode/M913.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>HAVE_TMC2130 or HAVE_TMC2208</code></span>\n \n <span class=\"label label-requires\"><code>HYBRID_THRESHOLD</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M914 : TMC Bump Sensitivity", "content": "Some TMC stepper drivers can detect when they bump into something that causes them to stop moving. This feature is so sensitive that it can actually take the place of traditional endstops. Use this command to set the bump sensitivity for the X, Y, and Z stepper drivers.\n", "excerpt": "Set sensorless homing sensitivity", "link": "/docs/gcode/M914.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>TMC2130</code></span>\n \n <span class=\"label label-requires\"><code>SENSORLESS_HOMING</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M915 : TMC Z axis calibration", "content": "The command aims to align the ends of the X gantry (for a Průša i3-style printer). Here’s a video demonstration.\n\nUsing the given current, Marlin will move the Z axis (at homing speed) to the top plus a given extra distance. Since this intentionally stalls the Z steppers, you should use the minimum current required to move the axis.\n\nZ is then re-homed to correct the position.\n", "excerpt": "Align ends of the Z axis and test torque", "link": "/docs/gcode/M915.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n \n \n <span class=\"label label-requires\"><code>TMC2130</code></span>\n \n <span class=\"label label-requires\"><code>TMC_Z_CALIBRATION</code></span>\n \n \n ", "class": "gcode" } ,{ "title": "M928 : Start SD Logging", "content": "Use this command to start logging all console and host input to an SD file while still operating the machine.\n", "excerpt": "Log serial input to an SD file", "link": "/docs/gcode/M928.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>sdcard</span>\n \n \n ", "class": "gcode" } ,{ "title": "M999 : STOP Restart", "content": "If a STOP occurs you can use M999 to restart the “stopped” machine after resolving the issue.\n\nMarlin will call STOP if any error occurs that would make continuing the current process problematic. For example, if the probe fails to deploy, it will abort probing and STOP. Note that this disables all heaters.\n", "excerpt": "Return the machine to Running state", "link": "/docs/gcode/M999.html", "html": "\n \n \n \n <span class=\"label label-default\"><i class=\"fa fa-tags\" aria-hidden=\"true\"></i>control</span>\n \n \n ", "class": "gcode" } ,{ "title": "Home", "content": "\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\n\n\n \n \n \n Marlin Firmware\n Open Source 3D Printer Driver\n First created in 2011 for RepRap and Ultimaker by Erik van der Zalm et. al., today Marlin drives most of the world's 3D printers. Reliable and precise, Marlin delivers outstanding print quality while keeping you in full control of the process.\n As an Open Source project hosted on Github, Marlin is owned and maintained by the maker community. Learn how you can contribute!\n \n \n \n &nbsp; Learn more\n \n &nbsp; Download\n \n \n \n\n\n\n \n \n{% for feature in site.data.features %}\n \n \n \n \n \n {{ feature.title }}\n \n \n \n \n \n \n{% endfor %}\n \n \n\n\n\n", "link": "/", "excerpt": "Marlin Firmware - A really good 3D printer driver.", "class": "page" } ,{ "title": "Automatic Bed Leveling", "content": " \nThis article pertains to Marlin 1.1.6 and some earlier versions. Corrections/improvements are welcome.\n \n\n \nMarlin also includes Unified Bed Leveling and Mesh Bed Leveling which have their own unique options. The information on this page only fully applies to ABL.\n \n\n\n\nAutomatic Bed Leveling (ABL) helps improve the quality of printing and bed adhesion by taking several measurements of the bed surface and then adjusting all movement to follow the tilt or contours of the bed. Most beds appear quite flat and even, but even when the bed is flat, there may be irregularities due to tape or other matter on the surface. Or there may be irregularities in the bed or nozzle height due to mechanical flaws. ABL is able to compensate for all these kinds of height irregularities.\n\nABL requires a Bed Probe to automatically measure the bed height at various points. Fortunately, probes come in many varieties, so there’s a probe for every kind of printer. One popular solution is to use a mechanical switch mounted on a servo arm. The popular BLTouch probe emulates a servo but uses a retractable pin. There are infrared and inductive probes that trigger at some known distance from the bed. The nozzle itself may be used by mounting it on a spring-loaded carriage that presses a switch, or on a floating carriage that opens a contact.\n\nNote that Marlin now includes a PROBE_MANUALLY option (described below) so if you don’t have an electronic probe you can still use all forms of ABL.\n\nTypes of Automatic Bed Leveling\n\n Three-Point: Probe the bed at 3 arbitrary points and apply a matrix to the bed’s overall tilt.\n Planar Grid: Probe the bed in a grid and (like three-point) apply a matrix to the bed’s overall tilt.\n Bilinear Grid: Probe the bed in a grid and apply mesh-based compensation. Best for an irregular bed.\n\n\nConfiguring Automatic Bed Leveling\n\n Enable one of the automatic bed leveling options:\n \n AUTO_BED_LEVELING_3POINT\n AUTO_BED_LEVELING_LINEAR\n AUTO_BED_LEVELING_BILINEAR\n \n \n\n\nUnless you know you have a very flat bed, you should always use AUTO_BED_LEVELING_BILINEAR. And if you have an LCD and enough program memory, you should also enable LCD_BED_LEVELING to add a Bed Leveling sub-menu to the LCD.\n\n\n \n Configure the points (for 3-point leveling) or boundaries (for the others) where probing will occur. For the grid-based leveling options specify how many points to probe in X and Y. These may be set to different values, but for a square bed they should be equal.\n \n \n For testing, enable DEBUG_LEVELING_FEATURE. With this option enabled, use M111 S32 to turn on detailed logging of homing and bed leveling. This will cause G28 and G29 to report everything they do, step-by-step, and can be indispensible for troubleshooting when things go wrong.\n \n \n Upload Marlin to the board and get ready for that first test. As always, do M502 followed by M500 to ensure that the configured “default” settings are stored in the EEPROM. Otherwise, older saved settings might be loaded and used.\n \n\n\nFirst-Time Bed Leveling\nBegin with M111 S247 for maximum logging. Before leveling the bed the machine must be homed with G28. This establishes the current position and makes sure that the carriage won’t try to move outside the physical limits.\n\nBegin Automatic Bed Leveling with a plain G29 command. This will use the settings as configured. Stay close to the power switch in case the machine tries to move out of bounds. For the intial test we just want to determine whether probing works.\n\nIf all goes well, move the nozzle down close to the bed and use a piece of paper to test the nozzle height. The paper should slide with a little bit of catch, but not too much. Now move the nozzle to different points on the bed with G1 and re-test the height with the paper at each point. The feel should be close to the same at all points. If you find that the leveling isn’t very accurate, use M48 to test the accuracy of the bed probe.\n\nSaving and Loading\nAfter a G29 the leveling data is only stored in RAM. You have to use M500 to save the bed leveling data to EEPROM, otherwise the data will be lost when you restart (or reconnect) the printer. Use M502 to reset the bed leveling data (and other settings to defaults). Use M501 to reload your last-saved bed leveling from EEPROM. This is done automatically on reboot.\n\nAfter a G29 bed leveling is automatically enabled, but in all other situations you must use M420 S1 to enable bed leveling. It is essential to include the command M420 S1 in the “Start G-code” in your slicer settings. If you have no bed leveling, or if there is no leveling data, then this command is simply ignored.\n\nNo Probe? No Problem!\nMarlin now includes a PROBE_MANUALLY option as a kind of faux probe. With this option enabled you send G29 repeatedly, once for each point, until all points have been measured. In-between points you must manually adjust the Z axis with G1 or your host software, feeling under the nozzle with a piece of paper or feeler gauge. Once the height feels right, send G29 to move to the next point. This may take a while! When all points are done, be sure to save the results with M500.\n\nThe LCD_BED_LEVELING option makes manual leveling a lot faster and easier by providing a guided procedure and direct Z adjustment.\n\nFor even more exciting details about ABL, see the G29 Auto Bed Leveling page.\n", "link": "/docs/features/auto_bed_leveling.html", "excerpt": "Automated procedures to probe the bed and compensate for an irregular or tilted bed", "class": "feature" } ,{ "title": "Firmware Retract", "content": "\n\nMolten filament extrusion is an inexact science at best. While 3D printers can perform XYZ movements with incredible accuracy and repeatability, extruding molten filament continues to be one of the most challenging aspects of 3D printing due to its inherent slop. Many factors can influence extrusion latency and ooze, including the volume of the melt chamber, the hotend temperature, the viscosity of the material, the diameter of the nozzle, ambient temperature, and so on. As a result, tuning extrusion can be one of the most time-consuming aspects of printer calibration.\n\nTo help deal with latency and reduce ooze, almost every extruder needs to apply some amount of retraction in between continuous extrusions, then an equal amount of recovery when starting the next extrusion. In a retract move, the extruder pulls the filament up out of the hot end to create negative pressure and (hopefully) prevent the filament from oozing during the next travel move. The recover move reverses the retraction to restore pressure before starting the next extruded line. Proper length and speed of retraction can vary widely, so it helps to experiment.\n\nSlicer Retraction\n\nNormally you configure the retraction length and feedrate in your slicer software, then all retract and recover moves are baked into the resulting G-code. This works well if you know the best length and feedrate to use and don’t expect a lot of variability, but it makes experimentation and configuration changes much slower going since any changes in retraction require re-slicing all of your models. All of them!\n\nFirmware-based Retraction\n\nWith Firmware-based Retraction, Marlin manages all the details of retraction and recovery. Instead of generating extra E moves, the slicer just outputs G10 for retract moves and G11 for recover moves. Before doing a tool-change, the slicer outputs G10 S1 for a swap-retract, and then the next G11 for that extruder will automatically be a swap-recover.\n\nIn addition to producing a smaller G-code file, firmware-based retraction allows you to tune your retract/recover settings during a print and save them to EEPROM for all future prints with the same material. This means you never have to re-slice your models for a different material or new filament spool. Just run a test print to recheck and fine-tune retraction settings, save them to EEPROM, and get on with more printing.\n\nEnable Firmware-based Retraction with the FWRETRACT option in Configuration_adv.h. Default lengths and feedrates may also be set there.\n\nSee M207 Set Retract and M208 Set Recover for available runtime settings.\n\nAutomatic Firmware Retraction\n\nMarlin includes Automatic Firmware Retraction (aka “Auto Retract”) to convert slicer-based retraction to Firmware-based Retraction on the fly. When Automatic Firmware Retraction is enabled (e.g., with M209 Auto Retract) Marlin converts all retract/recover moves (G0 E moves over a configured length) into firmware-based retract/recover moves, using the length and feedrate values set in the firmware instead of those specified by the G-code.\n\nAFR Caveats\n\nCurrently, the M209 state is persistent and the state is saved to EEPROM. The expectation has been that once you’ve settled on a preference for firmware retraction you’ll set the machine and keep it on or off. This behavior may change so that auto-retract is disabled most often, as it is safer to always leave it off. For legacy G-code, just add M209 S1 to the starting code and M209 S0 to the end.\n\nAuto-retract has a MIN_RETRACT setting, but it has no MAX_RETRACT setting. So when Auto Retract is enabled, long G0 moves (e.g., for a manual filament change) will be done as retract/recover moves. So it is very important to turn off automatic firmware retraction with M209 S0 before doing any manual E moves.\n\n \n** Avoid using Automatic Firmware Retraction unless absolutely needed! **\n \n", "link": "/docs/features/fwretract.html", "excerpt": "Configuration and usage of firmware-based retract and recover.", "class": "feature" } ,{ "title": "LCD Menu Tree", "content": " \nThis page is a work in progress, based on Marlin 1.1.2.\n \n\nIn addition to a serial/usb/host interface, Marlin also includes a comprehensive user interface designed for inexpensive character and graphical LCD controllers. Rotate a knob or use buttons to navigate menu items, edit values, and make other adjustments. Click the knob or press a button to choose menu items, exit adjustment screens, and perform other actions.\n\nNote: In low-level contexts we refer to the first extruder as E0, the second as E1, etc. However, at “user level” in the LCD menus, we refer to the first extruder as E1, the second as E2, etc. (This may change in future depending on user-preference.)\n\n\n\nThe tables below describe every menu item for every option (and all 5 extruders). In normal use the LCD menu will be much smaller in size.\n\nMain Menu\n\n\n \n \n Item\n Description\n Requirements\n \n \n \n \n « Info Screen\n  \n  \n \n \n Debug »\n  \n HAS_DEBUG_MENU (LCD_PROGRESS_BAR_TEST)\n \n \n Case Light ON/OFF\n Toggle the case light\n MENU_ITEM_CASE_LIGHT\n \n \n Reset BLTouch\n  \n BLTOUCH\n \n \n Tune »\n  \n (if printing)\n \n \n Prepare »\n  \n (if idle)\n \n \n Calibrate Delta »\n  \n DELTA_CALIBRATION_MENU (if idle)\n \n \n Control »\n  \n  \n \n \n Pause/Resume Print\n  \n SDSUPPORT (while SD printing)\n \n \n SD Card »\n Navigate the SD Card\n SDSUPPORT (while idle)\n \n \n Init SD\n M21 detect SD Card\n !SD_DETECT &amp;&amp; SDSUPPORT\n \n \n Info »\n  \n LCD_INFO_MENU\n \n \n\n\nDebug\n\n\n \n \n Item\n Description\n Requirements\n \n \n \n \n « Main\n  \n  \n \n \n Progress Bar Test\n Test the encoder using a progress bar\n LCD_PROGRESS_BAR_TEST\n \n \n\n\nTune\nThe Tune menu is only available during active printing. Most items in this menu are editable values.\n\n\n \n \n Item\n Description\n Requirements\n \n \n \n \n « Main\n  \n  \n \n \n Speed: -–-\n Feed Rate Multiplier\n  \n \n \n Bed Z: -–-\n MBL Z offset\n MESH_BED_LEVELING &amp;&amp; LCD_BED_LEVELING\n \n \n Nozzle (#): -–-\n Nozzle temperature(s)\n HOTENDS\n \n \n Bed: -–-\n Bed temperature(s)\n HAS_THERMALLY_PROTECTED_BED &amp;&amp; WATCH_BED_TEMP_PERIOD &gt; 0\n \n \n Fan Speed (#): -–-\n  \n FAN_COUNT &gt; 0\n \n \n Flow (#): -–-\n Flow Multiplier(s)\n EXTRUDERS\n \n \n Babystep X\n  \n BABYSTEPPING &amp;&amp; BABYSTEP_XY\n \n \n Babystep Y\n  \n BABYSTEPPING &amp;&amp; BABYSTEP_XY\n \n \n Babystep Z\n  \n BABYSTEPPING &amp;&amp; !BABYSTEP_ZPROBE_OFFSET\n \n \n Z Probe Offset\n M851 Z\n BABYSTEP_ZPROBE_OFFSET\n \n \n Change Filament »\n M600\n FILAMENT_CHANGE_FEATURE and not too cold\n \n \n\n\nPrepare\nThe Prepare menu is only available when the machine is not printing.\n\n\n \n \n Item\n Description\n Requirements\n \n \n \n \n « Main\n  \n  \n \n \n Move Axis »\n  \n DELTA requires G28 first\n \n \n Auto Home\n G28\n  \n \n \n Auto Home X\n G28 X\n INDIVIDUAL_AXIS_HOMING_MENU\n \n \n Auto Home Y\n G28 Y\n INDIVIDUAL_AXIS_HOMING_MENU\n \n \n Auto Home Z\n G28 Z\n INDIVIDUAL_AXIS_HOMING_MENU\n \n \n Bed Leveling »\n G29 guided manual probing\n LCD_BED_LEVELING\n \n \n Unified Bed Leveling »\n G29\n UNIFIED_BED_LEVELING\n \n \n Set Home Offsets\n M428\n !DELTA &amp;&amp; !NO_WORKSPACE_OFFSETS\n \n \n Disable Steppers\n M18\n  \n \n \n Change Filament\n M600\n FILAMENT_CHANGE_FEATURE and not too cold\n \n \n Cooldown\n  \n TEMP_SENSOR_0 (shown if currently heating)\n \n \n Preheat PLA »\n  \n TEMP_SENSOR_0\n \n \n Preheat ABS »\n  \n TEMP_SENSOR_0\n \n \n BLTouch Self-Test\n  \n BLTOUCH\n \n \n BLTouch Reset\n  \n BLTOUCH (if triggered while disabled)\n \n \n Power ON/OFF\n  \n HAS_POWER_SWITCH\n \n \n Autostart\n  \n SDSUPPORT &amp;&amp; MENU_ADDAUTOSTART\n \n \n\n\nMove Axis\n\nThe move axis sub-menu was reorganized for Marlin 1.1. To use the move commands, first select the axis to move, then select the move distance. Use the controller wheel (or arrow buttons) to adjust the axis position. For larger move sizes, Marlin waits until you stop moving the controller for 1/2 second before it starts the move, giving you an opportunity to catch overshoot.\n\n\n \n \n Item\n Description\n Requirements\n \n \n \n \n « Prepare\n  \n  \n \n \n Free XY\n Move Z down to safe-zone\n DELTA (above safe zone)\n \n \n Move X »\n Select X move size, do moves\n (may require G28, safe zone, etc.)\n \n \n Move Y »\n Select Y move size, do moves\n (may require G28, safe zone, etc.)\n \n \n Move Z »\n Select Z move size, do moves\n (DELTA and SCARA require G28)\n \n \n Auto Home\n G28\n (shown if not homed)\n \n \n Select E1/E2\n Sends “T0” / “T1”\n SWITCHING_EXTRUDER\n \n \n Move E »\n Select Active E move size, do moves.\n  \n \n \n Move E1 »\n Select E1 move size, do moves\n EXTRUDERS &gt;= 2 (if not too cold)\n \n \n Move E2 »\n Select E2 move size, do moves\n EXTRUDERS &gt;= 2 (if not too cold)\n \n \n Move E3 »\n Select E3 move size, do moves\n EXTRUDERS &gt;= 3 (if not too cold)\n \n \n Move E4 »\n Select E4 move size, do moves\n EXTRUDERS &gt;= 4 (if not too cold)\n \n \n Move E5 »\n Select E5 move size, do moves\n EXTRUDERS == 5 (if not too cold)\n \n \n\n\nBed Leveling\n\nThe Bed Leveling menu groups together commands for calibrating the nozzle-to-bed distance. Different options will appear depending on your setup and the type of leveling you’ve enabled. Level Bed runs the default G29 procedure. For auto bed leveling this will deploy the probe, measure all points, and stop. For manual leveling (PROBE_MANUALLY or MESH_BED_LEVELING) you’ll be taken through a step-by-step process.\n\n\n \n \n Item\n Description\n Requirements\n \n \n \n \n « Prepare\n  \n  \n \n \n Free XY\n Move Z down to safe-zone\n DELTA (above safe zone)\n \n \n Auto Home\n G28\n Unknown position\n \n \n Leveling On/Off\n M420 S\n Valid mesh, known position\n \n \n Level Bed\n G29/G29 S1\n Known position\n \n \n Fade Height: -–-\n M420 Z\n ENABLE_LEVELING_FADE_HEIGHT\n \n \n Mesh Z Offset: -–-\n G29 Z\n MESH_BED_LEVELING\n \n \n Z Probe Offset: -–-\n M851 Z\n HAS_BED_PROBE (BABYSTEP_ZPROBE_OFFSET for active Z adjust)\n \n \n Load Settings\n M501\n EEPROM_SETTINGS\n \n \n Save Settings\n M500\n EEPROM_SETTINGS\n \n \n\n\nUnified Bed Leveling\n\nThe Unified Bed Leveling menu groups together commands for leveling and mesh editing. Since this menu is very large and complex, it will be described in a separate document - coming soon.\n\nPreheat PLA\n\nSet the fan speed plus bed and/or nozzle temperature to the preset “PLA” settings. Use M145 S0 ... to change the temperatures and fan speed used for this menu.\n\n\n \n \n Item\n Description\n Requirements\n \n \n \n \n « Main\n  \n  \n \n \n Preheat PLA\n Active Extruder, fan, bed\n HOTENDS == 1\n \n \n Preheat PLA End\n Active Extruder only\n HOTENDS == 1\n \n \n Preheat PLA 1\n Preheat E1 (and bed)\n HOTENDS &gt;= 2\n \n \n Preheat PLA End E1\n Preheat E1 only\n HOTENDS &gt;= 2 &amp;&amp; TEMP_SENSOR_BED\n \n \n Preheat PLA 2\n Preheat E2 (and bed)\n HOTENDS &gt;= 2\n \n \n Preheat PLA End E2\n Preheat E2 only\n HOTENDS &gt;= 2 &amp;&amp; TEMP_SENSOR_BED\n \n \n Preheat PLA 3\n Preheat E3 (and bed)\n HOTENDS &gt;= 3\n \n \n Preheat PLA End E3\n Preheat E3 only\n HOTENDS &gt;= 3 &amp;&amp; TEMP_SENSOR_BED\n \n \n Preheat PLA 4\n Preheat E4 (and bed)\n HOTENDS &gt;= 4\n \n \n Preheat PLA End E4\n Preheat E4 only\n HOTENDS &gt;= 4 &amp;&amp; TEMP_SENSOR_BED\n \n \n Preheat PLA 5\n Preheat E5 (and bed)\n HOTENDS == 5\n \n \n Preheat PLA End E5\n Preheat E5 only\n HOTENDS == 5 &amp;&amp; TEMP_SENSOR_BED\n \n \n\n\nPreheat ABS\n\nSet the fan speed plus bed and/or nozzle temperature to the preset “ABS” settings. Use M145 S1 ... to change the temperatures and fan speed used for this menu.\n\n\n \n \n Item\n Description\n Requirements\n \n \n \n \n « Main\n  \n  \n \n \n Preheat ABS\n Active Extruder, fan, bed\n HOTENDS == 1\n \n \n Preheat ABS End\n Active Extruder only\n HOTENDS == 1\n \n \n Preheat ABS 1\n Preheat E1 (and bed)\n HOTENDS &gt;= 2\n \n \n Preheat ABS End E1\n Preheat E1 only\n HOTENDS &gt;= 2 &amp;&amp; TEMP_SENSOR_BED\n \n \n Preheat ABS 2\n Preheat E2 (and bed)\n HOTENDS &gt;= 2\n \n \n Preheat ABS End E2\n Preheat E2 only\n HOTENDS &gt;= 2 &amp;&amp; TEMP_SENSOR_BED\n \n \n Preheat ABS 3\n Preheat E3 (and bed)\n HOTENDS &gt;= 3\n \n \n Preheat ABS End E3\n Preheat E3 only\n HOTENDS &gt;= 3 &amp;&amp; TEMP_SENSOR_BED\n \n \n Preheat ABS 4\n Preheat E4 (and bed)\n HOTENDS &gt;= 4\n \n \n Preheat ABS End E4\n Preheat E4 only\n HOTENDS &gt;= 4 &amp;&amp; TEMP_SENSOR_BED\n \n \n Preheat ABS 5\n Preheat E5 (and bed)\n HOTENDS == 5\n \n \n Preheat ABS End E5\n Preheat E5 only\n HOTENDS == 5 &amp;&amp; TEMP_SENSOR_BED\n \n \n\n\nControl\n\nThe Control sub-menu includes the Temperature, Motion, and Filament sub-menus and Settings/EEPROM commands, plus a few other miscellanous hardware control commands.\n\n\n \n \n Item\n Description\n Requirements\n \n \n \n \n « Main\n  \n  \n \n \n Temperature »\n  \n  \n \n \n Motion »\n  \n  \n \n \n Filament »\n  \n  \n \n \n LCD Contrast »\n  \n HAS_LCD_CONTRAST\n \n \n Retract »\n  \n FWRETRACT\n \n \n Drive Strength »\n  \n DAC_STEPPER_CURRENT\n \n \n BLTouch »\n  \n BLTOUCH\n \n \n Store settings\n  \n EEPROM_SETTINGS\n \n \n Load settings\n  \n EEPROM_SETTINGS\n \n \n Restore failsafe\n M502 Settings to defaults\n  \n \n \n Init EEPROM\n M502+M500 Default settings and store to EEPROM\n  \n \n \n\n\nTemperature\n\nUse this sub-menu to set the target temperature for nozzles and the bed, fan speed, AUTOTEMP, PID factors, and material preheat settings.\n\n\n \n \n Item\n Description\n Requirements\n \n \n \n \n « Control\n  \n  \n \n \n  \n  \n  \n \n \n Nozzle: -–-\n Current E Target Temperature\n HOTENDS == 1\n \n \n Nozzle 1: -–-\n E_n_ Target Temperature…\n HOTENDS &gt;= 2\n \n \n Nozzle 2: -–-\n  \n HOTENDS &gt;= 2\n \n \n Nozzle 3: -–-\n  \n HOTENDS &gt;= 3\n \n \n Nozzle 4: -–-\n  \n HOTENDS &gt;= 4\n \n \n Nozzle 5: -–-\n  \n HOTENDS == 5\n \n \n Bed: -–-\n Bed Target Temperature\n HAS_THERMALLY_PROTECTED_BED &amp;&amp; WATCH_BED_TEMP_PERIOD &gt; 0\n \n \n  \n  \n  \n \n \n Fan Speed: -–-\n  \n FAN_COUNT == 1\n \n \n Fan Speed 1: -–-\n  \n FAN_COUNT &gt;= 2\n \n \n Fan Speed 2: -–-\n  \n HAS_FAN1\n \n \n Fan Speed 3: -–-\n  \n HAS_FAN2\n \n \n  \n  \n  \n \n \n Autotemp ON/OFF\n  \n AUTOTEMP &amp;&amp; TEMP_SENSOR_0\n \n \n Min: -–-\n  \n AUTOTEMP &amp;&amp; TEMP_SENSOR_0\n \n \n Max: -–-\n  \n AUTOTEMP &amp;&amp; TEMP_SENSOR_0\n \n \n Factor: -–-\n  \n AUTOTEMP &amp;&amp; TEMP_SENSOR_0\n \n \n  \n  \n  \n \n \n Pid P E1: -–-\n  \n PIDTEMP &amp;&amp; PID_PARAMS_PER_HOTEND &amp;&amp; HOTENDS &gt;= 1\n \n \n Pid I E1: -–-\n  \n PIDTEMP &amp;&amp; PID_PARAMS_PER_HOTEND &amp;&amp; HOTENDS &gt;= 1\n \n \n Pid D E1: -–-\n  \n PIDTEMP &amp;&amp; PID_PARAMS_PER_HOTEND &amp;&amp; HOTENDS &gt;= 1\n \n \n Pid C E1: -–-\n  \n PIDTEMP &amp;&amp; PID_PARAMS_PER_HOTEND &amp;&amp; HOTENDS &gt;= 1 &amp;&amp; PID_EXTRUSION_SCALING\n \n \n  \n  \n  \n \n \n Pid P E2: -–-\n  \n PIDTEMP &amp;&amp; PID_PARAMS_PER_HOTEND &amp;&amp; HOTENDS &gt;= 2\n \n \n Pid I E2: -–-\n  \n PIDTEMP &amp;&amp; PID_PARAMS_PER_HOTEND &amp;&amp; HOTENDS &gt;= 2\n \n \n Pid D E2: -–-\n  \n PIDTEMP &amp;&amp; PID_PARAMS_PER_HOTEND &amp;&amp; HOTENDS &gt;= 2\n \n \n Pid C E2: -–-\n  \n PIDTEMP &amp;&amp; PID_PARAMS_PER_HOTEND &amp;&amp; HOTENDS &gt;= 2 &amp;&amp; PID_EXTRUSION_SCALING\n \n \n  \n  \n  \n \n \n Pid P E3: -–-\n  \n PIDTEMP &amp;&amp; PID_PARAMS_PER_HOTEND &amp;&amp; HOTENDS &gt;= 3\n \n \n Pid I E3: -–-\n  \n PIDTEMP &amp;&amp; PID_PARAMS_PER_HOTEND &amp;&amp; HOTENDS &gt;= 3\n \n \n Pid D E3: -–-\n  \n PIDTEMP &amp;&amp; PID_PARAMS_PER_HOTEND &amp;&amp; HOTENDS &gt;= 3\n \n \n Pid C E3: -–-\n  \n PIDTEMP &amp;&amp; PID_PARAMS_PER_HOTEND &amp;&amp; HOTENDS &gt;= 3 &amp;&amp; PID_EXTRUSION_SCALING\n \n \n  \n  \n  \n \n \n Pid P E4: -–-\n  \n PIDTEMP &amp;&amp; PID_PARAMS_PER_HOTEND &amp;&amp; HOTENDS &gt;= 4\n \n \n Pid I E4: -–-\n  \n PIDTEMP &amp;&amp; PID_PARAMS_PER_HOTEND &amp;&amp; HOTENDS &gt;= 4\n \n \n Pid D E4: -–-\n  \n PIDTEMP &amp;&amp; PID_PARAMS_PER_HOTEND &amp;&amp; HOTENDS &gt;= 4\n \n \n Pid C E4: -–-\n  \n PIDTEMP &amp;&amp; PID_PARAMS_PER_HOTEND &amp;&amp; HOTENDS &gt;= 4 &amp;&amp; PID_EXTRUSION_SCALING\n \n \n  \n  \n  \n \n \n Pid P E5: -–-\n  \n PIDTEMP &amp;&amp; PID_PARAMS_PER_HOTEND &amp;&amp; HOTENDS &gt;= 5\n \n \n Pid I E5: -–-\n  \n PIDTEMP &amp;&amp; PID_PARAMS_PER_HOTEND &amp;&amp; HOTENDS &gt;= 5\n \n \n Pid D E5: -–-\n  \n PIDTEMP &amp;&amp; PID_PARAMS_PER_HOTEND &amp;&amp; HOTENDS &gt;= 5\n \n \n Pid C E5: -–-\n  \n PIDTEMP &amp;&amp; PID_PARAMS_PER_HOTEND &amp;&amp; HOTENDS &gt;= 5 &amp;&amp; PID_EXTRUSION_SCALING\n \n \n  \n  \n  \n \n \n Preheat PLA conf »\n  \n  \n \n \n Preheat ABS conf »\n  \n  \n \n \n\n\nPreheat PLA conf\n\nThe temperatures and fan speed set here will be used for the “Preheat PLA” menu item.\n\n\n \n \n Item\n Description\n Requirements\n \n \n \n \n « Control\n  \n  \n \n \n Fan Speed: -–-\n  \n HAS_FAN\n \n \n Nozzle: -–-\n  \n  \n \n \n Bed: -–-\n  \n TEMP_SENSOR_BED\n \n \n Store settings\n M500\n  \n \n \n\n\nPreheat ABS conf\n\nThe temperatures and fan speed set here will be used for the “Preheat ABS” menu item.\n\n\n \n \n Item\n Description\n Requirements\n \n \n \n \n « Control\n  \n  \n \n \n Fan Speed: -–-\n  \n HAS_FAN\n \n \n Nozzle: -–-\n  \n  \n \n \n Bed: -–-\n  \n TEMP_SENSOR_BED\n \n \n Store settings\n M500\n  \n \n \n\n\nMotion\n\nThe motion settings provide control over tunable movement parameters which can be stored to EEPROM.\n\n\n \n \n Item\n Description\n Requirements\n \n \n \n \n « Control\n  \n  \n \n \n Z Offset\n M851 Z\n HAS_BED_PROBE (with BABYSTEP_ZPROBE_OFFSET it babysteps)\n \n \n Bed Z: -–-\n MBL Z Offset\n MESH_BED_LEVELING &amp;&amp; LCD_BED_LEVELING\n \n \n Feedrate »\n Feedrate settings\n  \n \n \n Acceleration »\n Acceleration settings\n  \n \n \n Jerk »\n Jerk settings\n  \n \n \n Steps/mm »\n Steps/mm for XYZ axes and extruders\n  \n \n \n Endstop abort ON/OFF\n  \n SD_ABORT_ON_ENDSTOP_HIT\n \n \n\n\nFeedrate\n\n\n \n \n Item\n Description\n Requirements\n \n \n \n \n « Motion\n  \n  \n \n \n Vmax X: -–-\n Max X Velocity (mm/s)\n  \n \n \n Vmax Y: -–-\n Max Y Velocity (mm/s)\n  \n \n \n Vmax Z: -–-\n Max Z Velocity (mm/s)\n  \n \n \n Vmax E: -–-\n Max E Velocity (mm/s)\n  \n \n \n Vmax E1: -–-\n Max E1 Velocity (mm/s)\n DISTINCT_E_FACTORS\n \n \n Vmax E2: -–-\n Max E2 Velocity (mm/s)\n DISTINCT_E_FACTORS\n \n \n Vmax E3: -–-\n Max E3 Velocity (mm/s)\n DISTINCT_E_FACTORS &amp;&amp; E_STEPPERS &gt;= 3\n \n \n Vmax E4: -–-\n Max E4 Velocity (mm/s)\n DISTINCT_E_FACTORS &amp;&amp; E_STEPPERS &gt;= 4\n \n \n Vmax E5: -–-\n Max E5 Velocity (mm/s)\n DISTINCT_E_FACTORS &amp;&amp; E_STEPPERS == 5\n \n \n Vmin: -–-\n Min Feedrate (mm/s)\n  \n \n \n VTrav min: -–-\n Min Travel Velocity (mm/s)\n  \n \n \n\n\nAcceleration\n\n\n \n \n Item\n Description\n Requirements\n \n \n \n \n « Motion\n  \n  \n \n \n Accel: -–-\n Nominal Acceleration\n  \n \n \n Amax X: -–-\n Max X Acceleration (mm/s2)\n  \n \n \n Amax Y: -–-\n Max Y Acceleration (mm/s2)\n  \n \n \n Amax Z: -–-\n Max Z Acceleration (mm/s2)\n  \n \n \n Amax E: -–-\n Max E Acceleration (mm/s2)\n  \n \n \n Amax E1: -–-\n Max E1 Acceleration (mm/s2)\n DISTINCT_E_FACTORS\n \n \n Amax E2: -–-\n Max E2 Acceleration (mm/s2)\n DISTINCT_E_FACTORS\n \n \n Amax E3: -–-\n Max E3 Acceleration (mm/s2)\n DISTINCT_E_FACTORS &amp;&amp; E_STEPPERS &gt;= 3\n \n \n Amax E4: -–-\n Max E4 Acceleration (mm/s2)\n DISTINCT_E_FACTORS &amp;&amp; E_STEPPERS &gt;= 4\n \n \n Amax E5: -–-\n Max E5 Acceleration (mm/s2)\n DISTINCT_E_FACTORS &amp;&amp; E_STEPPERS == 5\n \n \n A-retract: -–-\n Retract Acceleration (mm/s2)\n  \n \n \n A-travel: -–-\n Travel Acceleration (mm/s2)\n  \n \n \n\n\nJerk\n\n\n \n \n Item\n Description\n Requirements\n \n \n \n \n « Motion\n  \n  \n \n \n Vx-Jerk: -–-\n Max X Jerk\n  \n \n \n Vy-Jerk: -–-\n Max Y Jerk\n  \n \n \n Vz-Jerk: -–-\n Max Z Jerk\n  \n \n \n Ve-Jerk: -–-\n Max E Jerk\n  \n \n \n\n\nSteps/mm\n\n\n \n \n Item\n Description\n Requirements\n \n \n \n \n « Motion\n  \n  \n \n \n Xsteps/mm: -–-\n X steps-per-mm\n  \n \n \n Ysteps/mm: -–-\n Y steps-per-mm\n  \n \n \n Zsteps/mm: -–-\n Z steps-per-mm\n  \n \n \n Esteps/mm: -–-\n E steps-per-mm\n  \n \n \n E1steps/mm: -–-\n E1 steps-per-mm\n DISTINCT_E_FACTORS\n \n \n E2steps/mm: -–-\n E2 steps-per-mm\n DISTINCT_E_FACTORS\n \n \n E3steps/mm: -–-\n E3 steps-per-mm\n DISTINCT_E_FACTORS &amp;&amp; E_STEPPERS &gt;= 3\n \n \n E4steps/mm: -–-\n E4 steps-per-mm\n DISTINCT_E_FACTORS &amp;&amp; E_STEPPERS &gt;= 4\n \n \n E5steps/mm: -–-\n E5 steps-per-mm\n DISTINCT_E_FACTORS &amp;&amp; E_STEPPERS == 5\n \n \n\n\nFilament\n\nVolumetric extrusion, Linear Advance K factor, and filament diameter per-extruder.\n\n\n \n \n Item\n Description\n Requirements\n \n \n \n \n « Control\n  \n  \n \n \n E in mm3 ON/OFF\n Volumetric Units\n  \n \n \n Advance K: -–-\n  \n LIN_ADVANCE\n \n \n Fil. Dia.: -–-\n  \n EXTRUDERS == 1 and volumetirc enabled\n \n \n Fil. Dia. E1: -–-\n  \n EXTRUDERS &gt;= 2 and volumetirc enabled\n \n \n Fil. Dia. E2: -–-\n  \n EXTRUDERS &gt;= 2 and volumetirc enabled\n \n \n Fil. Dia. E3: -–-\n  \n EXTRUDERS &gt;= 3 and volumetirc enabled\n \n \n Fil. Dia. E4: -–-\n  \n EXTRUDERS &gt;= 4 and volumetirc enabled\n \n \n Fil. Dia. E5: -–-\n  \n EXTRUDERS == 5 and volumetirc enabled\n \n \n\n\nBLTouch\n\nWhen the ANTCLABS BLTouch probe acts up you can use the items in this sub-menu to reset and test the probe.\n\n\n \n \n Item\n Description\n Requirements\n \n \n \n \n « Control\n  \n  \n \n \n Reset BLTouch\n Revive after an error\n  \n \n \n BLTouch Self-Test\n Run the built-in self-test\n  \n \n \n Deploy BLTouch\n  \n  \n \n \n Stow BLTouch\n  \n  \n \n \n\n\n\n\nUBL Submenus\n\nUnified Bed Leveling aims to be a comprehensive all-in-one system to calibrate the bed based on every available datapoint.\n\n\n", "link": "/docs/features/lcd_menu.html", "excerpt": "A synopsis of the LCD menu tree", "class": "feature" } ,{ "title": "Linear Advance", "content": "\n\nUnder default conditions, extruder axis movement is treated in the same way as the XYZ linear axes. The extruder motor moves in linear proportion to all the other motors, maintaining exactly the same acceleration profile and start/stop points. But an extruder is not a linear system, so this approach leads, most obviously, to extra material being extruded at the end of each linear movement.\n\nTake the common test-cube as an example. Even with the best tuning the corners are usually not sharp, but bleed out. The top solid infill displays roughness where the print direction changes on perimeters. These problems are minor or even imperceptible at low printing speeds, but they become more noticeable and problematic as print speeds increase.\n\nTuning the flow can help, but this may lead to under-extrusion when starting new lines. Some slicers include an option to end extrusion early in each move, but this adds more complexity to the G-code and has to be retuned for different temperatures and materials.\n\nSince the root cause is pressure, LIN_ADVANCE de-couples extrusion from the other axes to produce the correct pressure inside the nozzle, adapting to the printing speed. Once Linear Advance is properly tuned, bleeding edges and rough solid infill should be nearly eliminated.\n\nAdvantages\n\n\n Better dimensional precision due to reduced bleeding edges.\n Higher printing speeds are possible without any loss of print quality - as long as your extruder can handle the needed speed changes.\n Visible and tangible print quality is increased even at lower printing speeds.\n No need for high acceleration and jerk values to get sharp edges.\n\n\n\n\nSpecial notes for v1.5\n\nChangelog\n\n\n K is now a meaningful value with the unit [mm of filament compression needed per 1mm/s extrusion speed] or [mm/mm/s].\n Load inside stepper ISR reduced as no calculations are needed there any more. Instead, the extruder runs at a fixed speed offset during pressure adjustment. Therefore this version runs faster.\n LIN_ADVANCE now respects hardware limitations set in Configuration.h, namely extruder jerk. If the pressure corrections require faster adjustments than allowed by extruder jerk limit, the acceleration for this print move is limited to a value which allows to use extruder jerk speed as the upper limit.\n The pressure adjustment moves don’t lead to a rattling extruder as it was in v1.0: as the extruder is now running at a smooth speed instead of jerking between multiples of extruder print speed.\n This smooth extruder operation and respecting of jerk limits ensures no extruder steps are skipped.\n\n\nNew K value required\n\nAs the unit of K has changed, you have to redo the K calibration procedure. See next chapter for details. While old v1 K values for PLA might be between 30-130, you can now expect K to be around 0.1-2.0.\n\nLIN_ADVANCE can reduce your print acceleration\n\nIn v1, if K was set to a high value which couldn’t be handled by your printer, then the printer was losing steps and/or using all of it’s processing power to execute extruder steps. In v1.5, this is handled much smarter. LIN_ADVANCE will now check if it can execute the advance steps as needed. If the needed extruder speed exceeds the extruder jerk limit, it will reduce the print acceleration for the line printed to a value which keeps the extruder speed within the limit.\n\nWhile you will most likely not run into this on direct drive printers with filaments like PLA, it will happen most likely on bowden printers as they need higher K values and therefore faster speed adaptions. If this happens to an amount you don’t want to accept, you have the following options:\n\n Check your extruder jerk setting. If you have the feeling it is set to a very conservative value, try increasing it.\n Keep the extruder acceleration low. This can be achieved by lowering the layer height or line width for example\n Keep K as low as possible. Maybe you can shorten the bowden tube?\n\n\nA note on bowden printers vs. LIN_ADVANCE\n\nA quite common note during development of LIN_ADVANCE was that bowden systems (and especially delta printers) are meant to be faster due to the lower moving mass. So lowering the print acceleration as described above would be an inadequate solution. On the other hand, bowden systems need a pressure advance feature the most as they usually have the most problems with speed changes.\n\nWell, LIN_ADVANCE was developed because I (Sebastianv650) wasn’t satisfied by the print quality I got out of my direct drive printer. While it’s a possible point of view to say that lowering acceleration on a bowden printer (which is meant to be fast) is a bad thing, I see it differently: if you would be satisfied with the print quality your bowden setup gives you, you wouldn’t be reading about a way to do pressure corrections, isn’t it? So maybe in this case the highest possible top speed is quite useless.. Bowdens are an option to keep moving mass low and therefore allowing higher movement speeds, but don’t expect them to give the same precise filament laydown ability than a direct drive one.\nIt’s like painting a picture: try to paint with a 1m long brush, grabing the rear end of the handle which is made from rubber. Even if you try to compensate for the wobbly brush tip (which is basically what LIN_ADVANCE does), it will never be as good as using a usual brush.\nOn the other hand, if you only need to have a part printed fast without special needs in terms of quality, there is no reason to enable LIN_ADVANCE at all. For those prints, you can just set K to 0.\n\nCalibration\nGenerate Test Pattern\nMarlin documentation provides a K-Factor Calibration Pattern generator. This script will generate a G-code file that supports determining a proper K-Factor value.\nThe generated G-code will print a test pattern as shown in the following illustration:\n\n\n\nBeginning with the chosen Start value for K, individual lines will be printed from left to right. Each line consists of 20 mm extrusion using Slow Printing Speed being followed by 40 mm of Fast Printing Speed and finally being concluded by another 20 mm of Slow Printing Speed.\n\nFor each new line the K-Factor will be increased by the K-Factor Stepping value, up to the provided End Value for K.\n\n\n\nGeneral considerations for the Test Pattern Settings\n\n\n Bowden extruders need a higher K-Factor than direct extruders. Consider a Start value for K of around 0.1 up to an End Value for K of around 2.0 for LIN_ADVANCE v1.5 or around 30 up to an End Value for K of around 130 for v1.0.\n The best matching K-Factor to be used in production depends on.\n \n Type of filament. Extremely flexible filaments like Ninjaflex may not work at all.\n Printing temperature.\n Extruder characteristics: Bowden vs. direct extruder , bowden length, free filament length in the extruder, etc.\n Nozzle size and geometry.\n \n \n The extruder’s steps/mm value has to be calibrated precisely. Calibration is recommended at low speeds to avoid additional influences.\n Minimize Backlash caused by gears geared extruder or by push fittings. As it will not influence the K-Factor, it can lead to strange noises from the extruder due to the pressure control.\n\n\n\n Repeat the calibration, if any of the above parameters change.\n\n\n\n\nEvaluating the Calibration Pattern\n\nThe transition between Slow Printing Speed phases and Fast Printing Speed phases are the points of interest to determine the best matching K-Factor. Following illustration shows a magnified view of a line where the K-Factor is too low:\n\n\n\n\n \n \n Phase\n Description\n \n \n \n \n 1\n Slow Printing Speed\n \n \n 2\n Beginning of the Fast Printing Speed. The pressure build up in the nozzle (= amount of extruded material) is lagging behind the acceleration of the print-head. This results in too little material and a starved line. Towards the end of this phase, the pressure is catching up to its intended value.\n \n \n 3\n Extrusion and print-head movement are in sync. The nominal line width is extruded\n \n \n 4\n Beginning of the deceleration towards Slow Printing Speed. Here the opposite of Phase 2 can be observed: The pressure decrease in the nozzle is lagging behind the deceleration of the print-head. This results in too much material being extruded\n \n \n 5\n Beginning of the Slow Printing Speed phase. Still the pressure in the nozzle is not in sync with the intended extrusion amount and the line is suffering from over-extrusion.\n \n \n 6\n Slow Printing Speed has stabilized.\n \n \n\n\nA too high K-Factor essentially reverses the above picture. The extruded amount will overshoot at the start of an acceleration and starve in the deceleration phase.\n\n\n The test line, which has a fluid and barely visible or even invisible \ntransition between the different speed phases represents the best \nmatching K-Factor.\n\n\n\n\nSetting the K-Factor for production\n\nConsiderations before using Linear Advance\n\n\n Some slicers have options to control the nozzle pressure. Common names are: Pressure advance, Coast at end, extra restart length after retract. Disable these options as they will interfere with Linear Advance.\n Also disable options like wipe while retract or combing. There should be almost no ooze, once the proper K-Factor is found.\n Recheck retraction distance, once Linear Advance is calibrated and working well. It may even be as low as 0, since pressure control reduces the material pressure at the end of a line to nearly zero.\n\n\nThe following considerations are no longer a problem with LIN_ADVANCE version 1.5\n\n This feature adds extra load to the CPU (and possibly more wear on the extruder). Using a communication speed of 115200 baud or lower to prevent communication errors and “weird” movements is recommended.\n The print host software should be using line numbers and checksums. (This is disabled by default e.g. in Simplify3D)\n Theoretically there should be no “extra” movements produced by LIN_ADVANCE. If extra movements were produced, this would tend to increase wear on more fragile parts such as the printed gears of a Wade extruder.\n\n\nSaving the K-Factor in the Firmware\nIf only one filament material is used, the best way is to set the K-Factor inside Configuration_adv.h and reflash the firmware:\n\n/**\n* Implementation of linear pressure control\n*\n* Assumption: advance = k * (delta velocity)\n* K=0 means advance disabled.\n* See Marlin documentation for calibration instructions.\n*/\n#define LIN_ADVANCE\n\n#if ENABLED(LIN_ADVANCE)\n#define LIN_ADVANCE_K &lt;your_value_here&gt;\n\n\n\nAdding the K-Factor to the G-code Start Script\nG-code Start Scripts are supported by various slicers. The big advantage of setting the K-Factor via this methods is that it can easily be modified, e.g. when switching to a different material.\nThe K-Factor is defined by adding the command M900 Kxx to the end of the start script, where xx is the value determined with the above test pattern.\n\nThe following chapter briefly describes where to find the relevant setting in popular slicers.\n\nNote 1:\n\nWith the G-code Start Script method, the feature still needs to be activated in the firmware as described in Saving the K-Factor in the Firmware. It is recommended to set #define LIN_ADVANCE_K to 0, which effectively disables the hard-coded firmware value. In this case only the K-Factor set via the start script is used.\n\nNote 2:\n\nThe shown G-code Start Scripts are individual to each printer and personal taste. This is only intended to demonstrate where the K-Factor setting can be applied.\n\n\nCura\nSettings —&gt; Printer —&gt; Manage Printer —&gt; Machine Settings\n\n\n\nSlic3r\nSettings —&gt; Printer Settings —&gt; Custom G-code\n\n\n\nSimplify 3D\nEdit Process Settings —&gt; Show Advanced –&gt; Scripts —&gt; Custom G-code\n\n\n\nDeveloper Information\n\nGeneral Informations\n\nThe force required to push the filament through the nozzle aperture depends, in part, on the speed at which the material is being pushed into the nozzle. If the material is pushed faster (=printing fast), the filament needs to be compressed more before the pressure inside the nozzle is high enough to start extruding the material.\n\nFor a single, fast printed line, this results in under-extrusion at the line’s starting point (the filament gets compressed, but the pressure isn’t high enough) and over-extrusion with a blob at the end of the line (the filament is still compressed when the E motor stops, resulting in oozing).\n\nFor a complete print, this leads to bleeding edges at corners (corners are stop/end points of lines) and in extreme cases even gaps between perimeters due to under-extrusion at their starting points.\n\nVersion 1.5\nVersion 1.5 handles the pressure correction in a slightly different way to reach the following goals:\n\n respect extruder jerk\n ensure a smooth extruder movement without rattling\n reduce load inside stepper ISR\n\n\nIt does this by calculating an extruder speed offset within the planner for the given segment. If we have a true, linear acceleration then this will execute the needed advance steps just in time, so we have reached all our needed advance steps just when the acceleration part is over. As Marlin uses an approximation for the acceleration calculation inside the ISR, this is not perfectly true, we will come to this later.\nIf the needed speed offset exceeds the allowed extruder jerk, the print acceleration for this segment is reduced to a lower value so extruder jerk is not exceeded any more. This is comparable to the check Marlin does for each axis, for example if we have a print acceleration of 2000mm/s² but X axis max. acceleration is set to 500mm/s², print acceleration is reduced to 500mm/s². During the trapezoid calculation, LIN_ADVANCE calculates the needed amount of advance steps at cruising speed and at final speed (=speed at and of the block).\n\nWhen this block is executed by the stepper ISR, the extruder is set to a frequency which represents the calculated speed offset. The advance step is executed together with normal e steps. During the block runtime, the pressure will be advanced until the precalculated needed extra step amount is reached or the deceleration is started. During deceleration we reduce the advance step amount until we reach the amount for final speed or the block comes to an end.\nThis checks are necessary as Marlin uses an approximation for acceleration calculation as mentioned above. Therefore, for example, we might not reach the final pressure at end of move perfectly but that’s not important as this error will not cumulate.\n\nThe next update might include improved handling of variable width moves. On variable width path it’s possible that we need to deplete pressure during acceleration, for example when the next line is much narrower than the previous one. Therefore LIN_ADVANCE would need to check for the actual extruder direction needed.\nAnother case to be considered is the gap fill to the tip of a triangle: in this case Marlin will move on with a constant speed, but the extruder speed and therefore needed pressure gets smaller and smaller when we approach the tip of the triangle. We should adapt nozzle pressure with max. possible speed (extruder jerk speed) then.\nAs gap fill is done at quite low speeds by most slicers, we have to decide if that extra load is worth the effect. On 32bit boards where calculation performance is most likely not a problem, it makes sense in any case.\n\nVersion 1.0\nThe LIN_ADVANCE pressure control handles this free filament length as a spring, where K is a spring constant. When the nozzle starts to print a line, it takes the extrusion speed as a reference. Additional to the needed extrusion length for a line segment, which is defined by the slicer, it calculates the needed extra compression of the filament to reach the needed nozzle pressure so that the extrusion length defined by the slicer is really extruded. This is done in every loop of the stepper ISR.\n\nDuring deceleration, the filament compression is released again by the same formula: advance_steps = delta_extrusion_speed * K. During deceleration, delta_extrusion_speed is negative, thus the advance_steps values is negative which leads to a retract (or slowed) movement, relaxing the filament again.\n\nThe basic formula (advance_steps = delta_extrusion_speed * K) is the same as in the famous JKN pressure control, but with one important difference: JKN calculates the sum of all required advance extruder steps inside the planner loop and distributes them equally over every acceleration and deceleration stepper ISR loop. This leads to the wrong distribution of advance steps, resulting in an imperfect print result. LIN_ADVANCE calculates the extra steps on the fly in every stepper ISR loop, therefore applying the required steps precisely where needed.\n\nFor further details and graphs have a look into this presentation, slides 7-9.\n\nIn Marlin, all the work is done in the stepper.* and planner.* files. In the planner loop, LIN_ADVANCE checks whether a move needs pressure control. This applies only to print moves, not to travel moves and extruder-only moves (like retract and prime).\n\nIn the Stepper::isr method, LIN_ADVANCE calculates the number of extra steps needed to reach the required nozzle pressure. To avoid missing steps, it doesn’t execute them all at once, but distributes them over future calls to the interrupt service routine.\n\nIn v1.0 there is no check if the extruder acceleration, speed or jerk will exceed the limits set inside Configuration.h!\n", "link": "/docs/features/lin_advance.html", "excerpt": "Nozzle pressure control to improve print quality", "class": "feature" } ,{ "title": "Unified Bed Leveling", "content": " \nThis page is a work in progress, based on Marlin 1.1.x. Corrections/improvements are welcome.\n \n\n\n A comprehensive LCD menu system for UBL is coming soon.\n See also G26 Mesh Validation and G29 for UBL.\n\n\nUBL Startup Guide\n\nThe Unified Bed Leveling (UBL) system is a superset of the previous leveling systems.\n\nThe main improvements over the previous systems are:\n\n Optimized line-splitting algorithm. For all mesh-based leveling methods, on Cartesians each linear move is split on grid line boundaries, respecting the best-known measured heights on the bed. UBL highly optimizes this boundary-splitting with pre-calculation, optimized handling of special cases, and avoiding recursion.\n It is possible to probe and store a high-resolution rectangular mesh in nonvolatile storage, load this mesh, and use either 3-point or grid based probing to ‘tilt’ the mesh and compensate for slight changes in bed orientation.\n The user is able to fill in the portions of the mesh that can’t be reached by automated probing. This allows the entire bed to be compensated.\n It allows the user to fine tune the system. The user is able to modify the mesh based on print results. Really good first layer adhesion and height can be achieved over the entire bed.\n\n\nSynopsis\n\nCurrently an LCD display with a rotary encoder is recommended. Note that the MKS TFT 2.8 and 3.2 do not actually fulfill the LCD requirements. The main documentation below assumes that a conforming LCD and a z-probe are present. See the no-lcd addendum for information on using UBL without a display, and the no-z-probe addendum to get UBL working without a z-probe installed. Note that operation without an LCD is still work-in-progress, and subject to change.\n\nUBL is a superset of previous automatic leveling systems, but it does not necessarily supersede them in all cases. Its goal is to allow the best features of the previous leveling schemes to be used together and combined, as well as providing a richer set of commands and feedback for the user. However, this functionality comes at a cost of program space. Compared to bilinear leveling, for example, the difference might be 50 kB for UBL vs. 5 kB for bilinear – and for an equally precise mesh the printed results could be quite similar. With that said, the cost in program space is likely only a concern for more resource constrained parts like the 128k ATMegas.\n\nThe printer must be already fully functional and tested, with a well-constrained movement system. The more physically level and straight the bed is, the better your results will be. See Configuration.h and Configuration_adv.h for all of UBL’s settings.\n\nYou should be able to successfully print a small object at the center of the bed with bed leveling turned off. It’s very important to verify that your Configuration.h settings make this possible before trying to bring up UBL. Most problems bringing up the UBL Bed Leveling system occur when this step has been ignored. Please pay particular attention to your Z_PROBE_OFFSET_FROM_EXTRUDER value. Usually it’s best to home the Z-Axis in the center of the bed. But wherever you decide to home, the Z value reported on the LCD (or with M114) should be very close to 0.0 mm when the nozzle is just touching the bed. Failure to calibrate Z_PROBE_OFFSET_FROM_EXTRUDER properly will result in dimensional errors in your printed parts.\n\nThe following command sequence can then be used as a quick-start guide to home, level, and then fine-tune the results. These commands are for a ‘normal’ setup; see the relevant addenda for concerns and gcode sequences related to setups without an lcd or z-probe.:\n\n;------------------------------------------\n;--- Setup and initial probing commands ---\n;------------------------------------------\nM502 ; Reset settings to configuration defaults...\nM500 ; ...and Save to EEPROM. Use this on a new install.\nM501 ; Read back in the saved EEPROM. \n\nM190 S65 ; Not required, but having the printer at temperature helps accuracy\nM104 S210 ; Not required, but having the printer at temperature helps accuracy\n\nG28 ; Home XYZ.\nG29 P1 ; Do automated probing of the bed.\nG29 P2 B T ; Manual probing of locations USUALLY NOT NEEDED!!!!\nG29 P3 T ; Repeat until all mesh points are filled in.\n\nG29 T ; View the Z compensation values.\nG29 S1 ; Save UBL mesh points to EEPROM.\nG29 F 10.0 ; Set Fade Height for correction at 10.0 mm.\nG29 A ; Activate the UBL System.\nM500 ; Save current setup. WARNING: UBL will be active at power up, before any `G28`.\n;---------------------------------------------\n;--- Fine Tuning of the mesh happens below ---\n;---------------------------------------------\nG26 C P5.0 F3.0 ; Produce mesh validation pattern with primed nozzle (5mm) and filament diameter 3mm \n ; PLA temperatures are assumed unless you specify, e.g., B 105 H 225 for ABS Plastic\nG29 P4 T ; Move nozzle to 'bad' areas and fine tune the values if needed\n ; Repeat G26 and G29 P4 T commands as needed.\n\nG29 S1 ; Save UBL mesh values to EEPROM.\nM500 ; Resave UBL's state information.\n;----------------------------------------------------\n;--- Use 3-point probe to transform a stored mesh ---\n;----------------------------------------------------\nG29 L1 ; Load the mesh stored in slot 1 (from G29 S1)\nG29 J ; No size specified on the J option tells G29 to probe the specified 3 points\n ; and tilt the mesh according to what it finds.\n\n\nScope\n\nThe UBL system contains a suite of tools with multiple options intended to cover almost any situation. This document is aimed at getting a new user acquainted with the most used tools and options needed to produce a high quality print.\n\nThe intent is to provide a new user with enough knowledge of the UBL system that they can go to the detailed documentation and start working with the other tools and options as needed.\n\nThe 3-point leveling option is only covered to the extent of using it to transform an already-measured mesh.\n\nTheory\n\nUBL projects a rectangular grid over the print bed. A Z height is measured at each point (confluence) in the grid.\n\nLinear moves are split at grid boundaries. For each segment the Z offset at start and end are calculated. The Z compensation varies linearly from the start to end of the move.\n\nNote that kinematic systems like Delta and SCARA already split moves into very small segments, removing the need to split moves at grid boundaries. In the future, moves may be split into smaller segments on Cartesian also to produce more fine-grained Z height changes through the move.\n\nThe Z compensation on any grid line is the simple linear interpolation of the Z offsets of the two corners it connects.\n\nThe Z compensation for any point within a grid box is produced by calculating the bilinear interpolation of the Z offsets of the four corner points. See the addendum Bilinear computation for details.\n\nTools are provided that can populate the Z compensation values at the mesh points via automated probing, manual probing, and manually entering a value. The intent of UBL is to allow the entire printable area of the bed to have usable Z compensation values.\n\nThe initial auto bed leveling procedure rarely produces great results across the whole bed. Fine editing tools are used to tune the mesh more finely. UBL includes a test print utility to aid in the tuning process.\n\nProcess overview\n\nTo create a mesh that produces good first-layer results over the entire bed, follow this procedure:\n\n\n Setup the UBL parameters in Configuration.h and Configuration_adv.h.\n Perform automated probing.\n Perform additional manual probing, if needed.\n Fill in un-probed points in the mesh\n Run the test print utility.\n Fine tune the matrix.\n Repeat steps 5 and 6 until satisfied.\n\n\nAn LCD controller with rotary encoder, while not required, substantially simplifies the process.\n\nThe printer (and LCD) must be fully functional before starting this process.\n\nUBL Configuration\n\nUBL configuration options are located in Configuration.h and Configuration_adv.h.\n\nEnable these options:\n\n AUTO_BED_LEVELING_UBL. Leave the others commented out.\n G26_MESH_VALIDATION to enable the G26 test print utility.\n EEPROM_SETTINGS. EEPROM support is required.\n One of the LCD options. An LCD with a rotary encoder is strongly recommended.\n\n\nZ Probe XY offsets should be set to within 1mm of the measured distance from the nozzle to the probe. Ideally the error should be less than +-2mm. Errors of 5mm have been known to cause difficulties in fine-tuning.\n\nTravel limits &amp; bed size tell the system where the nozzle can reach. This is used during automated probing to determine what points the PROBE can reach.\n\nAll printers require these settings, which specify the physical movement limits for the nozzle:\n\n// The size of the print bed\n#define X_BED_SIZE xxx\n#define Y_BED_SIZE xxx\n\n// Travel limits (mm) after homing, corresponding to endstop positions.\n#define X_MIN_POS xxx\n#define Y_MIN_POS xxx\n#define Z_MIN_POS xxx\n#define X_MAX_POS xxx\n#define Y_MAX_POS xxx\n#define Z_MAX_POS xxx\n\n\n\nMesh size and density – These define the default boundaries of the UBL mesh - the region of the bed the nozzle(s) can reach, and therefore needs to be compensated - and the mesh density. These settings can be found in Configuration.h.\n\nIdeally the mesh bounds will match your printable area perfectly. In practice it’s a good idea to pull these in a bit with MESH_INSET if the printable area goes right up to the edge of the bed. This helps keep the probe from missing the bed.\n\n3 x 3 through 15 x 15 meshes are supported. X &amp; Y dimensions do NOT need to be the same. First time users should start out with a small mesh until they are familiar with the tools. Once you’re proficient then move to larger meshes. 7 x 7 seems to be a popular size for a first attempt at a final mesh.\n\n#define UBL_MESH_INSET 10 // Mesh inset margin on print area\n#define GRID_MAX_POINTS_X 3 // Don't use more than 15 points per axis, implementation limited.\n#define GRID_MAX_POINTS_Y GRID_MAX_POINTS_X\n\n\n\nThe automated mesh boundary settings assume that the printable area is centered in the physical bed area (as specified below), and just applies an inset to all sides. If your configuration is different then you may need to modify the min/max settings, found in Configuration_adv.h, to fit your situation. Note though that (unlike bilinear leveling) the MESH_MIN and MESH_MAX positions refer to where the nozzle can reach, not the probe.:\n\n#define MESH_MIN_X UBL_MESH_INSET\n#define MESH_MAX_X (X_BED_SIZE - (UBL_MESH_INSET))\n#define MESH_MIN_Y UBL_MESH_INSET\n#define MESH_MAX_Y (Y_BED_SIZE - (UBL_MESH_INSET))\n\n\n\nFor delta printers the situation is similar. It is necessary to have grid points defined that can be filled covering the entirety of DELTA_PRINTABLE_RADIUS, but there should also be a ‘border’ of valid mesh points that lie just outside the printable radius. This ensures that every grid cell within the printable radius will have all four of its corners defined.\n\nSo however bed size and printable radius are defined, make sure that your mesh grid is defined so that a full circle of ‘extra’ mesh points lie outside of the printable radius.\n\n3-point probe positions - If you plan to use 3-point probing to ‘touch up’ the orientation of a saved mesh then you will also need to make sure that the 3-point leveling probe points are all accessible by your probe.\n\n#define UBL_PROBE_PT_1_X 39 // Probing points for 3-Point leveling of the mesh\n#define UBL_PROBE_PT_1_Y 180\n#define UBL_PROBE_PT_2_X 39\n#define UBL_PROBE_PT_2_Y 20\n#define UBL_PROBE_PT_3_X 180\n#define UBL_PROBE_PT_3_Y 20\n\n\n\nCommands\n\nUBL has a series of “phase” commands that roughly follow the mesh building process. Some are heavily used, some aren’t.\n\nThere are several options that can be applied to each of the phase commands. These are the most common:\n\n\n \n \n Command\n Description\n \n \n \n \n G29 P1\n Phase 1 – Automatically probe the bed.\n \n \n G29 P2\n Phase 2 – Manually probe points that automated probing couldn’t reach.\n \n \n G29 P3\n Phase 3 – Assign values to points that still need values.\n \n \n G29 P4\n Phase 4 – Fine tune the mesh.\n \n \n G29 Snn\n Store the mesh in EEPROM slot nn.\n \n \n G29 Lnn or M420 Lnn\n Load a mesh from EEPROM slot nn. (Other leveling systems use M501.)\n \n \n G29 A or M420 S1\n Activate the Z compensation bed leveling.\n \n \n G29 D or M420 S0\n Disable the Z compensation bed leveling.\n \n \n G29 T or M420 V\n Print a map of the mesh.\n \n \n G26\n Print a pattern to test mesh accuracy.\n \n \n M421\n Touch up mesh points by specifying a value (Z) or offset (Q).\n \n \n M502, M500\n Reset settings to defaults, save to EEPROM.\n \n \n\n\nAutomated probing\n\nThe first step in the process is to use the Z probe to populate as much of the mesh as possible.\n\nTo start the process issue G29 P1 or, if you want to see the values as they are measured, G29 P1 T\n\nIf the EEPROM hasn’t been initialized then it’ll tell you to issue the M502, M500, M501 sequence. If that happens then you’ll need to re-issue the G29 P1 command.\n\nIf a G28 hasn’t already been done then the G28 sequence will automatically be done followed by the G29 P1 probing.\n\nNo further action is required of the user for this phase.\n\nIf you do a G29 T or M420 V command you’ll most likely see areas that do not have Z compensation values. See the addendum Mesh area for details.\n\nManual probing\n\nThis optional step uses the encoder wheel to move the nozzle up and down in 0.01mm steps. BE VERY CAREFUL when doing this. Nasty things can happen if too much force is applied to the bed by the nozzle.\n\nMost systems will have areas that the Z probe can’t reach. These points can be manually probed using G29 P2, but the ‘smart’ mesh filling of G29 P3 is often good enough to make manual probing unnecessary.\n\nManual probing consists of lowering the nozzle until the nozzle comes in contact with a feeler gauge. Usually the feeler gauge is a piece of paper or a business card. It’s better if the gauge is a piece of plastic that’s hard but still has some flex. Even better is a mechanic’s metal feeler gauge but those are usually too short to be convenient.\n\nThe idea is to stop lowering when there is the first sign of resistance to moving the gauge. It is very important to be consistent in the amount of force/resistance from point to point.\n\nThe first step is to measure the thickness of the feeler gauge:\n\n\n \n Issue G29 P2 B T to start.\n \n \n The nozzle will move to the center of the bed.\n \n \n Use the encoder wheel to move the nozzle until you feel a small amount of resistance. This is the resistance level you’ll want to aim for when manually probing.\n \n \n Click the encoder button.\n \n \n Remove the feeler gauge.\n \n \n Lower the nozzle VERY SLOWLY until the nozzle just touches the bed.\n \n \n Click the encoder button.\n \n \n The nozzle will move to the first unmeasured location. Use the encoder to lower the nozzle until the desired resistance is felt with the feeler gauge. Click the encoder. The nozzle then moves to the next unmeasured location. Repeat until all locations are measured.\n \n \n See the host interface screen for the grid position you’re currently probing.\n \n\n\nWhen done, you can use G29 S to save the mesh to EEPROM.\n\nFilling in the mesh\n\nUBL includes a third phase, G29 P3, which fills in points on the mesh that were not probed automatically or manually. Note that unlike in bilinear leveling, UBL does not automatically extrapolate correction beyond the bounds of the mesh. If a mesh point is not defined no correction will be applied, and a missing point can affect up to 4 mesh cells.\n\nIssue G29 P3 (no other parameters) to do a ‘smart fill’ of missing mesh points. This uses an extrapolation algorithm - which varies between delta and Cartesian systems - to give the unfilled mesh points reasonable initial values. You may need to run this more than once – each instance of G29 P3 will fill in one missing line of the grid. This allows fine tuning between P3 steps when filling the remainder of larger grids. From this point, G26 and G29 P4 can be used to iteratively refine the mesh.\n\nG29 P3 Cx.xx can be used to manually fill a value into a mesh point(s), like M421, if for some reason that is necessary. G29 P3 Cx.xx Rn will fill the nearest n points with the value x.xx; ‘nearest’ is referenced to the nozzle position, unless X and Y arguments are provided to override the search start point.\n\nAgain, G29 S[n] will save the mesh to EEPROM.\n\nTest print\n\nOnce you have a reasonable looking mesh then it’s time to do a test print.\n\nThe easiest way to do this is to use the G26 command.\n\nThere are several options for the G26 command. See GCode G26 for details.\n\nG26 Bxx Hyy F1.75 L0.2 S0.4 will usually get you something reasonable:\n\n Bxx – bed temperature\n Hyy – hotend temperature\n F1.75 – filament width of 1.75mm (default)\n L0.2 – layer height of 0.2mm (default)\n S0.4 – nozzle diameter of 0.4mm (default)\n\n\nFine-tuning of the matrix\n\nLook over the results of the G26 print and note where adjustments are needed.\n\nTo edit a single point move the nozzle close to the point that needs adjustment. Issue a G29 P4 T. The head will move to nearest point. Use the encoder wheel to change the value. If UBL_MESH_EDIT_MOVES_Z is enabled in Configuration.h (the default setting) the nozzle will change height during this process. If it is disabled the nozzle will not move.\n\nThe values in the mesh indicate how far the nozzle needs to move along the Z axis to compensate for imperfections in the bed. Positive values mean that the nozzle needs to move away from the bed (“up”) and negative values mean that the nozzle needs to move towards the bed (“down”). Thus, if the G26 print shows that for a specific mesh point the nozzle is too close to the bed (the lines are “squished” or the nozzle hit the bed when printing the test pattern) the value of the mesh point should be increased. If the nozzle is too far away from the bed (lines are too thin or not even sticking to the bed) the value of the mesh point should be decreased. This may cause the mesh point value to change from positive to negative or vice versa.\n\nFor example, suppose that a mesh point has a probed value of -0.022 and the test pattern shows that the nozzle is too close at that point. If an adjustment of +0.050 is desired (moving the nozzle 0.050mm away from the bed) the new value for the mesh point would be +0.028.\n\nIf UBL_MESH_EDIT_MOVES_Z is enabled it is also possible to use a piece of paper or a feeler gauge to adjust the position. Use a command of the form G29 P4 Hxxx where xxx is the thickness of the feeler gauge (or piece of paper) being used to adjust the nozzle height. For example G29 P4 H0.1 is a good option to use with a piece of paper.\n\nTo edit multiple points move the nozzle close to the first point and issue G29 P4 T Rxx where xx is the number of points you want to edit. You can look at the host interface screen to see where in the grid you are currently editing.\n\nPress and hold the encoder button/wheel when you are finished.\n\nThere are options (G29 P4 X... Y...) to make it easier to move to the desired probe locations. For example G29 P4 X110 Y110 will move to the grid point closest to the center of a 220x220mm bed.\n\nIt’s probably a good idea to issue a G29 S command to save the mesh to EEPROM at this stage.\n\nRepeat the G26, G29 P4 T sequence until you have the desired first layer height quality.\n\nIssue a G29 S command periodically to save your mesh.\n\nAs you print parts you may notice that further fine-tuning is needed. The G29 P4 T command can be used anytime to make adjustments.\n\nAddenda\n\nUBL without an LCD\n\nIf you don’t have an LCD with encoder, or you have something like a MKS TFT that doesn’t behave like a proper display, then you will need to modify this process slightly.\n\nFirst, it is especially important that you physically level the bed as well as possible prior to initially probing the bed with G29 P1. This is always a prerequisite, but it is especially important here because without an LCD there’s no easy way to abort the probe process if the nozzle starts getting too close to the bed.\n\nPossible workarounds are to keep your finger on the reset button/power switch so you can quickly stop the probe process, or being ready to quickly issue M112 (emergency stop) if and only if you have EMERGENCY_PARSER enabled in Configuration_adv.h.\n\nThe same cautions apply to using the G26 test print command; if something goes wrong you want a way to quickly abort the process before your print head is driven into the bed.\n\nG29 P2 (manual probe) is not available without a functional LCD, so instead of the sequence above users should skip directly from G29 P1 (auto-probe) to G29 P3 (smart fill). Likewise, G29 P4 R... cannot be used to interactively edit the mesh, so M421 must be used instead to manually adjust individual mesh points. With UBL, the M421 Q form can be used to offset the specified mesh point, avoiding the need to specify absolute values.\n\nIn summary, initial set-up without an LCD might look like this:\n\nG29 P1 ; Automatically probe accessible area\nG29 P3 ; Fill un-probed areas with reasonable values - may need to be repeated\nG26 ; Start test print / validation process\nM421 ... Qx.xx ; Direct edit mesh point, using offset\nG29 S1 ; Save to slot 1, return to G26 for further refinement.\n\n\nUBL without a z-probe\n\nUBL also includes the features previously provided by MESH_BED_LEVELING and PROBE_MANUALLY, allowing the user to take advantage of the system without having a z-probe at all. Again, the initialization and start-up process needs to be varied a bit.\n\nAs in the case of no LCD, it is important to have good physical leveling of the bed before you start here - especially if you try to skip the manual probing step.\n\nIn this case instead of starting with G29 P1 to automatically probe the bed, you want to start with G29 P0 to zero the mesh. From here you can go straight to the cycle of G26... to print a test pattern and G29 P4 R... to fine-tune mesh points - probably working your way ‘down’ from the worst area(s) of the validation pattern, and using G29 S to save results between iterations. You can also use G29 P2 to manually probe first, which is recommended.\n\nIf you use G29 P2 to probe manually first, you probably want to at least probe the center and four corners of the bed – possibly some points in between as well. Then you want to use G29 P3 commands to fill in reasonable initial values for the rest of the mesh before moving on to the G26 / G29 P4 cycle. G29 P3 Rn Cx.xx will fill in the nearest n grid points (to the nozzle) with the value specified by Cx.xx. You will probably have to use the G29 P3 C... form initially, rather than trying to let the smart fill algorithm handle lots of undefined points.\n\nSo in summary, initial set-up of a mesh might look like this:\n\nG29 P0 ; Zero the mesh\n; Optional\nG29 P2... ; Probe manually at appropriate locations\nG29 P3... ; Fill in missing points\n; /Optional\nG26 ; Jump into validation print / edit process\nG29 P4 R... ; Refine mesh points\nG29 S1 ; Save to slot 1, return to G26 for further refinement\n\n\nBilinear computation\n\n\n Uses the Z heights at the 4 corners of the current XY position’s grid box.\n Performs a bilinear interpolation of the Z heights:\n \n Calculates Z height (z1) at the left  edge of the box for the current Y by linear interpolation.\n Calculates Z height (z2) at the right edge of the box for the current Y by linear interpolation.\n Calculates Z height at the current X by linear interpolation between z1 and z2. This is the Z offset used for the move.\n \n \n\n\nMESH areas\n\nAfter G29 P1 your matrix will probably have areas that do not have Z compensation values. This is because the probe can’t be positioned in these areas. The only ways to avoid this are:\n\n Use the nozzle as the probe (no offsets).\n Build your system so that the nozzle can travel outside the bed.\n\n\nIf your probe is in front and to the right of your nozzle then the matrix will look like one of these.\n\n\n\n\n GREEN: Probing is possible\n BLUE: Probe can’t reach\n\n\nFurther Optimization\n\nGoing forward, we’ve been thinking anew about boundary-splitting and delta-style line-splitting. On kinematic systems, moves are split into small segments, so the nozzle already closely follows the (bilinear approx.) curve of the bed on those machines. Thus, on kinematic systems we can theoretically skip the boundary-splitting step.\n\nAt the same time, we also realize that for mesh-based bed leveling, splitting up lines into smaller segments has extra benefit for Cartesians too. So, if we simply enable move-splitting for cartesians when mesh leveling is enabled, we can skip boundary-splitting while also improving leveling accuracy. Since it requires some extra computation, this ought to be an optional feature.\n\n", "link": "/docs/features/unified_bed_leveling.html", "excerpt": "The Unified Auto Bed Leveling system (UBL) provides automated procedures to probe the bed and compensate for an irregular or tilted bed", "class": "feature" } ,{ "title": "Configuring Marlin", "content": "\n\nMarlin is a huge C++ program composed of many files, but here we’ll only be talking about the two files that contain all of Marlin’s compile-time configuration options:\n\n\n Configuration.h contains the core settings for the hardware, language and controller selection, and settings for the most common features and components.\n Configuration_adv.h serves up more detailed customization options, add-ons, experimental features, and other esoterica.\n\n\nThese two files contain all of Marlin’s build-time configuration options. Simply edit or replace these files before building and uploading Marlin to the board. A variety of pre-built configurations are included in the example_configurations folder to get you started.\n\nTo use configurations from an earlier version of Marlin, try dropping them into the newer Marlin and building. As part of the build process, the SanityCheck.h will print helpful error messages explaining what needs to be changed.\n\nAlso a tool like Winmerge is usefull to compare the old file to the new one and you can copy over the settings.\n\nCompiler Directives\n\nMarlin is configured using C++ compiler directives. This allows Marlin to leverage the C++ preprocessor and include only the code and data needed for the enabled options. This results in the smallest possible binary. A build of Marlin can range from 50K to over 230K in size.\n\nSettings can be enabled, disabled, and assigned values using C preprocessor syntax like so:\n\n#define THIS_IS_ENABLED // this switch is enabled\n//#define THIS_IS_DISABLED // this switch is disabled\n#define OPTION_VALUE 22 // this setting is \"22\"\n\n\n\nSources of Documentation\n\nThe most authoritative source on configuration details will always be the configuration files themselves. They provide good descriptions of each option, and are themselves the source for most of the information presented here.\n\nIf you’ve never configured and calibrated a 3D Printer before, here are some good resources:\n\n\n Calibration\n Calibrating Steps-per-unit\n Prusa’s calculators\n Triffid Hunter’s Calibration Guide\n The Essential Calibration Set\n Calibration of your RepRap\n XY 20 mm Calibration Box\n G-code reference\n Marlin3DprinterTool\n\n\nBefore You Begin\n\nTo get your core Configuration.h settings right you’ll need to know the following things about your printer:\n\n\n Printer style, such as Cartesian, Delta, CoreXY, or SCARA\n Driver board, such as RAMPS, RUMBA, Teensy, etc.\n Number of extruders\n Steps-per-mm for XYZ axes and extruders (can be tuned later)\n Endstop positions\n Thermistors and/or thermocouples\n Probes and probing settings\n LCD controller brand and model\n Add-ons and custom components\n\n\nConfiguration.h\n\nThe core and default settings of Marlin live in the Configuration.h file. Most of these settings are fixed. Once you compile Marlin, that’s it. To change them you need to re-compile. However, several items in Configuration.h only provide defaults -factory settings- that can be changed via the user interface, stored on EEPROM and reloaded or restored to initial values.\n\n \nSettings that can be changed and saved to EEPROM are marked with . Options marked with can be changed from the LCD controller.\n \n \nRemember that settings saved in EEPROM may still be active after flashing new firmware. Always send M502, M500 or “Reset EEPROM” from the LCD after flashing.\n \n\nThis section follows the order of settings as they appear. The order isn’t always logical, so “Search In Page” may be helpful. We’ve tried to keep descriptions brief and to the point. For more detailed information on various topics, please read the main articles and follow the links provided in the option descriptions.\n\nConfiguration versioning\n\n#define CONFIGURATION_H_VERSION 010100\n\n\nMarlin now checks for a configuration version and won’t compile without this setting. If you want to upgrade from an earlier version of Marlin, add this line to your old configuration file. During compilation, Marlin will throw errors explaining what needs to be changed.\n\nFirmware Info\n\n#define STRING_CONFIG_H_AUTHOR \"(none, default config)\"\n#define SHOW_BOOTSCREEN\n#define STRING_SPLASH_LINE1 SHORT_BUILD_VERSION // will be shown during bootup in line 1\n#define STRING_SPLASH_LINE2 WEBSITE_URL // will be shown during bootup in line 2\n\n\n\n STRING_CONFIG_H_AUTHOR is shown in the Marlin startup message, and is meant to identify the author (and optional variant) of the firmware. Use this setting as a way to uniquely identify all your custom configurations. The startup message is printed when connecting to host software, and whenever the board reboots.\n SHOW_BOOTSCREEN enables the boot screen for LCD controllers.\n STRING_SPLASH_LINE1 and STRING_SPLASH_LINE2 are shown on the boot screen.\n\n\nHardware Info\n\nSerial Port\n\n#define SERIAL_PORT 0\n\n\nThe index of the on-board serial port that will be used for primary host communication. Change this if, for example, you need to connect a wireless adapter to non-default port pins. Serial port 0 will be used by the Arduino bootloader regardless of this setting.\n\nBaud Rate\n\n#define BAUDRATE 115200\n\n\nThe serial communication speed of the printer should be as fast as it can manage without generating errors. In most cases 115200 gives a good balance between speed and stability. Start with 250000 and only go lower if “line number” and “checksum” errors start to appear. Note that some boards (e.g., a temperamental Sanguinololu clone based on the ATMEGA1284P) may not be able to handle a baudrate over 57600. Allowed values: 2400, 9600, 19200, 38400, 57600, 115200, 250000.\n\nBluetooth\n\n#define BLUETOOTH\n\n\nEnable the Bluetooth serial interface. For boards based on the AT90USB.\n\n\n\nMotherboard\n\n#define MOTHERBOARD BOARD_RAMPS_14_EFB\n\n\nThe most important setting is Marlin is the motherboard. The firmware needs to know what board it will be running on so it can assign the right functions to all pins and take advantage of the full capabilities of the board. Setting this incorrectly will lead to unpredictable results.\n\nUsing boards.h as a reference, replace BOARD_RAMPS_14_EFB with your board’s ID. The boards.h file has the most up-to-date listing of supported boards, so check it first if you don’t see yours listed here.\n\n\n\n\n \nThe Sanguino board requires adding “Sanguino” support to Arduino IDE. Open Preferences and locate the Additional Boards Manager URLs field. Copy and paste this source URL. Then use Tools &gt; Boards &gt; Boards Manager to install “Sanguino” from the list. An internet connection is required. (Thanks to Dust’s RepRap Blog for the tip.)\n \n\nCustom Machine Name\n\n//#define CUSTOM_MACHINE_NAME \"3D Printer\"\n\n\nThis is the name of your printer as displayed on the LCD and by M115. For example, if you set this to “My Delta” the LCD will display “My Delta ready” when the printer starts up.\n\nMachine UUID\n\n//#define MACHINE_UUID \"00000000-0000-0000-0000-000000000000\"\n\n\nA unique ID for your 3D printer. A suitable unique ID can be generated randomly at uuidgenerator.net. Some host programs and slicers may use this identifier to differentiate between specific machines on your network.\n\nExtruder Info\n\n\n\nExtruders\n\n#define EXTRUDERS 1\n\n\nThis value, from 1 to 6, defines how many extruders (or E steppers) the printer has. By default Marlin will assume separate nozzles all moving together on a single carriage. If you have a single nozzle, a switching extruder, a mixing extruder, or dual X carriages, specify that below.\n\nThis value should be set to the total number of E stepper motors on the machine, even if there’s only a single nozzle.\n\nFilament Diameter\n#define DEFAULT_NOMINAL_FILAMENT_DIA 3.00\n\n\nThis is the “nominal” filament diameter as written on the filament spool (1.75, 2.85, 3.0). If you typically use 1.75mm filament, but physically measure the diameter as 1.70mm, you should still use 1.75 if that’s what you have set in your slicer.\n\nThis value is used by Marlin to compensate for Filament Width when printing in volumetric mode (See M200), and by the Unified Bed Leveling command G26 when printing a test grid.\n\nYou can override this value with M404 W.\n\nSingle Nozzle\n#define SINGLENOZZLE\n\n\nEnable SINGLENOZZLE if you have an E3D Cyclops or any other “multi-extruder” system that shares a single nozzle. In a single-nozzle setup, only one filament drive is engaged at a time, and each needs to retract before the next filament can be loaded and begin purging and extruding.\n\n###Průša MK2 Single Nozzle Multi-Material Multiplexer\n//#define MK2_MULTIPLEXER\n\n\nEnabling MK2_MULTIPLEXER allows one stepper driver on a control board to drive two to eight stepper motors, one at a time.\n\nPrusa MMU2\n\n/**\n * Prusa Multi-Material Unit v2\n *\n * Requires NOZZLE_PARK_FEATURE to park print head in case MMU unit fails.\n * Requires EXTRUDERS = 5\n *\n * For additional configuration see Configuration_adv.h\n */\n#define PRUSA_MMU2\n\n\nEnable support for the Prusa Multi-material unit 2. This requires a free serial port on your printer board. To use the MMU2 you also have to\n\n\n enable NOZZLE_PARK_FEATURE\n set EXTRUDERS = 5\n\n\nAll details are configured in [Configuration_adv.h]\n\nSwitching Extruder\n//#define SWITCHING_EXTRUDER\n#if ENABLED(SWITCHING_EXTRUDER)\n #define SWITCHING_EXTRUDER_SERVO_NR 0\n #define SWITCHING_EXTRUDER_SERVO_ANGLES { 0, 90 } // Angles for E0, E1\n#endif\n\n\nA Switching Extruder is a dual extruder that uses a single stepper motor to drive two filaments, but only one at a time. The servo is used to switch the side of the extruder that will drive the filament. The E motor also reverses direction for the second filament. Set the servo sub-settings above according to your particular extruder’s setup instructions.\n\nSwitching Nozzle\n\n//#define SWITCHING_NOZZLE\n#if ENABLED(SWITCHING_NOZZLE)\n #define SWITCHING_NOZZLE_SERVO_NR 0\n #define SWITCHING_NOZZLE_SERVO_ANGLES { 0, 90 } // Angles for E0, E1\n //#define HOTEND_OFFSET_Z {0.0, 0.0}\n#endif\n\n\nA Switching Nozzle is a carriage with 2 nozzles. A servo is used to move one of the nozzles up and down. The servo either lowers the active nozzle or raises the inactive one. Set the servo sub-settings above according to your particular extruder’s setup instructions.\n\nParking extruder (with solenoid)\n\n//#define PARKING_EXTRUDER\n\n\nTwo separate X-carriages with extruders that connect to a moving part via a solenoid docking mechanism. Requires SOL1_PIN and SOL2_PIN.\n\nParking extruder (with magnets)\n\n//#define MAGNETIC_PARKING_EXTRUDER\n\n\nTwo separate X-carriages with extruders that connect to a moving part via a magnetic docking mechanism using movements and no solenoid\n\nSwitching Toolhead\n\n//#define SWITCHING_TOOLHEAD\n\n\nSupport for swappable and dockable toolheads, such as the E3D Tool Changer. Toolheads are locked with a servo.\n\nMixing Extruder\n\n/**\n * \"Mixing Extruder\"\n * - Adds a new code, M165, to set the current mix factors.\n * - Extends the stepping routines to move multiple steppers in proportion to the mix.\n * - Optional support for Repetier Host M163, M164, and virtual extruder.\n * - This implementation supports only a single extruder.\n * - Enable DIRECT_MIXING_IN_G1 for Pia Taubert's reference implementation\n */\n//#define MIXING_EXTRUDER\n#if ENABLED(MIXING_EXTRUDER)\n #define MIXING_STEPPERS 2 // Number of steppers in your mixing extruder\n #define MIXING_VIRTUAL_TOOLS 16 // Use the Virtual Tool method with M163 and M164\n //#define DIRECT_MIXING_IN_G1 // Allow ABCDHI mix factors in G1 movement commands\n#endif\n\n\nA Mixing Extruder uses two or more stepper motors to drive multiple filaments into a mixing chamber, with the mixed filaments extruded from a single nozzle. This option adds the ability to set a mixture, to save mixtures, and to recall mixtures using the T command. The extruder still uses a single E axis, while the current mixture is used to determine the proportion of each filament to use. An “experimental” G1 direct mixing option is included.\n\nHotend Offsets\n\n//#define HOTEND_OFFSET_X {0.0, 20.00} // (in mm) for each extruder, offset of the hotend on the X axis\n//#define HOTEND_OFFSET_Y {0.0, 5.00} // (in mm) for each extruder, offset of the hotend on the Y axis\n\n\nHotend offsets are needed if your extruder has more than one nozzle. These values specify the offset from the first nozzle to each nozzle. So the first element is always set to 0.0. The next element corresponds to the next nozzle, and so on. Add more offsets if you have 3 or more nozzles.\n\nPower Supply\n\n\n\n#define POWER_SUPPLY 1\n\n\nUse this option to specify the type of power supply you’re using. Marlin uses this setting to decide how to switch the power supply on and off. The options are None (0), ATX (1), or X-Box 360 (2). For a non-switchable power supply use 0. A common example of this is the power “brick” (like a big laptop power supply). For a PC power supply (ATX) or LED Constant-Voltage Power Supply select 1. These are the most commonly-used power supplies.\n\n//#define PS_DEFAULT_OFF\n\n\nEnable this if you don’t want the power supply to switch on when you turn on the printer. This is for printers that have dual power supplies. For instance some setups have a separate power supply for the heaters. In this situation you can save power by leaving the power supply off until needed. If you don’t know what this is leave it.\n\n\n\nThermal Settings\n\nTemperature Sensors\n\n#define TEMP_SENSOR_0 1\n#define TEMP_SENSOR_1 0\n#define TEMP_SENSOR_2 0\n#define TEMP_SENSOR_3 0\n#define TEMP_SENSOR_4 0\n#define TEMP_SENSOR_5 0\n#define TEMP_SENSOR_BED 0\n#define TEMP_SENSOR_CHAMBER 0\n#define CHAMBER_HEATER_PIN -1\n\n\nTemperature sensors are vital components in a 3D printer. Fast and accurate sensors ensure that the temperature will be well controlled, to keep plastic flowing smoothly and to prevent mishaps. Use these settings to specify the hotend and bed temperature sensors. Every 3D printer will have a hotend thermistor, and most will have a bed thermistor.\n\nThe listing above these options in Configuration.h contains all the thermistors and thermocouples that Marlin knows and supports. Try to match your brand and model with one of the sensors in the list. If no match is found, use a profile for a similar sensor of the same brand, or try “1” – the generic profile. Each profile is calibrated for a particular temperature sensor so it’s important to be as precise as possible.\n\n \nIt is crucial to obtain accurate temperature measurements. As a last resort, use 100k thermistor for TEMP_SENSOR and TEMP_SENSOR_BED but be highly skeptical of the temperature accuracy.\n \n\n// Dummy thermistor constant temperature readings, for use with 998 and 999\n#define DUMMY_THERMISTOR_998_VALUE 25\n#define DUMMY_THERMISTOR_999_VALUE 100\n\n\nMarlin provides two dummy sensors for testing purposes. Set their constant temperature readings here.\n\n//#define TEMP_SENSOR_1_AS_REDUNDANT\n#define MAX_REDUNDANT_TEMP_SENSOR_DIFF 10\n\n\nEnable this option to use sensor 1 as a redundant sensor for sensor 0. This is an advanced way to protect against temp sensor failure. If the temperature difference between sensors exceeds MAX_REDUNDANT_TEMP_SENSOR_DIFF Marlin will abort the print and disable the heater.\n\nTemperature Stability\n\n#define TEMP_RESIDENCY_TIME 10 // (seconds)\n#define TEMP_HYSTERESIS 3 // (degC) range of +/- temperatures considered \"close\" to the target one\n#define TEMP_WINDOW 1 // (degC) Window around target to start the residency timer x degC early.\n\n\nExtruders must maintain a stable temperature for TEMP_RESIDENCY_TIME before M109 will return success and start the print. Tune what “stable” means using TEMP_HYSTERESIS and TEMP_WINDOW.\n\n#define TEMP_BED_RESIDENCY_TIME 10 // (seconds)\n#define TEMP_BED_HYSTERESIS 3 // (degC) range of +/- temperatures considered \"close\" to the target one\n#define TEMP_BED_WINDOW 1 // (degC) Window around target to start the residency timer x degC early.\n\n\nThe bed must maintain a stable temperature for TEMP_BED_RESIDENCY_TIME before M109 will return success and start the print. Tune what “stable” means using TEMP_BED_HYSTERESIS and TEMP_BED_WINDOW.\n\n#define TEMP_CHAMBER_HYSTERESIS 3 // (°C) Temperature proximity considered \"close enough\" to the target\n\n\nSet how far from target the chamber can be and still be considered ok.\n\nTemperature Ranges\n\n#define HEATER_0_MINTEMP 5\n#define HEATER_1_MINTEMP 5\n#define HEATER_2_MINTEMP 5\n#define HEATER_3_MINTEMP 5\n#define HEATER_4_MINTEMP 5\n#define BED_MINTEMP 5\n\n\nThese parameters help prevent the printer from overheating and catching fire. Temperature sensors report abnormally low values when they fail or become disconnected. Set these to the lowest value (in degrees C) that the machine is likely to experience. Indoor temperatures range from 10C-40C, but a value of 0 might be appropriate for an unheated workshop.\n\nIf any sensor goes below the minimum temperature set here, Marlin will shut down the printer with a “MINTEMP” error.\n\n \nErr: MINTEMP: This error means your thermistor has disconnected or become an open circuit. (Or the machine is just very cold.)\n \n\n#define HEATER_0_MAXTEMP 285\n#define HEATER_1_MAXTEMP 275\n#define HEATER_2_MAXTEMP 275\n#define HEATER_3_MAXTEMP 275\n#define HEATER_4_MAXTEMP 275\n#define BED_MAXTEMP 130\n\n\nMaximum temperature for each temperature sensor. If Marlin reads a temperature above these values, it will immediately shut down for safety reasons. For the E3D V6 hotend, many use 285 as a maximum value.\n\n \nErr: MAXTEMP: This error usually means that the temperature sensor wires are shorted together. It may also indicate an issue with the heater MOSFET or relay that is causing it to stay on.\n \n \nRemeber that where cold and heat meet dew forms, and dew in electronics will give you a VERY bad day. Dew Point Calculator is a good tool to tell if you are likely to run in to dew.\n \n\n\nPID\n\nMarlin uses PID (Proportional, Integral, Derivative) control (Wikipedia) to stabilize the dynamic heating system for the hotends and bed. When PID values are set correctly, heaters reach their target temperatures faster, maintain temperature better, and experience less wear over time.\n\nMost vitally, correct PID settings will prevent excessive overshoot, which is a safety hazard. During PID calibration, use the highest target temperature you intend to use (where overshoots are more critical).\n\nSee the PID Tuning topic on the RepRap wiki for detailed instructions on M303 auto-tuning. The PID settings should be tuned whenever changing a hotend, temperature sensor, heating element, board, power supply voltage (12v/24v), or anything else related to the high-voltage circuitry.\n\n\n\nHotend PID Options\n\n#define PIDTEMP\n#define BANG_MAX 255 // limits current to nozzle while in bang-bang mode; 255=full current\n#define PID_MAX BANG_MAX // limits current to nozzle while PID is active (see PID_FUNCTIONAL_RANGE below); 255=full current\n#define K1 0.95\n\n\nDisable PIDTEMP to run extruders in bang-bang mode. Bang-bang is a pure binary mode - the heater is either fully-on or fully-off for a long period. PID control uses higher frequency PWM and (in most cases) is superior for maintaining a stable temperature.\n\n#if ENABLED(PIDTEMP)\n //#define PID_EDIT_MENU\n //#define PID_AUTOTUNE_MENU\n //#define PID_DEBUG\n //#define PID_OPENLOOP 1\n //#define SLOW_PWM_HEATERS\n //#define PID_PARAMS_PER_HOTEND\n #define PID_FUNCTIONAL_RANGE 10\n \n\n\nEnable PID_AUTOTUNE_MENU to add an option on the LCD to run an Autotune cycle and automatically apply the result. Enable PID_PARAMS_PER_HOTEND if you have more than one extruder and they are different models.\n\nPID Values \n // Ultimaker\n #define DEFAULT_Kp 22.2\n #define DEFAULT_Ki 1.08\n #define DEFAULT_Kd 114\n\n // MakerGear\n //#define DEFAULT_Kp 7.0\n //#define DEFAULT_Ki 0.1\n //#define DEFAULT_Kd 12\n\n // Mendel Parts V9 on 12V\n //#define DEFAULT_Kp 63.0\n //#define DEFAULT_Ki 2.25\n //#define DEFAULT_Kd 440\n\n\nSample PID values are included for reference, but they won’t apply to most setups. The PID values you get from M303 may be very different, but will be better for your specific machine.\n\n \nM301 can be used to set Hotend PID and is also accessible through the LCD. M304 can be used to set bed PID. M303 should be used to tune PID values before using any new hotend components.\n \n\n\n\nBed PID Options\n\n//#define PIDTEMPBED\n\n\nEnable PIDTEMPBED to use PID for the bed heater (at the same PWM frequency as the extruders). With the default PID_dT the PWM frequency is 7.689Hz, fine for driving a square wave into a resistive load without significant impact on FET heating. This also works fine on a Fotek SSR-10DA Solid State Relay into a 250W heater. If your configuration is significantly different than this and you don’t understand the issues involved, you probably shouldn’t use bed PID until it’s verified that your hardware works. Use M303 E-1 to tune the bed PID for this option.\n\n//#define BED_LIMIT_SWITCHING\n\n\nEnable BED_LIMIT_SWITCHING\n\n#define MAX_BED_POWER 255\n\n\nThe max power delivered to the bed. All forms of bed control obey this (PID, bang-bang, bang-bang with hysteresis). Setting this to anything other than 255 enables a form of PWM. As with PIDTEMPBED, don’t enable this unless your bed hardware is ok with PWM.\n\nBed PID Values \n\n#if ENABLED(PIDTEMPBED)\n\n //#define PID_BED_DEBUG // Sends debug data to the serial port.\n\n //120V 250W silicone heater into 4mm borosilicate (MendelMax 1.5+)\n //from FOPDT model - kp=.39 Tp=405 Tdead=66, Tc set to 79.2, aggressive factor of .15 (vs .1, 1, 10)\n #define DEFAULT_bedKp 10.00\n #define DEFAULT_bedKi .023\n #define DEFAULT_bedKd 305.4\n\n //120V 250W silicone heater into 4mm borosilicate (MendelMax 1.5+)\n //from pidautotune\n //#define DEFAULT_bedKp 97.1\n //#define DEFAULT_bedKi 1.41\n //#define DEFAULT_bedKd 1675.16\n\n // FIND YOUR OWN: \"M303 E-1 C8 S90\" to run autotune on the bed at 90 degreesC for 8 cycles.\n#endif // PIDTEMPBED\n\n\nSample Bed PID values are included for reference, but use the result from M303 E-1 for your specific machine.\n\n\n\nSafety\n\nPrevent Cold Extrusion \n#define PREVENT_COLD_EXTRUSION\n#define EXTRUDE_MINTEMP 170\n\n\nSo-called “cold extrusion” can damage a machine in several ways, but it usually just results in gouged filament and a jammed extruder. With this option, the extruder motor won’t move if the hotend is below the specified temperature. Override this setting with M302 if needed.\n\nPrevent Lengthy Extrude\n#define PREVENT_LENGTHY_EXTRUDE\n#define EXTRUDE_MAXLENGTH 200\n\n\nA lengthy extrusion may not damage your machine, but it can be an awful waste of filament. This feature is meant to prevent a typo or glitch in a G1 command from extruding some enormous amount of filament. For Bowden setups, the max length should be set greater than or equal to the load/eject length.\n\nThermal Protection\n\n#define THERMAL_PROTECTION_HOTENDS // Enable thermal protection for all extruders\n#define THERMAL_PROTECTION_BED // Enable thermal protection for the heated bed\n\n\nThermal protection is one of the most vital safety features in Marlin, allowing the firmware to catch a bad situation and shut down heaters before it goes too far. Consider what happens when a thermistor comes loose during printing. The firmware sees a low temperature reading so it keeps the heat on. As long as the temperature reading is low, the hotend will continue to heat up indefinitely, leading to smoke, oozing, a ruined print, and possibly even fire.\n\nMarlin offers two levels of thermal protection:\n\n\n Check that the temperature is actually increasing when a heater is on. If the temperature fails to rise enough within a certain time period (by default, 2 degrees in 20 seconds), the machine will shut down with a “Heating failed” error. This will detect a disconnected, loose, or misconfigured thermistor, or a disconnected heater.\n Monitor thermal stability. If the measured temperature drifts too far from the target temperature for too long, the machine will shut down with a “Thermal runaway” error. This error may indicate poor contact between thermistor and hot end, poor PID tuning, or a cold environment.\n\n\nMore thermal protection options are located in Configuration_adv.h. In most setups these can be left unchanged, but should be tuned as needed to prevent false positives.\n\nInformation\nFor false thermal runaways not caused by a loose temperature sensor, try increasing WATCH_TEMP_PERIOD or decreasing WATCH_TEMP_INCREASE. Heating may be slowed in a cold environment, if a fan is blowing on the heat block, or if the heater has high resistance.\n\n\n\n\nKinematics\n\nMarlin supports four kinematic motion systems: Cartesian, Core (H-Bot), Delta, and SCARA. Cartesian is the simplest, applying each stepper directly to an axis. CoreXY uses a special belt arrangement to do XY motion, requiring a little extra maths. Delta robots convert the motion of three vertical carriages into XYZ motion in an “effector” attached to the carriages by six arms. SCARA robots move an arm in the XY plane using two angular joints.\n\nCoreXY\n\n//#define COREXY\n//#define COREXZ\n//#define COREYZ\n//#define COREYX\n//#define COREZX\n//#define COREZY\n\n\nEnable the option that applies to the specific Core setup. Both normal and reversed options are included for completeness.\n\n\n\nEndstops\n\nIn open loop systems, endstops are an inexpensive way to establish the actual position of the carriage on all axes. In the procedure known as “homing,” each axis is moved towards one end until the endstop switch is triggered, at which point the machine knows that the axis is at the endstop (home) position. From this point on, the machine “knows” its position by keeping track of how far the steppers have been moved. If the machine gets out of step for any reason, re-homing may be required.\n\nEndstop Plugs\n\n#define USE_XMIN_PLUG\n#define USE_YMIN_PLUG\n#define USE_ZMIN_PLUG\n//#define USE_XMAX_PLUG\n//#define USE_YMAX_PLUG\n//#define USE_ZMAX_PLUG\n\n\nSpecify all the endstop connectors that are connected to any endstop or probe. Most printers will use all three min plugs. On delta machines, all the max plugs should be used. Probes can share the Z min plug, or can use one or more of the extra connectors. Don’t enable plugs used for non-endstop and non-probe purposes here.\n\nEndstop Pullups\n\n#define ENDSTOPPULLUPS\n\n#if DISABLED(ENDSTOPPULLUPS)\n // Disable ENDSTOPPULLUPS to set pullups individually\n //#define ENDSTOPPULLUP_XMAX\n //#define ENDSTOPPULLUP_YMAX\n //#define ENDSTOPPULLUP_ZMAX\n //#define ENDSTOPPULLUP_XMIN\n //#define ENDSTOPPULLUP_YMIN\n //#define ENDSTOPPULLUP_ZMIN\n //#define ENDSTOPPULLUP_ZMIN_PROBE\n#endif\n\n\nBy default all endstops have pullup resistors enabled. This is best for NC switches, preventing the values from “floating.” If only some endstops should have pullup resistors, you can disable ENDSTOPPULLUPS and enable pullups individually.\n\nEndstop Pulldowns\n\n//#define ENDSTOPPULLDOWNS\n\n#if DISABLED(ENDSTOPPULLDOWNS)\n // Disable ENDSTOPPULLDOWNS to set pulldowns individually\n //#define ENDSTOPPULLDOWN_XMAX\n //#define ENDSTOPPULLDOWN_YMAX\n //#define ENDSTOPPULLDOWN_ZMAX\n //#define ENDSTOPPULLDOWN_XMIN\n //#define ENDSTOPPULLDOWN_YMIN\n //#define ENDSTOPPULLDOWN_ZMIN\n //#define ENDSTOPPULLDOWN_ZMIN_PROBE\n#endif\n\n\nBy default all endstops have pulldown resistors disabled.\n\nEndstop Inverting\n\n// Mechanical endstop with COM to ground and NC to Signal uses \"false\" here (most common setup).\n#define X_MIN_ENDSTOP_INVERTING false // set to true to invert the logic of the endstop.\n#define Y_MIN_ENDSTOP_INVERTING false // set to true to invert the logic of the endstop.\n#define Z_MIN_ENDSTOP_INVERTING false // set to true to invert the logic of the endstop.\n#define X_MAX_ENDSTOP_INVERTING false // set to true to invert the logic of the endstop.\n#define Y_MAX_ENDSTOP_INVERTING false // set to true to invert the logic of the endstop.\n#define Z_MAX_ENDSTOP_INVERTING false // set to true to invert the logic of the endstop.\n#define Z_MIN_PROBE_ENDSTOP_INVERTING false // set to true to invert the logic of the endstop.\n\n\nUse M119 to test if these are set correctly. If an endstop shows up as “TRIGGERED” when not pressed, and “open” when pressed, then it should be inverted here.\n\nStepper Drivers\n\n//#define X_DRIVER_TYPE A4988\n//#define Y_DRIVER_TYPE A4988\n//#define Z_DRIVER_TYPE A4988\n//#define X2_DRIVER_TYPE A4988\n//#define Y2_DRIVER_TYPE A4988\n//#define Z2_DRIVER_TYPE A4988\n//#define Z3_DRIVER_TYPE A4988\n//#define E0_DRIVER_TYPE A4988\n//#define E1_DRIVER_TYPE A4988\n//#define E2_DRIVER_TYPE A4988\n//#define E3_DRIVER_TYPE A4988\n//#define E4_DRIVER_TYPE A4988\n//#define E5_DRIVER_TYPE A4988\n\n\nThese settings allow Marlin to tune stepper driver timing and enable advanced options for stepper drivers that support them. You may also override timing options in Configuration_adv.h.\n\nEndstop Interrupts\n\n//#define ENDSTOP_INTERRUPTS_FEATURE\n\n\nEnable this feature if all enabled endstop pins are interrupt-capable.\nThis will remove the need to poll the interrupt pins, saving many CPU cycles.\n\nEndstop Noise Threshold\n\n//#define ENDSTOP_INTERRUPTS_FEATURE\n\n\nEnable if your probe or endstops falsely trigger due to noise.\n\n\n\nMovement\n\nDistinct E Factors\n\n//#define DISTINCT_E_FACTORS\n\n\nEnable DISTINCT_E_FACTORS if your extruders are not all mechanically identical. With this setting you can optionally specify different steps-per-mm, max feedrate, and max acceleration for each extruder.\n\nDefault Steps per mm \n\n/**\n * Default Axis Steps Per Unit (steps/mm)\n * Override with M92\n * X, Y, Z, E0 [, E1[, E2[, E3[, E4]]]]\n */\n#define DEFAULT_AXIS_STEPS_PER_UNIT { 80, 80, 4000, 500 }\n\n\nThese are the most crucial settings for your printer, as they determine how accurately the steppers will position the axes. Here we’re telling the firmware how many individual steps produce a single millimeter (or degree on SCARA) of movement. These depend on various factors, including belt pitch, number of teeth on the pulley, thread pitch on leadscrews, micro-stepping settings, and extruder style.\n\nA useful trick is to let the compiler do the calculations for you and just supply the raw values. For example:\n\n#define NEMA17_FULL_STEPS 200.0\n#define NEMA17_MICROSTEPS 16.0\n#define NEMA17_MOTOR_STEPS (NEMA17_FULL_STEPS * NEMA17_MICROSTEPS)\n#define PULLEY_PITCH 2.0\n#define PULLEY_TEETH 20.0\n#define Z_ROD_PITCH 0.8\n\n#define WADE_PULLEY_TEETH 11.0\n#define WADE_GEAR_TEETH 45.0\n#define HOBBED_BOLT_DIAM 6.0\n\n#define XY_STEPS (NEMA17_MOTOR_STEPS / (PULLEY_PITCH * PULLEY_TEETH))\n#define Z_STEPS (NEMA17_MOTOR_STEPS / Z_ROD_PITCH)\n#define WADE_GEAR_RATIO (WADE_GEAR_TEETH / WADE_PULLEY_TEETH)\n#define HOBBED_BOLD_CIRC (M_PI * HOBBED_BOLT_DIAM)\n#define WADE_E_STEPS (NEMA17_MOTOR_STEPS * WADE_GEAR_RATIO / HOBBED_BOLD_CIRC)\n\n#define DEFAULT_AXIS_STEPS_PER_UNIT { XY_STEPS, XY_STEPS, Z_STEPS, ENG2_E_STEPS }\n\n\n\nStep Calculator\nThe Prusa Calculator is a great tool to help find the right values for your specific printer configuration.\n\n\nDefault Max Feed Rate \n\n/**\n * Default Max Feed Rate (mm/s)\n * Override with M203\n * X, Y, Z, E0 [, E1[, E2[, E3[, E4]]]]\n */\n#define DEFAULT_MAX_FEEDRATE { 500, 500, 2.25, 45 }\n\n\nIn any move, the velocities (in mm/sec) in the X, Y, Z, and E directions will be limited to the corresponding DEFAULT_MAX_FEEDRATE.\n\n \nSetting these too high will cause the corresponding stepper motor to lose steps, especially on high speed movements.\n \n\nAcceleration\n\nDefault Max Acceleration \n\n/**\n * Default Max Acceleration (change/s) change = mm/s\n * (Maximum start speed for accelerated moves)\n * Override with M201\n * X, Y, Z, E0 [, E1[, E2[, E3[, E4]]]]\n */\n#define DEFAULT_MAX_ACCELERATION { 3000, 3000, 100, 10000 }\n\n\nWhen the velocity of any axis changes, its acceleration (or deceleration) in mm/s/s is limited by the current max acceleration setting. Also see the jerk settings below, which specify the largest instant speed change that can occur between segments.\n\nA value of 3000 means that an axis may accelerate from 0 to 3000mm/m (50mm/s) within a one second movement.\n\nJerk sets the floor for accelerated moves. If the change in top speed for a given axis between segments is less than the jerk value for the axis, an instantaneous change in speed may be allowed. Limits placed on other axes also apply. Basically, lower jerk values result in more accelerated moves, which may be near-instantaneous in some cases, depending on the final acceleration determined by the planner.\n\nDefault Acceleration \n\n/**\n * Default Acceleration (change/s) change = mm/s\n * Override with M204\n *\n * M204 P Acceleration\n * M204 R Retract Acceleration\n * M204 T Travel Acceleration\n */\n#define DEFAULT_ACCELERATION 3000 // X, Y, Z and E acceleration for printing moves\n#define DEFAULT_RETRACT_ACCELERATION 3000 // E acceleration for retracts\n#define DEFAULT_TRAVEL_ACCELERATION 3000 // X, Y, Z acceleration for travel (non printing) moves\n\n\nThe planner uses the default accelerations set here (or by M204) as the starting values for movement acceleration, and then constrains them further, if needed. There are separate default acceleration values for printing moves, retraction moves, and travel moves.\n\n\n Printing moves include E plus at least one of the XYZ axes.\n Retraction moves include only the E axis.\n Travel moves include only the XYZ axes.\n\n\nIn print/travel moves, DEFAULT_ACCELERATION and DEFAULT_TRAVEL_ACCELERATION apply to the XYZ axes. In retraction moves, DEFAULT_RETRACT_ACCELERATION applies only to the E-axis. During movement planning, Marlin constrains the default accelerations to the maximum acceleration of all axes involved in the move.\n\n \nDon’t set these too high. Larger acceleration values can lead to excessive vibration, noisy steppers, or even skipped steps. Lower acceleration produces smoother motion, eliminates vibration, and helps reduce wear on mechanical parts.\n \n\n\n\nJunction Deviation \n//#define JUNCTION_DEVIATION\n#if ENABLED(JUNCTION_DEVIATION)\n #define JUNCTION_DEVIATION_MM 0.02 // (mm) Distance from real junction edge\n#endif\n\n\nUse Junction Deviation instead of traditional Jerk Limiting\n\nJerk \n\n/**\n * Default Jerk (mm/s)\n * Override with M205 X Y Z E\n *\n * \"Jerk\" specifies the minimum speed change that requires acceleration.\n * When changing speed and direction, if the difference is less than the\n * value set here, it may happen instantaneously.\n */\n#define DEFAULT_XJERK 20.0\n#define DEFAULT_YJERK 20.0\n#define DEFAULT_ZJERK 0.4\n#define DEFAULT_EJERK 5.0\n\n\nJerk works in conjunction with acceleration (see above). Jerk is the maximum change in velocity (in mm/sec) that can occur instantaneously. It can also be thought of as the minimum change in velocity that will be done as an accelerated (not instantaneous) move.\n\nBoth acceleration and jerk affect your print quality. If jerk is too low, the extruder will linger too long on small segments and corners, possibly leaving blobs. If the jerk is set too high, direction changes will apply too much torque and you may see “ringing” artifacts or dropped steps.\n\nS-Curve Acceleration \n//#define S_CURVE_ACCELERATION\n\n\nThis option eliminates vibration during printing by fitting a Bézier curve to move acceleration, producing much smoother direction changes.\n\nZ Probe Options\n\n\n\nProbe Pins\n\n#define Z_MIN_PROBE_USES_Z_MIN_ENDSTOP_PIN\n\n\nUse this option in all cases when the probe is connected to the Z MIN endstop plug. This option is used for DELTA robots, which always home to MAX, and may be used in other setups.\n\nYou can use this option to configure a machine with no Z endstops. In that case the probe will be used to home Z and you will need to enable Z_SAFE_HOMING to ensure that the probe is positioned over the bed when homing the Z axis - done after X and Y.\n\n//#define Z_MIN_PROBE_PIN 32 // Pin 32 is the RAMPS default\n\n\nUse this option if you’ve connected the probe to a pin other than the Z MIN endstop pin. With this option enabled, by default Marlin will use the Z_MIN_PROBE_PIN specified in your board’s pins file (usually the X or Z MAX endstop pin since these are the most likely to be unused). If you need to use a different pin, define your custom pin number for Z_MIN_PROBE_PIN in Configuration.h.\n\nProbe Type\n\nMarlin supports any kind of probe that can be made to work like a switch. Specific types of probes have different needs.\n\nManual Probe (no probe)\n\n//#define PROBE_MANUALLY\n\n\nEven if you have no bed probe you can still use any of the core AUTO_BED_LEVELING_* options below by selecting this option. With PROBE_MANUALLY the G29 command only moves the nozzle to the next probe point where it pauses. You adjust the Z height with a piece of paper or feeler gauge, then send G29 again to continue to the next point. You can also enable LCD_BED_LEVELING to add a “Level Bed” Menu item to the LCD for a fully interactive leveling process.\n\nFix Mounted Probe\n\n//#define FIX_MOUNTED_PROBE\n\n\nThis option is for any probe that’s fixed in place, with no need to be deployed or stowed. Specify this type for an inductive probe or when using the nozzle itself as the probe.\n\nBLTouch\n\n//#define BLTOUCH\n\n\nThe ANTCLABS BLTouch probe uses custom circuitry and a magnet to raise and lower a metal pin which acts as a touch probe. The BLTouch uses the servo connector and is controlled using specific servo angles. With this option enabled the other required settings are automatically configured (so there’s no need to enter servo angles, for example).\n\nServo Z Probe\n\n//#define Z_ENDSTOP_SERVO_NR 0\n//#define Z_SERVO_ANGLES {70,0} // Z Servo Deploy and Stow angles\n\n\nTo indicate a Servo Z Probe (e.g., an endstop switch mounted on a rotating arm) just specify the servo index. Use the M280 command to find the best Z_SERVO_ANGLES values.\n\nSolenoid Probe\n\n//#define SOLENOID_PROBE\n\n\nA probe that is deployed and stowed with a solenoid pin (Defined as SOL1_PIN.)\n\nZ Probe Sled\n\n//#define Z_PROBE_SLED\n//#define SLED_DOCKING_OFFSET 5\n\n\nThis type of probe is mounted on a detachable “sled” that sits at the far end of the X axis. Before probing, the X carriage moves to the far end and picks up the sled. When probing is completed, it drops the sled off. The SLED_DOCKING_OFFSET specifies the extra distance the X axis must travel to pickup the sled. 0 should be fine but it may be pushed further if needed.\n\nRack-and-pinion probe\n\n//#define RACK_AND_PINION_PROBE\n#if ENABLED(RACK_AND_PINION_PROBE)\n #define Z_PROBE_DEPLOY_X X_MIN_POS\n #define Z_PROBE_RETRACT_X X_MAX_POS\n#endif\n\n\nA probe deployed by moving the x-axis, such as the Wilson II’s rack-and-pinion probe designed by Marty Rice.\n\nAllen Key\n\n//#define Z_PROBE_ALLEN_KEY\n\n\nA retractable z-probe for deltas that uses an Allen key as the probe. See “Kossel automatic bed leveling probe” at the RepRap wiki. It deploys by leveraging against the z-axis belt, and retracts by pushing the probe down.\n\nMore information will be included in an upcoming Delta configuration page.\n\nProbe Offsets \n\n#define X_PROBE_OFFSET_FROM_EXTRUDER -44 // X offset: -left [of the nozzle] +right\n#define Y_PROBE_OFFSET_FROM_EXTRUDER -8 // Y offset: -front [of the nozzle] +behind\n#define Z_PROBE_OFFSET_FROM_EXTRUDER -2.50 // Z offset: -below [the nozzle](for most negative! positive when using tilt probes or the nozzle based probes)\n\n\nThese offsets specify the distance from the tip of the nozzle to the probe — or more precisely, to the point at which the probe triggers. The X and Y offsets are specified as integers. The Z offset should be specified as exactly as possible using a decimal value. The Z offset can be overridden with M851 Z or the LCD controller. The M851 offset is saved to EEPROM with M500.\n\nDistance from edge\n\n#define MIN_PROBE_EDGE 10\n\n\nSome probes needs to stay away from the edge\n\nProbing Speed\n\n// X and Y axis travel speed (mm/m) between probes\n#define XY_PROBE_SPEED 4000\n// Speed for the first approach when double-probing (with PROBE_DOUBLE_TOUCH)\n#define Z_PROBE_SPEED_FAST HOMING_FEEDRATE_Z\n// Speed for the \"accurate\" probe of each point\n#define Z_PROBE_SPEED_SLOW (Z_PROBE_SPEED_FAST / 2)\n\n\nProbing should be done quickly, but the Z speed should be tuned for best repeatability. Depending on the probe, a slower Z probing speed may be needed for repeatable results.\n\nMultiple Probes\n//#define MULTIPLE_PROBING 2\n\n\nSet to 2 for a fast/slow probe, using the second probe result. Set to 3 or more for slow probes, averaging the results.\n\nProbe Clearance\n\n#define Z_CLEARANCE_DEPLOY_PROBE 10 // Z Clearance for Deploy/Stow\n#define Z_CLEARANCE_BETWEEN_PROBES 5 // Z Clearance between probe points\n#define Z_CLEARANCE_MULTI_PROBE 5 // Z Clearance between multiple probes\n//#define Z_AFTER_PROBING 5 // Z position after probing is done\n\n#define Z_PROBE_LOW_POINT -2 // Farthest distance below the trigger-point to go before stopping\n\n\nZ probes require clearance when deploying, stowing, and moving between probe points to avoid hitting the bed and other hardware. Servo-mounted probes require extra space for the arm to rotate. Inductive probes need space to keep from triggering early.\n\nUse these settings to specify the distance (mm) to raise the probe (or lower the bed). The values set here apply over and above any (negative) probe Z Offset set with Z_PROBE_OFFSET_FROM_EXTRUDER, M851, or the LCD. Only integer values &gt;= 1 are valid for these settings.\n\n\n Example: M851 Z-5 with a CLEARANCE of 4 =&gt; 9mm from bed to nozzle.\n But: M851 Z+1 with a CLEARANCE of 2 =&gt; 2mm from bed to nozzle.\n\n\nG29 Movement\nMake sure you have enough clearance for the probe to move between points!\n\n\n#define Z_PROBE_OFFSET_RANGE_MIN -20\n#define Z_PROBE_OFFSET_RANGE_MAX 20\n\n\nFor M851 and LCD menus give a range for adjusting the Z probe offset.\n\nProbe Testing\n\n#define Z_MIN_PROBE_REPEATABILITY_TEST\n\n\nThis enables you to test the reliability of your probe.\nIssue a M48 command to start testing. It will give you a standard deviation for the probe.\nTip: 0.02 mm is normally acceptable for bed leveling to work.\n\n// Before deploy/stow pause for user confirmation\n//#define PAUSE_BEFORE_DEPLOY_STOW\n\n\nBefore deploy/stow pause for user confirmation\n\nProbe with heaters off\n/**\n * Enable one or more of the following if probing seems unreliable.\n * Heaters and/or fans can be disabled during probing to minimize electrical\n * noise. A delay can also be added to allow noise and vibration to settle.\n * These options are most useful for the BLTouch probe, but may also improve\n * readings with inductive probes and piezo sensors.\n */\n//#define PROBING_HEATERS_OFF // Turn heaters off when probing\n#if ENABLED(PROBING_HEATERS_OFF)\n //#define WAIT_FOR_BED_HEATER // Wait for bed to heat back up between probes (to improve accuracy)\n#endif\n//#define PROBING_FANS_OFF // Turn fans off when probing\n//#define PROBING_STEPPERS_OFF // Turn steppers off (unless needed to hold position) when probing\n//#define DELAY_BEFORE_PROBING 200 // (ms) To prevent vibrations from triggering piezo sensors\n\n\n\n\n\nStepper Drivers\n\nMotor Enable\n\n#define X_ENABLE_ON 0\n#define Y_ENABLE_ON 0\n#define Z_ENABLE_ON 0\n#define E_ENABLE_ON 0 // For all extruders\n\n\nThese options set the pin states used for stepper enable. The most common setting is 0 (LOW) for Active Low. For Active High use 1 or HIGH.\n\nMotor Disable\n\n#define DISABLE_X false\n#define DISABLE_Y false\n#define DISABLE_Z false\n\n\nUse these options to disable steppers when not being issued a movement. This was implemented as a hack to run steppers at higher-than-normal current in an effort to produce more torque at the cost of increased heat for drivers and steppers.\n\nDisabling the steppers between moves gives the motors and drivers a chance to cool off. It sounds good in theory, but in practice it has drawbacks. Disabled steppers can’t hold the carriage stable. This results in poor accuracy and carries a strong probability of axial drift (i.e., lost steps).\n\nMost 3D printers use an “open loop” control system, meaning the software can’t ascertain the actual carriage position at a given time. It simply sends commands and assumes they have been obeyed. In practice with a well-calibrated machine this is not an issue and using open loop is a major cost saving with excellent quality.\n\nWe don’t recommend this hack. There are much better ways to address the problem of stepper/driver overheating. Some examples: stepper/driver heatsink, active cooling, dual motors on the axis, reduce microstepping, check belt for over tension, check components for smooth motion, etc.\n\n//#define DISABLE_REDUCED_ACCURACY_WARNING\n\n\nEnable this option to suppress the warning given in cases when reduced accuracy is likely to occur.\n\n#define DISABLE_E false // For all extruders\n#define DISABLE_INACTIVE_EXTRUDER true //disable only inactive extruders and keep active extruder enabled\n\n\nThe E disable option works like DISABLE_[XYZ] but pertains to one or more extruders. The default setting keeps the active extruder enabled, disabling all inactive extruders. This is reasonable for situations where a “wipe tower” or other means is used to ensure that the nozzle is primed and not oozing between uses.\n\nMotor Direction\n\n#define INVERT_X_DIR true\n#define INVERT_Y_DIR false\n#define INVERT_Z_DIR true\n\n#define INVERT_E0_DIR false\n#define INVERT_E1_DIR false\n#define INVERT_E2_DIR false\n#define INVERT_E3_DIR false\n#define INVERT_E4_DIR false\n\n\nThese settings reverse the motor direction for each axis. Be careful when first setting these. Axes moving the wrong direction can cause damage. Get these right without belts attached first, if possible. Before testing, move the carriage and bed to the middle. Test each axis for proper movemnt using the host or LCD “Move Axis” menu. If an axis is inverted, either flip the plug around or change its invert setting.\n\nHoming and Bounds\n\nZ Homing Height\n\n\n\n//#define Z_HOMING_HEIGHT 4\n\n\nThis value raises Z to the specified height above the bed before homing X or Y. This is useful to prevent the head crashing into bed mountings such as screws, bulldog clips, etc. This also works with auto bed leveling enabled and will be triggered only when the Z axis height is less than the defined value, otherwise the Z axis will not move.\n\nHoming Direction\n\n#define X_HOME_DIR -1\n#define Y_HOME_DIR -1\n#define Z_HOME_DIR -1\n\n\nHoming direction for each axis: -1 = min, 1 = max. Most cartesian and core machines have three min endstops. Deltas have three max endstops. For other configurations set these values appropriately.\n\nMovement Bounds\n\n#define X_BED_SIZE 200\n#define Y_BED_SIZE 200\n\n\nWith Marlin you can directly specify the bed size. This allows Marlin to do extra logic related to the bed size when it differs from the movement limits below. If the XY carriage is able to move outside of the bed, you can specify a wider range below.\n\n#define X_MIN_POS 0\n#define Y_MIN_POS 0\n#define Z_MIN_POS 0\n#define X_MAX_POS X_BED_SIZE\n#define Y_MAX_POS Y_BED_SIZE\n#define Z_MAX_POS 170\n\n\nThese values specify the physical limits of the machine. Usually the [XYZ]_MIN_POS values are set to 0, because endstops are positioned at the bed limits. [XYZ]_MAX_POS should be set to the farthest reachable point. By default, these are used as your homing positions as well. However, the MANUAL_[XYZ]_HOME_POS options can be used to override these, if needed.\n\nHome Offset\nAlthough home positions are fixed, M206 can be used to apply offsets to the home position if needed.\n\n\nSoftware Endstops\n\n#define MIN_SOFTWARE_ENDSTOPS\n#define MAX_SOFTWARE_ENDSTOPS\n\n\nSet to true to enable the option to constrain movement to the physical boundaries of the machine (as set by [XYZ]_(MIN|MAX)_POS). For example, G1 Z-100 can be min constrained to G1 Z0. It is recommended to enable these options as a safety feature. If software endstops need to be disabled, use M211 S0.\n\n//#define SOFT_ENDSTOPS_MENU_ITEM\n\n\nEnable/Disable software endstops from the LCD\n\nFilament Runout Sensor\n\n\n\n//#define FILAMENT_RUNOUT_SENSOR\n#if ENABLED(FILAMENT_RUNOUT_SENSOR)\n #define FIL_RUNOUT_INVERTING false // set to true to invert the logic of the sensor.\n #define ENDSTOPPULLUP_FIL_RUNOUT // Uncomment to use internal pullup for filament runout pins if the sensor is defined.\n #define FILAMENT_RUNOUT_SCRIPT \"M600\"\n#endif\n\n\nWith this feature, a mechanical or opto endstop switch is used to check for the presence of filament in the feeder (usually the switch is closed when filament is present). If the filament runs out, Marlin will run the specified GCode script (by default “M600”). RAMPS-based boards use SERVO3_PIN. For other boards you may need to define FIL_RUNOUT_PIN.\n\nBed Leveling\n\n\n\nThere are many cases where it’s useful to measure variances in bed height. Even if the bed on a 3D printer is perfectly flat and level, there may still be imperfections in the mechanics. For example, a machine may have a very flat bed, but a corner of the XY gantry is a half-mm high. The ends of the Z axis may not be perfectly level. The bed may move slightly in the Z plane as it moves in the X and/or Y plane. On a Delta there may be a lingering bowl-shape to its XY trajectory.\n\nBed Compensation or “— Bed Leveling” allows the machine —with a bed probe or user assistance— to take accurate measurements of the “bed height” at various points in the XY plane. With this data the machine can then adjust movement to align better to the tilt or “height” variances in the bed. (I’m scare-quoting “height” here because variances may come from other than the bed.)\n\nFor more details on these features, see G29 for MBL and G29 for ABL.\n\nWe recommend that you try and get your printer the best it can be before using bedlevel, after all bedlevel only compensates for “bad” hardware, it does not correct it.\n\nBed Leveling Style\n\nBed Leveling is a standard feature on many 3D printers. It takes the guess-work out of getting a good first layer and good bed adhesion. All forms of bed leveling add G29 Bed Probing, M420 enable/disable, and can save their results to EEPROM with M500. Bravo!\n\nWith Bed Leveling enabled:\n\n\n G28 disables bed leveling, but leaves previous leveling data intact.\n G29 automatically or manually probes the bed at various points, measures the bed height, calculates a correction grid or matrix, and turns on leveling compensation. Specific behavior depends on configuration and type of bed leveling.\n M500 saves the bed leveling data to EEPROM. Use M501 to load it, M502 to clear it, and M503 to report it.\n M420 S&lt;bool&gt; can be used to enable/disable bed leveling. For example, M420 S1 must be used after M501 to enable the loaded mesh or matrix, and to re-enable leveling after G28, which disables leveling compensation.\n A “Level Bed” menu item can be added to the LCD with the LCD_BED_LEVELING option.\n\n\n//#define AUTO_BED_LEVELING_3POINT\n//#define AUTO_BED_LEVELING_LINEAR\n//#define AUTO_BED_LEVELING_BILINEAR\n//#define AUTO_BED_LEVELING_UBL\n//#define MESH_BED_LEVELING\n\n\nEnable just one type of Bed Leveling.\n\n\n AUTO_BED_LEVELING_3POINT probes three points in a triangle. The flat plane gives a transform matrix suitable to compensate for a flat but tilted bed.\n AUTO_BED_LEVELING_LINEAR probes the bed in a grid. A transform matrix is produced by least-squares method to compensate for a flat but tilted bed.\n AUTO_BED_LEVELING_BILINEAR probes the bed in a grid, with optional Catmull-Rom subdivision. The mesh data is used to adjust Z height across the bed using bilinear interpolation. Good for delta, large, or uneven beds.\n AUTO_BED_LEVELING_UBL (recommended) combines the features of 3-point, linear, bilinear, and mesh leveling. As with bilinear leveling, the mesh data generated by UBL is used to adjust Z height across the bed using bilinear interpolation. An LCD controller is currently required.\n MESH_BED_LEVELING provides a custom G29 command to measure the bed height at several grid points using a piece of paper or feeler gauge. See G29 for MBL for the full procedure. This type of leveling is only compatible with PROBE_MANUALLY.\n\n\n \nOnly AUTO_BED_LEVELING_BILINEAR and AUTO_BED_LEVELING_UBL support DELTA.\nOnly AUTO_BED_LEVELING_BILINEAR currently supports SCARA.\nMESH_BED_LEVELING is incompatible with Delta and SCARA.\n \n\nRestore after G28\n//#define RESTORE_LEVELING_AFTER_G28\n\n\nNormally G28 leaves leveling disabled on completion. Enable this option to have G28 restore the prior leveling state.\n\nDebug Leveling\n//#define DEBUG_LEVELING_FEATURE\n\n\nUse this option to enable extra debugging of homing and leveling. You can then use M111 S32 before issuing G28 and G29 V4 to get a detailed log of the process for diagnosis. This option is useful to figure out the cause of unexpected behaviors, or when reporting issues to the project.\n\nLeveling Fade Height\n#define ENABLE_LEVELING_FADE_HEIGHT\n\n\nAvailable with MESH_BED_LEVELING, AUTO_BED_LEVELING_BILINEAR, and AUTO_BED_LEVELING_UBL.\n\nThis option adds the Z parameter to M420 which sets a fade distance over which leveling will be gradually reduced. Above the given Z height, leveling compensation will no longer be applied.\n\nThis feature exists to prevent irregularities in the bed from propagating through the model’s entire height. Fading out leveling also reduces computational requirements and resonance from the Z axis above the fade height. For a well-aligned machine, this feature can improve print results.\n\nExample: To have leveling fade out over the first 10mm of layer printing use M420 Z10. If each layer is 0.2mm high, leveling compensation will be reduced by 1/50th (2%) after each layer. Above 10mm the machine will move without compensation.\n\nG26 Mesh Validation Pattern\n/**\n * Enable the G26 Mesh Validation Pattern tool.\n */\n#define G26_MESH_VALIDATION // Enable G26 mesh validation\n#if ENABLED(G26_MESH_VALIDATION)\n #define MESH_TEST_NOZZLE_SIZE 0.4 // (mm) Diameter of primary nozzle.\n #define MESH_TEST_LAYER_HEIGHT 0.2 // (mm) Default layer height for the G26 Mesh Validation Tool.\n #define MESH_TEST_HOTEND_TEMP 205.0 // (°C) Default nozzle temperature for the G26 Mesh Validation Tool.\n #define MESH_TEST_BED_TEMP 60.0 // (°C) Default bed temperature for the G26 Mesh Validation Tool.\n#endif\n\n\nWhen using any of the mesh-based leveling systems (1.1.7) you can activate G26_MESH_VALIDATION to print test patterns and fine-tune the mesh. See G26 Mesh Validation for full details. The G26 command accepts parameters for nozzle size, layer height, etc. The sub-options above specify the default values that will be applied for omitted parameters.\n\nLinear / Bilinear Options\n#define GRID_MAX_POINTS_X 3\n#define GRID_MAX_POINTS_Y GRID_MAX_POINTS_X\n\n\nThese options specify the default number of points to probe in each dimension during G29.\n\n#define LEFT_PROBE_BED_POSITION 15\n#define RIGHT_PROBE_BED_POSITION 145\n#define FRONT_PROBE_BED_POSITION 20\n#define BACK_PROBE_BED_POSITION 150\n\n\nThese settings specify the boundaries for probing with G29. This will most likely be a sub-section of the bed because probes are not usually able to reach every point that the nozzle can. Take account of the probe’s XY offsets when setting these boundaries.\n\n//#define PROBE_Y_FIRST\n\n\nEnable this option if probing should proceed in the Y dimension first instead of X first.\n\nBilinear Options\n\n//#define EXTRAPOLATE_BEYOND_GRID\n\n\nUsually the probed grid doesn’t extend all the way to the edges of the bed. So, outside the bounds of the probed grid, Z adjustment can take one of two approaches. Either the Z height can continue to raise/lower by the established tilt of the nearest grid box (best when most of the bed was probed), or it can follow the contour of the nearest edge (the default). Enable this option for extrapolation.\n\n//#define ABL_BILINEAR_SUBDIVISION\n#if ENABLED(ABL_BILINEAR_SUBDIVISION)\n // Number of subdivisions between probe points\n #define BILINEAR_SUBDIVISIONS 3\n#endif\n\n\nIf you have SRAM to spare, this option will multiply the resolution of the bilinear grid using the Catmull-Rom subdivision method. This option only applies to bilinear leveling. If the default value of 3 is too expensive, try 2 or 1. (In Marlin 1.1.1, the default grid will be stored in PROGMEM, as UBL now does.)\n\nUnified Bed Leveling Options\n\nProbe Points\n#define UBL_MESH_INSET 1 // Mesh inset margin on print area\n#define GRID_MAX_POINTS_X 10 // Don't use more than 15 points per axis, implementation limited.\n#define GRID_MAX_POINTS_Y GRID_MAX_POINTS_X\n#define UBL_PROBE_PT_1_X 39 // These set the probe locations for when UBL does a 3-Point leveling\n#define UBL_PROBE_PT_1_Y 180 // of the mesh.\n#define UBL_PROBE_PT_2_X 39\n#define UBL_PROBE_PT_2_Y 20\n#define UBL_PROBE_PT_3_X 180\n#define UBL_PROBE_PT_3_Y 20\n\n\nThese options specify the inset, grid, and 3-point triangle to use for UBL. Note that probe XY offsets and movement limits may constrain the probeable area of the bed.\n\nMesh Bed Leveling Options\n#define MESH_INSET 10 // Mesh inset margin on print area\n#define GRID_MAX_POINTS_X 3 // Don't use more than 7 points per axis, implementation limited.\n#define GRID_MAX_POINTS_Y GRID_MAX_POINTS_X\n\n//#define MESH_G28_REST_ORIGIN // After homing all axes ('G28' or 'G28 XYZ') rest Z at Z_MIN_POS\n\n\nThese options specify the number of points that will always be probed in each dimension during G29. The mesh inset is used to automatically calculate the probe boundaries. These can be set explicitly in Configuration_adv.h. MESH_G28_REST_ORIGIN moves the nozzle to rest at Z_MIN_POS when mesh probing is done. If Z is offset (e.g., due to home_offset or some other cause) this is intended to move Z to a good starting point, usually Z=0.\n\n3-Point Options\n\n#define ABL_PROBE_PT_1_X 15\n#define ABL_PROBE_PT_1_Y 180\n#define ABL_PROBE_PT_2_X 15\n#define ABL_PROBE_PT_2_Y 20\n#define ABL_PROBE_PT_3_X 170\n#define ABL_PROBE_PT_3_Y 20\n\n\nThese options specify the three points that will be probed during G29.\n\nLCD Bed Leveling\n\n#define LCD_BED_LEVELING\n\n\nLCD_BED_LEVELING adds a “Level Bed” menu to the LCD that starts a step-by-step guided leveling procedure that requires no probe. For Mesh Bed Leveling see G29 for MBL, and for PROBE_MANUALLY see G29 for ABL.\n\nAvailable with MESH_BED_LEVELING and PROBE_MANUALLY (all forms of Auto Bed Leveling). See the Configuration.h file for sub-options.\n\nCorner Leveling\n\n//#define LEVEL_BED_CORNERS\n\n\nAdd a menu item to move between bed corners for manual bed adjustment\n\nZ Probe End Script\n\n//#define Z_PROBE_END_SCRIPT \"G1 Z10 F12000\\nG1 X15 Y330\\nG1 Z0.5\\nG1 Z10\"\n\n\nA custom script to do at the very end of G29. If multiple commands are needed, divide them with \\n (the newline character).\n\nHoming Options\n\nBed Center at 0,0\n\n//#define BED_CENTER_AT_0_0\n\n\nEnable this option if the bed center is at X0 Y0. This setting affects the way automatic home positions (those not set with MANUAL_[XYZ]_POS) are calculated. This should always be enabled with DELTA.\n\nManual Home Position\n\n//#define MANUAL_X_HOME_POS 0\n//#define MANUAL_Y_HOME_POS 0\n//#define MANUAL_Z_HOME_POS 0 // Distance from nozzle to printbed after homing\n\n\nThese settings are used to override the home position. Leave them undefined for automatic settings. For DELTA Z home must be set to the top-most position.\n\nZ Safe Homing\n\n#define Z_SAFE_HOMING\n\n#if ENABLED(Z_SAFE_HOMING)\n #define Z_SAFE_HOMING_X_POINT ((X_MIN_POS + X_MAX_POS) / 2) // X point for Z homing when homing all axis (G28).\n #define Z_SAFE_HOMING_Y_POINT ((Y_MIN_POS + Y_MAX_POS) / 2) // Y point for Z homing when homing all axis (G28).\n#endif\n\n\nZ Safe Homing prevents Z from homing when the probe (or nozzle) is outside bed area by moving to a defined XY point (by default, the middle of the bed) before Z Homing when homing all axes with G28. As a side-effect, X and Y homing are required before Z homing. If stepper drivers time out, X and Y homing will be required again.\n\nEnable this option if a probe (not an endstop) is being used for Z homing. Z Safe Homing isn’t needed if a Z endstop is used for homing, but it may also be enabled just to have XY always move to some custom position after homing.\n\nHoming Speed\n\n// Homing speeds (mm/m)\n#define HOMING_FEEDRATE_XY (50*60)\n#define HOMING_FEEDRATE_Z (4*60)\n\n\nHoming speed for use in auto home and auto bed leveling. These values may be set to the fastest speeds your machine can achieve. Homing and probing speeds are constrained by the current max feedrate and max acceleration settings.\n\n \nSetting these values too high may result in reduced accuracy and/or skipped steps. Reducing acceleration may help to achieve higher top speeds.\n \n\n\n\nExtras 1\n\nEEPROM\n\n//#define EEPROM_SETTINGS\n\n\nCommands like M92 only change the settings in volatile memory, and these settings are lost when the machine is powered off. With this option enabled, Marlin uses the built-in EEPROM to preserve settings across reboots. Settings saved to EEPROM (with M500) are loaded automatically whenever the machine restarts (and in most setups, when connecting to a host), overriding the defaults set in the configuration files. This option is highly recommended, as it makes configurations easier to manage.\n\nThe EEPROM-related commands are:\n\n\n M500: Save all current settings to EEPROM.\n M501: Load all settings last saved to EEPROM.\n M502: Reset all settings to their default values (as set by Configuration.h)\n M503: Print the current settings (in RAM, not EEPROM)\n\n\nEEPROM Options\n//#define DISABLE_M503 // Saves ~2700 bytes of PROGMEM. Disable for release!\n#define EEPROM_CHITCHAT // Give feedback on EEPROM commands. Disable to save PROGMEM.\n\n\nThese EEPROM options should be left as they are, but for 128K and smaller boards they may be used to recover some program memory. Vendors are strongly discouraged from using DISABLE_M503.\n\n \nSettings that can be changed and saved to EEPROM are marked with . Options marked with can be changed from the LCD controller.\n \n\n \nWhen you change saveable settings in the configuration files and re-flash, the new values don’t take effect right away. They are still overridden by the saved values in EEPROM. To get your new default settings into the EEPROM, use M502 followed by M500.\n \n\nHost Keepalive\n\n#define HOST_KEEPALIVE_FEATURE // Disable this if your host doesn't like keepalive messages\n#define DEFAULT_KEEPALIVE_INTERVAL 2 // Number of seconds between \"busy\" messages. Set with M113.\n#define BUSY_WHILE_HEATING // Some hosts require \"busy\" messages even during heating\n\n\nWhen Host Keepalive is enabled Marlin will send a busy status message to the host every couple of seconds when it can’t accept commands. Disable if your host doesn’t like keepalive messages. Use DEFAULT_KEEPALIVE_INTERVAL for the default number of seconds between “busy” messages. Override with M113. Marlin 1.1.5 and up include the BUSY_WHILE_HEATING option for hosts that treat host keepalive as a strict busy protocol.\n\nFree Memory Watcher\n//#define M100_FREE_MEMORY_WATCHER\n\n\nUncomment to add the M100 Free Memory Watcher for debugging purposes.\n\nInch Units\n//#define INCH_MODE_SUPPORT\n\n\nThis option adds support for the G20 and G21 commands, allowing G-code to specify units in inches.\n\nTemperature Units\n//#define TEMPERATURE_UNITS_SUPPORT\n\n\nThis option adds support for M149 C, M149 K, and M149 F to set temperature units to Celsius, Kelvin, or Fahrenheit. Without this option all temperatures must be specified in Celsius units.\n\nLCD Material Presets \n\n#define PREHEAT_1_TEMP_HOTEND 180\n#define PREHEAT_1_TEMP_BED 70\n#define PREHEAT_1_FAN_SPEED 0 // Value from 0 to 255\n\n#define PREHEAT_2_TEMP_HOTEND 240\n#define PREHEAT_2_TEMP_BED 110\n#define PREHEAT_2_FAN_SPEED 0 // Value from 0 to 255\n\n\nThese are the default values for the Prepare &gt; Preheat LCD menu options. These values can be overridden using the M145 command or the Control &gt; Temperature &gt; Preheat Material X conf submenus.\n\nNozzle Park\n//#define NOZZLE_PARK_FEATURE\n#if ENABLED(NOZZLE_PARK_FEATURE)\n // Specify a park position as { X, Y, Z }\n #define NOZZLE_PARK_POINT { (X_MIN_POS + 10), (Y_MAX_POS - 10), 20 }\n#endif\n\n\nPark the nozzle at the given XYZ position on idle or G27.\n\nThe “P” parameter controls the action applied to the Z axis:\n\n\n P0 - (Default) If Z is below park Z raise the nozzle.\n P1 - Raise the nozzle always to Z-park height.\n P2 - Raise the nozzle by Z-park amount, limited to Z_MAX_POS.\n\n\nNozzle Clean\n//#define NOZZLE_CLEAN_FEATURE\n\n\nAdds the G12 command to perform a nozzle cleaning process. See Configuration.h for additional configuration options.\n\nPrint Job Timer\n#define PRINTJOB_TIMER_AUTOSTART\n\n\nAutomatically start and stop the print job timer when M104/M109/M190 commands are received. Also adds the following commands to control the timer:\n\n M75 - Start the print job timer.\n M76 - Pause the print job timer.\n M77 - Stop the print job timer.\n\n\nPrint Counter\n//#define PRINTCOUNTER\n\n\nWhen enabled Marlin will keep track of some print statistics such as:\n\n\n Total print jobs\n Total successful print jobs\n Total failed print jobs\n Total time printing\n\n\nThis information can be viewed by the M78 command.\n\nLCD Language\n\nUser Interface Language\n\n#define LCD_LANGUAGE en\n\n\nChoose your preferred language for the LCD controller here. Supported languages include:\n\n\n \n \n Code\n Language\n  \n Code\n Language\n  \n Code\n Language\n \n \n \n \n en\n English (Default)\n  \n an\n Aragonese\n  \n bg\n Bulgarian\n \n \n ca\n Catalan\n  \n cn\n Chinese\n  \n cz\n Czech\n \n \n de\n German\n  \n el\n Greek\n  \n el-gr\n Greek (Greece)\n \n \n es\n Spanish\n  \n eu\n Basque-Euskera\n  \n fi\n Finnish\n \n \n fr\n French\n  \n gl\n Galician\n  \n hr\n Croatian\n \n \n it\n Italian\n  \n kana\n Japanese\n  \n kana_utf8\n Japanese (UTF8)\n \n \n nl\n Dutch\n  \n pl\n Polish\n  \n pt\n Portuguese\n \n \n pt-br\n Portuguese (Brazilian)\n  \n pt-\n Portuguese (Brazilian UTF8)\n  \n pt_utf8\n Portuguese (UTF8)\n \n \n ru\n Russian\n  \n sk_utf8\n Slovak (UTF8)\n  \n tr\n Turkish\n \n \n uk\n Ukrainian\n  \n  \n  \n  \n  \n  \n \n \n\n\nSee language.h for the latest list of supported languages and their international language codes.\n\nHD44780 Character Set\n\n\n\n#define DISPLAY_CHARSET_HD44780 JAPANESE\n\n\nThis option applies only to character-based displays. Character-based displays (based on the Hitachi HD44780) provide an ASCII character set plus one of the following language extensions:\n\n\n JAPANESE … the most common\n WESTERN …. with more accented characters\n CYRILLIC … for the Russian language\n\n\nTo determine the language extension installed on your controller:\n\n\n Compile and upload with LCD_LANGUAGE set to ‘test’\n Click the controller to view the LCD menu\n The LCD will display Japanese, Western, or Cyrillic text\n\n\nSee LCD Language System for in-depth info on how the Marlin display system currently works.\n\n\n\nLCD Type\n//#define ULTRA_LCD // Character based\n//#define DOGLCD // Full graphics display\n\n\nThe base LCD Type is either character-based or graphical. Marlin will automatically set the correct one for your specific display, specified below. Unless your display is unsupported by Marlin, you can leave these options disabled.\n\nSD Card\n\n//#define SDSUPPORT // Enable SD Card Support in Hardware Console\n\n\nEnable to use SD printing, whether as part of an LCD controller or as a standalone SDCard slot.\n\n \nThe SDSUPPORT option must be enabled or SD printing will not be supported. It is no longer enabled automatically for LCD controllers with built-in SDCard slot.\n \n\nSPI Speed\n\n//#define SPI_SPEED SPI_HALF_SPEED\n//#define SPI_SPEED SPI_QUARTER_SPEED\n//#define SPI_SPEED SPI_EIGHTH_SPEED\n\n\nUncomment ONE of these options to use a slower SPI transfer speed. This is usually required if you’re getting volume init errors.\n\nEnable CRC\n\n//#define SD_CHECK_AND_RETRY\n\n\nUse CRC checks and retries on the SD communication.\n\n\n\nEncoder\n\nEncoder Resolution\n\n//#define ENCODER_PULSES_PER_STEP 1\n\n\nThis option overrides the default number of encoder pulses needed to produce one step. Should be increased for high-resolution encoders.\n\n//#define ENCODER_STEPS_PER_MENU_ITEM 5\n\n\nUse this option to override the number of step signals required to move between next/prev menu items.\n\nEncoder Direction\n\nTest your encoder’s behavior first with both of the following options disabled.\n\n\n Reversed Value Edit and Menu Nav? Enable REVERSE_ENCODER_DIRECTION.\n Reversed Menu Navigation only? Enable REVERSE_MENU_DIRECTION.\n Reversed Value Editing only? Enable BOTH options.\n\n\n//#define REVERSE_ENCODER_DIRECTION\n\n\nThis option reverses the encoder direction everywhere. Set if CLOCKWISE causes values to DECREASE.\n\n//#define REVERSE_MENU_DIRECTION\n\n\nThis option reverses the encoder direction for navigating LCD menus. If CLOCKWISE normally moves DOWN this makes it go UP. If CLOCKWISE normally moves UP this makes it go DOWN.\n\n//#define INDIVIDUAL_AXIS_HOMING_MENU\n\n\nAdd individual axis homing items (Home X, Home Y, and Home Z) to the LCD menu.\n\n\n\nSpeaker\n\n//#define SPEAKER\n\n\nBy default Marlin assumes you have a buzzer with a fixed frequency. If you have a speaker that can produce tones, enable it here.\n\n//#define LCD_FEEDBACK_FREQUENCY_DURATION_MS 100\n//#define LCD_FEEDBACK_FREQUENCY_HZ 1000\n\n\nThe duration and frequency for the UI feedback sound. Set these to 0 to disable audio feedback in the LCD menus. Test audio output with the G-code M300 S&lt;frequency Hz&gt; P&lt;duration ms&gt;\n\nLCD Controller\n\n\n\nMarlin includes support for several controllers. The two most popular controllers supported by Marlin are:\n\n\n REPRAP_DISCOUNT_SMART_CONTROLLER A 20 x 4 character-based LCD controller with click-wheel.\n REPRAP_DISCOUNT_FULL_GRAPHIC_SMART_CONTROLLER A monochrome 128 x 64 pixel-based LCD controller with click-wheel. Able to display simple bitmap graphics and up to 5 lines of text.\n\n\nMost other LCD controllers are variants of these. Enable just one of the following options for your specific controller:\n\nCharacter LCDs\n\n\n \n \n Option\n Description\n \n \n \n \n ULTIMAKERCONTROLLER\n The original Ultimaker Controller.\n \n \n ULTIPANEL\n ULTIPANEL as seen on Thingiverse.\n \n \n PANEL_ONE\n PanelOne from T3P3 (via RAMPS 1.4 AUX2/AUX3). A variant of ULTIMAKERCONTROLLER.\n \n \n REPRAP_DISCOUNT_SMART_CONTROLLER\n RepRapDiscount Smart Controller. Usually sold with a white PCB.\n \n \n G3D_PANEL\n Gadgets3D G3D LCD/SD Controller. Usually sold with a blue PCB.\n \n \n RIGIDBOT_PANEL\n RigidBot Panel V1.0.\n \n \n ANET_KEYPAD_LCD\n Anet Keypad LCD for the Anet A3\n \n \n\n\nGraphical LCDs\n\n\n \n \n Option\n Description\n \n \n \n \n CARTESIO_UI\n Cartesio UI.\n \n \n MAKRPANEL\n MaKr3d Makr-Panel with graphic controller and SD support.\n \n \n REPRAPWORLD_GRAPHICAL_LCD\n ReprapWorld Graphical LCD.\n \n \n VIKI2\n Panucatt Devices Viki 2.0.\n \n \n miniVIKI\n mini Viki with Graphic LCD.\n \n \n ELB_FULL_GRAPHIC_CONTROLLER\n Adafruit ST7565 Full Graphic Controller.\n \n \n REPRAP_DISCOUNT_FULL_GRAPHIC_SMART_CONTROLLER\n RepRapDiscount Full Graphic Smart Controller.\n \n \n MINIPANEL\n MakerLab Mini Panel with graphic controller and SD support.\n \n \n BQ_LCD_SMART_CONTROLLER\n BQ LCD Smart Controller shipped with the BQ Hephestos 2 and Witbox 2.\n \n \n ANET_FULL_GRAPHICS_LCD\n Anet Full Graphics LCD for the Anet A3\n \n \n\n\nKeypads\n\n\n \n \n Option\n Description\n \n \n \n \n REPRAPWORLD_KEYPAD\n RepRapWorld Keypad v1.1 Use REPRAPWORLD_KEYPAD_MOVE_STEP to set how much the robot should move on each keypress (e.g., 10mm per click).\n \n \n\n\nI2C Character LCDs\n\nThese controllers all require the LiquidCrystal_I2C library.\n\n\n \n \n Option\n Description\n \n \n \n \n RA_CONTROL_PANEL\n Elefu RA Board Control Panel\n \n \n LCD_I2C_SAINSMART_YWROBOT\n Sainsmart YWRobot LCM1602 LCD Display.\n \n \n LCM1602\n Generic LCM1602 LCD adapter\n \n \n LCD_I2C_PANELOLU2\n PANELOLU2 LCD with status LEDs, separate encoder and click inputs. The click input can either be directly connected to a pin (if BTN_ENC is defined) or read through I2C (with BTN_ENC undefined). Requires LiquidTWI2 library v1.2.3 or later.\n \n \n LCD_I2C_VIKI\n Panucatt VIKI LCD with status LEDs, integrated click &amp; L/R/U/D buttons, separate encoder inputs.\n \n \n SAV_3DLCD\n Shift register panels. 2 wire Non-latching LCD SR. See LCD configuration.\n \n \n\n\nI2C Graphical LCDs\n\nThese controllers all require the LiquidCrystal_I2C library.\n\n\n \n \n Option\n Description\n \n \n \n \n U8GLIB_SSD1306\n SSD1306 OLED full graphics generic display.\n \n \n SAV_3DGLCD\n SAV OLED LCD module support using either SSD1306 or SH1106 based LCD modules.\n \n \n OLED_PANEL_TINYBOY2\n TinyBoy2 128x64 OLED / Encoder Panel\n \n \n\n\nExtras 2\n\nFan PWM\n\n//#define FAST_PWM_FAN\n\n\nIncrease the FAN PWM frequency. Removes the PWM noise but increases heating in the FET/Arduino.\n\n//#define FAN_SOFT_PWM\n\n\nUse software PWM to drive the fan, as with the heaters. This uses a very low frequency which is not as annoying as with the hardware PWM. On the other hand, if this frequency is too low, you should also increment SOFT_PWM_SCALE.\n\n#define SOFT_PWM_SCALE 0\n\n\nIncrementing this by 1 will double the software PWM frequency, affecting heaters (and the fan if FAN_SOFT_PWM is enabled). However, control resolution will be halved for each increment; at zero value, there are 128 effective control positions.\n\n//#define SOFT_PWM_DITHER\n\n\nIf SOFT_PWM_SCALE is set to a value higher than 0, dithering can be used to mitigate the associated resolution loss. If enabled, some of the PWM cycles are stretched so on average the desired duty cycle is attained.\n\nTemperature Status LEDs\n\n//#define TEMP_STAT_LEDS\n\n\nTemperature status LEDs that display the hotend and bed temperature. If all hotend and bed temperature setpoint are &lt; 54C then the BLUE led is on. Otherwise the RED led is on. There is 1C hysteresis.\n\nPhoto Pin\n\n//#define PHOTOGRAPH_PIN 23\n\n\nM240 triggers a camera by emulating a Canon RC-1 Remote Data as described on this site.\n\nSkeinForge Arc Fix\n\n//#define SF_ARC_FIX\n\n\nFiles sliced with SkeinForge contain the wrong arc GCodes when using “Arc Point” as fillet procedure. This option works around that bug, but otherwise should be left off.\n\nExtras 3\n\nPaste Extruder\n\n// Support for the BariCUDA Paste Extruder.\n//#define BARICUDA\n\n\nMarlin includes support for the Baricuda Extruder for 3D Printing Sugar and Chocolate also hosted on GitHub. The feature adds the codes M126, M127, M128, and M129 for controlling the pump and valve of the Baricuda.\n\n\n\nRGB Color LEDs\n\nMarlin currently supplies two options for RGB-addressable color indicators. In both cases the color is set using M150 Rr Ug Bb to specify RGB components from 0 to 255.\n\n//define BlinkM/CyzRgb Support\n//#define BLINKM\n\n\nThe BLINKM board supplies the backlighting for some LCD controllers. Its color is set using I2C messages.\n\n//define PCA9632 PWM LED driver Support\n//#define PCA9632\n\n\nThe Philips PCA9632 is a common PWM LED driver, controlled (like BlinkM) using I2C.\n\n//#define RGB_LED\n//#define RGBW_LED\n#if ENABLED(RGB_LED) || ENABLED(RGBW_LED)\n #define RGB_LED_R_PIN 34\n #define RGB_LED_G_PIN 43\n #define RGB_LED_B_PIN 35\n #define RGB_LED_W_PIN -1\n#endif\n\n\nEnable support for an RGB(W) LED connected to 5V digital pins, or an RGB(W) Strip connected to MOSFETs controlled by digital pins. An inexpensive RGB LED can be used simply by assigning digital pins for each component. If the pins are able to do hardware PWM then a wide range of colors will be available. With simple digital pins only 7 colors are possible.\n\nAdds the M150 command to set the LED (or LED strip) color. If pins are PWM capable (e.g., 4, 5, 6, 11) then a range of luminance values can be set from 0 to 255.\n\n \nLED Strips require a MOFSET Chip between PWM lines and LEDs, as the Arduino cannot handle the current the LEDs will require. Failure to follow this precaution can destroy your Arduino!\n \n\nPrinter Event LEDs\n#if ENABLED(BLINKM) || ENABLED(RGB_LED) || ENABLED(RGBW_LED) || ENABLED(PCA9632)\n #define PRINTER_EVENT_LEDS\n#endif\n\n\nThis option causes the printer to give status feedback on the installed color LED, BLINKM, or PCA9632:\n\n Gradually change from blue to violet as the heated bed gets to target temp.\n Gradually change from violet to red as the hotend gets to temperature.\n Change to white to illuminate work surface.\n Change to green once print has finished.\n Turn off after the print has finished and the user has pushed a button.\n\n\nServos\n\n\n\nNumber of Servos\n\n#define NUM_SERVOS 1 // Servo index starts with 0 for M280 command\n\n\nThe total number of servos to enable for use. One common application for a servo is a Z bed probe consisting of an endstop switch mounted on a rotating arm. To use one of the servo connectors for this type of probe, set Z_ENDSTOP_SERVO_NR in the probe options above.\n\nServo Deactivation\n\n#define SERVO_DELAY 300\n\n\nDelay (in microseconds) before the next move will start, to give the servo time to reach its target angle. 300ms is a good value but you can try less delay. Specify a large enough delay so the servo has enough time to complete a full motion before deactivation.\n\n//#define DEACTIVATE_SERVOS_AFTER_MOVE\n\n\nWith this option servos are powered only during movement, then turned off to prevent jitter. We recommend enabling this option to keep electrical noise from active servos from interfering with other components. The high amperage generated by extruder motor wiring during movement can also induce movement in active servos. Leave this option enabled to avoid all such servo-related troubles.\n\nConfiguration_adv.h\n\nTemperature Options\n\nBang-Bang Bed Heating\n#if DISABLED(PIDTEMPBED)\n #define BED_CHECK_INTERVAL 5000 // ms between checks in bang-bang control\n #if ENABLED(BED_LIMIT_SWITCHING)\n #define BED_HYSTERESIS 2 // Only disable heating if T&gt;target+BED_HYSTERESIS and enable heating if T&gt;target-BED_HYSTERESIS\n #endif\n#endif\n\n\nThese sub-options can be used when the bed isn’t using PID heating. A “bang-bang” heating method will be used instead, simply checking against current temperature at regular intervals.\n\nThermal Protection Settings\nHotend Thermal Protection\n#if ENABLED(THERMAL_PROTECTION_HOTENDS)\n #define THERMAL_PROTECTION_PERIOD 40 // Seconds\n #define THERMAL_PROTECTION_HYSTERESIS 4 // Degrees Celsius\n #define WATCH_TEMP_PERIOD 20 // Seconds\n #define WATCH_TEMP_INCREASE 2 // Degrees Celsius\n#endif\n\n\nHot end thermal protection can be tuned with these sub-options.\n\nThe first two options deal with continuous thermal protection during an entire print job.\n\nThe second set of options applies to changes in target temperature. Whenever an M104 or M109 increases the target temperature the firmware will wait for the WATCH_TEMP_PERIOD to expire, and if the temperature hasn’t increased by WATCH_TEMP_INCREASE degrees, the machine is halted, requiring a hard reset. This test restarts with any M104/M109, but only if the current temperature is far enough below the target for a reliable test.\n\nIf you get false positives for “Heating failed” increase WATCH_TEMP_PERIOD and/or decrease WATCH_TEMP_INCREASE. (WATCH_TEMP_INCREASE should not be set below 2.)\n\nBed Thermal Protection\n#if ENABLED(THERMAL_PROTECTION_BED)\n #define THERMAL_PROTECTION_BED_PERIOD 20 // Seconds\n #define THERMAL_PROTECTION_BED_HYSTERESIS 2 // Degrees Celsius\n #define WATCH_BED_TEMP_PERIOD 60 // Seconds\n #define WATCH_BED_TEMP_INCREASE 2 // Degrees Celsius\n#endif\n\n\nHeated bed thermal protection can be tuned with these sub-options.\n\nThe first two options deal with continuous thermal protection during an entire print job.\n\nThe second set of options applies to changes in target temperature. Whenever an M140 or M190 increases the target temperature the firmware will wait for the WATCH_BED_TEMP_PERIOD to expire, and if the temperature hasn’t increased by WATCH_BED_TEMP_INCREASE degrees, the machine is halted, requiring a hard reset. This test restarts with any M140/M190, but only if the current temperature is far enough below the target for a reliable test.\n\nIf you get too many “Heating failed” errors, increase WATCH_BED_TEMP_PERIOD and/or decrease WATCH_BED_TEMP_INCREASE. (WATCH_BED_TEMP_INCREASE should not be set below 2.)\n\nPID Extrusion Scaling\n#if ENABLED(PIDTEMP)\n // this adds an experimental additional term to the heating power, proportional to the extrusion speed.\n // if Kc is chosen well, the additional required power due to increased melting should be compensated.\n //#define PID_EXTRUSION_SCALING\n #if ENABLED(PID_EXTRUSION_SCALING)\n #define DEFAULT_Kc (100) //heating power=Kc*(e_speed)\n #define LPQ_MAX_LEN 50\n #endif\n#endif\n\n\nThis option further improves hotend temperature control by accounting for the extra heat energy consumed by cold filament entering the hotend melt chamber. If material enters the hotend more quickly, then more heat will need to be added to maintain energy balance. This option adds a scaling factor that must be tuned for your setup and material.\n\nExtrusion scaling keeps a circular buffer of forward E movements done at each temperature measurement which acts to delay the applied factor and allow for heat dissipation. The size of this queue during printing is set by M301 L, limited by LPQ_MAX_LEN.\n\n \nYour M301 C M301 L values are saved to EEPROM when EEPROM_SETTINGS is enabled.\n \n\nAutomatic Temperature\n#define AUTOTEMP\n#if ENABLED(AUTOTEMP)\n #define AUTOTEMP_OLDWEIGHT 0.98\n#endif\n\n\nWith Automatic Temperature the hotend target temperature is calculated by all the buffered lines of gcode. The maximum buffered steps/sec of the extruder motor is called “se”.\nStart autotemp mode with M109 F&lt;factor&gt; S&lt;mintemp&gt; B&lt;maxtemp&gt;, giving a range of temperatures. The target temperature is set to mintemp + factor * se[steps/sec] and is limited by\nmintemp and maxtemp. Turn this off by executing M109 without F. If the temperature is set to a value below mintemp (e.g., by M104) autotemp will not be applied.\n\nExample: Try M109 S215 B260 F1 in your start.gcode to set a minimum temperature of 215 when idle, which will boost up to 260 as extrusion increases in speed.\n\nTemperature Report ADC\n//#define SHOW_TEMP_ADC_VALUES\n\n\nEnable this option to have M105 and automatic temperature reports include raw ADC values from the temperature sensors.\n\nHigh Temperature Thermistors\n//#define MAX_CONSECUTIVE_LOW_TEMPERATURE_ERROR_ALLOWED 0\n\n\nHigh temperature thermistors may give aberrant readings. If this is an issue, use this option to set the maximum number of consecutive low temperature errors that can occur before Min Temp Error is triggered. If you require a value over 10, this could indicate a problem.\n//#define MILLISECONDS_PREHEAT_TIME 0\n\n\nHigh Temperature Thermistors tend to give poor readings at ambient and lower temperatures. Until they reach a sufficient temperature, these sensors usually return the lowest raw value, and this will cause a Min Temp Error.\n\nTo solve this issue, this option sets the number of milliseconds a hotend will preheat before Marlin starts to check the temperature. Set a delay sufficient to reach a temperature your sensor can reliably read. Lower values are better and safer. If you require a value over 30000, this could indicate a problem.\n\nAD595\n#define TEMP_SENSOR_AD595_OFFSET 0.0\n#define TEMP_SENSOR_AD595_GAIN 1.0\n\n\nThese defines help to calibrate the AD595 sensor in case you get wrong temperature measurements. The final reading is derived from measuredTemp * TEMP_SENSOR_AD595_GAIN + TEMP_SENSOR_AD595_OFFSET.\n\nExtruder Runout Prevention\n//#define EXTRUDER_RUNOUT_PREVENT\n#if ENABLED(EXTRUDER_RUNOUT_PREVENT)\n #define EXTRUDER_RUNOUT_MINTEMP 190\n #define EXTRUDER_RUNOUT_SECONDS 30\n #define EXTRUDER_RUNOUT_SPEED 1500 // mm/m\n #define EXTRUDER_RUNOUT_EXTRUDE 5 // mm\n#endif\n\n\nWhen the machine is idle and the temperature over a given value, Marlin can extrude a short length of filament every couple of seconds.\n\nCooling Fans\nCooling fans are needed on 3D printers to keep components cool and prevent failure.\n\nController Fan\n//#define USE_CONTROLLER_FAN\n#if ENABLED(USE_CONTROLLER_FAN)\n //#define CONTROLLER_FAN_PIN FAN1_PIN // Set a custom pin for the controller fan\n #define CONTROLLERFAN_SECS 60 // Duration in seconds for the fan to run after all motors are disabled\n #define CONTROLLERFAN_SPEED 255 // 255 == full speed\n#endif\n\n\nA controller fan is useful to cool down the stepper drivers and MOSFETs. When stepper drivers reach a certain temperature they’ll turn off, either stuttering or stopping. With this option enabled the fan will turn on automatically whenever any steppers are enabled and turn off after a set period when all steppers are turned off.\n\nPWM Fans Kickstart\n//#define FAN_KICKSTART_TIME 100\n\n\nWhen PWM fans are set to low speed, they may need a higher-energy kickstart first to get moving. Once up to speed the fan can drop back to the set speed. This option specifies the kickstart duration in milliseconds. This option doesn’t work with the software PWM fan on Sanguinololu.\n\nPWM Fans Minimum Speed\n//#define FAN_MIN_PWM 50\n\n\nThis option can be defined to set the minimum PWM speed (1-255) required to keep the PWM fans moving. Fan speeds set by M106 will be scaled to the reduced range above this minimum.\n\nExtruder Auto-Cooling Fans\n#define E0_AUTO_FAN_PIN -1\n#define E1_AUTO_FAN_PIN -1\n#define E2_AUTO_FAN_PIN -1\n#define E3_AUTO_FAN_PIN -1\n#define E4_AUTO_FAN_PIN -1\n#define EXTRUDER_AUTO_FAN_TEMPERATURE 50\n#define EXTRUDER_AUTO_FAN_SPEED 255 // == full speed\n\n\nExtruder auto fans turn on whenever their extruder temperatures go above EXTRUDER_AUTO_FAN_TEMPERATURE. Your board’s pins file already specifies the recommended pins. Override those here or set to -1 to disable the fans completely.\n\nMultiple extruders can be assigned to the same pin in which case the fan will turn on when any selected extruder is above the threshold.\n\nPart-Cooling Fan Multiplexer\n#define FANMUX0_PIN -1\n#define FANMUX1_PIN -1\n#define FANMUX2_PIN -1\n\n\nThis feature allows you to digitally multiplex the fan output. The multiplexer is automatically switched at tool-change. To enable, just assign one or more FANMUX[012]_PIN values for up to 2, 4, or 8 multiplexed fans.\n\nCase Light\n//#define CASE_LIGHT_ENABLE\n#if ENABLED(CASE_LIGHT_ENABLE)\n //#define CASE_LIGHT_PIN 4 // Override the default pin if needed\n #define INVERT_CASE_LIGHT false // Set true if Case Light is ON when pin is LOW\n #define CASE_LIGHT_DEFAULT_ON true // Set default power-up state on\n #define CASE_LIGHT_DEFAULT_BRIGHTNESS 105 // Set default power-up brightness (0-255, requires PWM pin)\n //#define MENU_ITEM_CASE_LIGHT // Add a Case Light option to the LCD main menu\n#endif\n\n\nEnable this option for a firmware-controlled digital or PWM case light.\n\nEndstops Always On\n//#define ENDSTOPS_ALWAYS_ON_DEFAULT\n\n\nEnable this option to keep the endstops on (by default) even when not homing. Override at any time with M120, M121.\n\nZ Late Enable\n//#define Z_LATE_ENABLE\n\n\nWith this option is active, the Z steppers will only turn on at the last moment before they move. This option may be needed if your Z driver tends to overheat. Not compatible with Core kinematics.\n\nDual Steppers / Dual Endstops\n//#define X_DUAL_STEPPER_DRIVERS\n#if ENABLED(X_DUAL_STEPPER_DRIVERS)\n #define INVERT_X2_VS_X_DIR true // Set 'true' if X motors should rotate in opposite directions\n //#define X_DUAL_ENDSTOPS\n #if ENABLED(X_DUAL_ENDSTOPS)\n #define X2_USE_ENDSTOP _XMAX_\n #define X_DUAL_ENDSTOPS_ADJUSTMENT 0\n #endif\n#endif\n\n//#define Y_DUAL_STEPPER_DRIVERS\n#if ENABLED(Y_DUAL_STEPPER_DRIVERS)\n #define INVERT_Y2_VS_Y_DIR true // Set 'true' if Y motors should rotate in opposite directions\n //#define Y_DUAL_ENDSTOPS\n #if ENABLED(Y_DUAL_ENDSTOPS)\n #define Y2_USE_ENDSTOP _YMAX_\n #define Y_DUAL_ENDSTOPS_ADJUSTMENT 0\n #endif\n#endif\n\n//#define Z_DUAL_STEPPER_DRIVERS\n#if ENABLED(Z_DUAL_STEPPER_DRIVERS)\n //#define Z_DUAL_ENDSTOPS\n #if ENABLED(Z_DUAL_ENDSTOPS)\n #define Z2_USE_ENDSTOP _XMAX_\n #define Z_DUAL_ENDSTOPS_ADJUSTMENT 0\n #endif\n#endif\n\n\nThese options allow you to use extra E drivers to drive a second motor for X, Y, and/or Z axes.\n\nSet X_DUAL_STEPPER_DRIVERS to use a second X motor. If the X motors need to spin in opposite directions set INVERT_X2_VS_X_DIR to true. If the second motor has its own endstop set X_DUAL_ENDSTOPS. (This can adjust for “racking.”) Use X2_USE_ENDSTOP to set the endstop plug that should be used for the second endstop. Extra endstops will appear in the output of ‘M119’.\n\nIf the two X axes aren’t perfectly aligned, use X_DUAL_ENDSTOP_ADJUSTMENT to adjust for the difference. This offset is applied to the X2 motor after homing with G28. The dual endstop offsets can be set at runtime with M666 X[offset] Y[offset] Z[offset].\n\nDual X Carriage\n//#define DUAL_X_CARRIAGE\n#if ENABLED(DUAL_X_CARRIAGE)\n #define X2_MIN_POS 80 // Minimum X to ensure that X-carriage T1 doesn't hit parked X-carriage T0\n #define X2_MAX_POS 353 // Maximum to the distance between toolheads when both heads are homed\n #define X2_HOME_DIR 1 // The second X-carriage always homes to the max endstop position\n #define X2_HOME_POS X2_MAX_POS // Default home position is the maximum carriage position\n\n // Default power-up mode. Set at runtime with `M605 S[mode]`.\n #define DEFAULT_DUAL_X_CARRIAGE_MODE DXC_FULL_CONTROL_MODE\n\n // Default settings in Auto-park Mode\n #define TOOLCHANGE_PARK_ZLIFT 0.2 // (mm) Amount to raise Z axis when parking\n #define TOOLCHANGE_UNPARK_ZLIFT 1 // (mm) Amount to raise Z axis when unparking\n\n // Default X offset in Duplication Mode (typically set to half print bed width)\n #define DEFAULT_DUPLICATION_X_OFFSET 100\n#endif\n\n\nEnable this option if you have Dual X-Carriages that move independently. The Dual X-Carriage design allows the inactive extruder to be parked, which keeps ooze from contaminating the print, reduces the weight of each carriage, and enables faster printing speeds. With this option simply connect the X2 stepper to the first unused E plug.\n\nIn a Dual X-Carriage setup the first x-carriage (T0) homes to the minimum endstop, while the second x-carriage (T1) homes to the maximum endstop.\n\nWith Dual X-Carriage the HOTEND_OFFSET_X setting for T1 overrides X2_HOME_POS. Use M218 T1 X[homepos] to set a custom X2 home position, and M218 T1 X0 to use X2_HOME_POS. This offset can be saved to EEPROM with M500.\n\nIn your slicer, be sure to set the second extruder X-offset to 0.\n\nDual X-Carriage has three different movement modes, set with M605 S[mode]:\n\n\n Mode 0: Full Control Mode. (M605 S1) Slicers that fully support dual x-carriages can use this mode for optimal travel results.\n Mode 1: Auto-park Mode. (M605 S1) The firmware automatically parks/unparks the carriages on tool-change. No slicer support is required. (M605 S1)\n Mode 2: Duplication Mode. (M605 S2 X[offs] R[temp]) The firmware will transparently make the second x-carriage and extruder copy all actions of the first x-carriage. This allows the printer to print 2 arbitrary items at once. (The 2nd extruder’s X and temp offsets are set using: M605 S2 X[offs] R[offs].)\n\n\nTODO Options…\n// Activate a solenoid on the active extruder with M380. Disable all with M381.\n// Define SOL0_PIN, SOL1_PIN, etc., for each extruder that has a solenoid.\n//#define EXT_SOLENOID\n\n// Homing hits each endstop, retracts by these distances, then does a slower bump.\n#define X_HOME_BUMP_MM 5\n#define Y_HOME_BUMP_MM 5\n#define Z_HOME_BUMP_MM 2\n#define HOMING_BUMP_DIVISOR { 2, 2, 4 } // Re-Bump Speed Divisor (Divides the Homing Feedrate)\n//#define QUICK_HOME // If homing includes X and Y, do a diagonal move initially\n\n// When G28 is called, this option will make Y home before X\n//#define HOME_Y_BEFORE_X\n\n#define AXIS_RELATIVE_MODES {false, false, false, false}\n\n// Allow duplication mode with a basic dual-nozzle extruder\n//#define DUAL_NOZZLE_DUPLICATION_MODE\n\n// By default pololu step drivers require an active high signal. However, some high power drivers require an active low signal as step.\n#define INVERT_X_STEP_PIN false\n#define INVERT_Y_STEP_PIN false\n#define INVERT_Z_STEP_PIN false\n#define INVERT_E_STEP_PIN false\n\n// Default stepper release if idle. Set to 0 to deactivate.\n// Steppers will shut down DEFAULT_STEPPER_DEACTIVE_TIME seconds after the last move when DISABLE_INACTIVE_? is true.\n// Time can be set by M18 and M84.\n#define DEFAULT_STEPPER_DEACTIVE_TIME 120\n#define DISABLE_INACTIVE_X true\n#define DISABLE_INACTIVE_Y true\n#define DISABLE_INACTIVE_Z true // set to false if the nozzle will fall down on your printed part when print has finished.\n#define DISABLE_INACTIVE_E true\n\n#define DEFAULT_MINIMUMFEEDRATE 0.0 // minimum feedrate\n#define DEFAULT_MINTRAVELFEEDRATE 0.0\n\n//#define HOME_AFTER_DEACTIVATE // Require rehoming after steppers are deactivated\n\n#if ENABLED(ULTIPANEL)\n #define MANUAL_FEEDRATE {50*60, 50*60, 4*60, 60} // Feedrates for manual moves along X, Y, Z, E from panel\n #define ULTIPANEL_FEEDMULTIPLY // Comment to disable setting feedrate multiplier via encoder\n#endif\n\n// minimum time in microseconds that a movement needs to take if the buffer is emptied.\n#define DEFAULT_MINSEGMENTTIME 20000\n\n// If defined the movements slow down when the look ahead buffer is only half full\n#define SLOWDOWN\n\n// Frequency limit\n// See nophead's blog for more info\n// Not working O\n//#define XY_FREQUENCY_LIMIT 15\n\n// Minimum planner junction speed. Sets the default minimum speed the planner plans for at the end\n// of the buffer and all stops. This should not be much greater than zero and should only be changed\n// if unwanted behavior is observed on a user's machine when running at very slow speeds.\n#define MINIMUM_PLANNER_SPEED 0.05 // (mm/sec)\n\n// Microstep setting (Only functional when stepper driver microstep pins are connected to MCU.\n#define MICROSTEP_MODES {16,16,16,16,16} // [1,2,4,8,16]\n\n/**\n * Some boards have a means of setting the stepper motor current via firmware.\n *\n * The power on motor currents are set by:\n * PWM_MOTOR_CURRENT - used by MINIRAMBO &amp; ULTIMAIN_2\n * known compatible chips: A4982\n * DIGIPOT_MOTOR_CURRENT - used by BQ_ZUM_MEGA_3D, RAMBO &amp; SCOOVO_X9H\n * known compatible chips: AD5206\n * DAC_MOTOR_CURRENT_DEFAULT - used by PRINTRBOARD_REVF &amp; RIGIDBOARD_V2\n * known compatible chips: MCP4728\n * DIGIPOT_I2C_MOTOR_CURRENTS - used by 5DPRINT, AZTEEG_X3_PRO, MIGHTYBOARD_REVE\n * known compatible chips: MCP4451, MCP4018\n *\n * Motor currents can also be set by M907 - M910 and by the LCD.\n * M907 - applies to all.\n * M908 - BQ_ZUM_MEGA_3D, RAMBO, PRINTRBOARD_REVF, RIGIDBOARD_V2 &amp; SCOOVO_X9H\n * M909, M910 &amp; LCD - only PRINTRBOARD_REVF &amp; RIGIDBOARD_V2\n */\n//#define PWM_MOTOR_CURRENT { 1300, 1300, 1250 } // Values in milliamps\n//#define DIGIPOT_MOTOR_CURRENT { 135,135,135,135,135 } // Values 0-255 (RAMBO 135 = ~0.75A, 185 = ~1A)\n//#define DAC_MOTOR_CURRENT_DEFAULT { 70, 80, 90, 80 } // Default drive percent - X, Y, Z, E axis\n\n// Use an I2C based DIGIPOT (e.g., Azteeg X3 Pro)\n//#define DIGIPOT_I2C\n#if ENABLED(DIGIPOT_I2C) &amp;&amp; !defined(DIGIPOT_I2C_ADDRESS_A)\n /**\n * Common slave addresses:\n *\n * A (A shifted) B (B shifted) IC\n * Smoothie 0x2C (0x58) 0x2D (0x5A) MCP4451\n * AZTEEG_X3_PRO 0x2C (0x58) 0x2E (0x5C) MCP4451\n * MIGHTYBOARD_REVE 0x2F (0x5E) MCP4018\n */\n #define DIGIPOT_I2C_ADDRESS_A 0x2C // unshifted slave address for first DIGIPOT\n #define DIGIPOT_I2C_ADDRESS_B 0x2D // unshifted slave address for second DIGIPOT\n#endif\n\n//#define DIGIPOT_MCP4018 // Requires library from https://github.com/stawel/SlowSoftI2CMaster\n#define DIGIPOT_I2C_NUM_CHANNELS 8 // 5DPRINT: 4 AZTEEG_X3_PRO: 8\n// Actual motor currents in Amps, need as many here as DIGIPOT_I2C_NUM_CHANNELS\n#define DIGIPOT_I2C_MOTOR_CURRENTS { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 } // AZTEEG_X3_PRO\n\n//===========================================================================\n//=============================Additional Features===========================\n//===========================================================================\n\n#define ENCODER_RATE_MULTIPLIER // If defined, certain menu edit operations automatically multiply the steps when the encoder is moved quickly\n#define ENCODER_10X_STEPS_PER_SEC 75 // If the encoder steps per sec exceeds this value, multiply steps moved x10 to quickly advance the value\n#define ENCODER_100X_STEPS_PER_SEC 160 // If the encoder steps per sec exceeds this value, multiply steps moved x100 to really quickly advance the value\n\n//#define CHDK 4 //Pin for triggering CHDK to take a picture see how to use it here http://captain-slow.dk/2014/03/09/3d-printing-timelapses/\n#define CHDK_DELAY 50 //How long in ms the pin should stay HIGH before going LOW again\n\n// Include a page of printer information in the LCD Main Menu\n//#define LCD_INFO_MENU\n\n// Scroll a longer status message into view\n//#define STATUS_MESSAGE_SCROLLING\n\n// On the Info Screen, display XY with one decimal place when possible\n//#define LCD_DECIMAL_SMALL_XY\n\n// The timeout (in ms) to return to the status screen from sub-menus\n//#define LCD_TIMEOUT_TO_STATUS 15000\n\n\n\nSD Card Extras\nThe options listed below help to fix, improve, and optimize SD Card performance.\n\nSD Detect Inverted\n #define SD_DETECT_INVERTED\n\n\nSome RAMPS and other boards don’t detect when an SD card is inserted. You can work around this by connecting a push button or single throw switch to the pin defined as SD_DETECT_PIN in your board’s pins definitions. This setting should be disabled unless you are using a push button, pulling the pin to ground. Note: This option is forced off for most LCD controllers (all ULTIPANEL except ELB_FULL_GRAPHIC_CONTROLLER).\n\nSD Finished Stepper Release\n#define SD_FINISHED_STEPPERRELEASE true // Disable steppers when SD Print is finished\n#define SD_FINISHED_RELEASECOMMAND \"M84 X Y Z E\" // You might want to keep the z enabled so your bed stays in place.\n\n\n\nSD Menu Autostart\n//#define MENU_ADDAUTOSTART // Add an option in the menu to run all auto#.g files\n\n\n\nSD Card Sorting\nRecent First\n#define SDCARD_RATHERRECENTFIRST\n\n\nReverse SD sort to show “more recent” files first, according to the card’s FAT. Since the FAT gets out of order with usage, SDCARD_SORT_ALPHA is recommended.\n\nAlpha Sort\n//#define SDCARD_SORT_ALPHA\n\n// SD Card Sorting options\n#if ENABLED(SDCARD_SORT_ALPHA)\n #define SDSORT_LIMIT 40 // Maximum number of sorted items (10-256). Costs 27 bytes each.\n #define FOLDER_SORTING -1 // -1=above 0=none 1=below\n #define SDSORT_GCODE false // Allow turning sorting on/off with LCD and M34 g-code.\n #define SDSORT_USES_RAM false // Pre-allocate a static array for faster pre-sorting.\n #define SDSORT_USES_STACK false // Prefer the stack for pre-sorting to give back some SRAM. (Negated by next 2 options.)\n #define SDSORT_CACHE_NAMES false // Keep sorted items in RAM longer for speedy performance. Most expensive option.\n #define SDSORT_DYNAMIC_RAM false // Use dynamic allocation (within SD menus). Least expensive option. Set SDSORT_LIMIT before use!\n #define SDSORT_CACHE_VFATS 2 // Maximum number of 13-byte VFAT entries to use for sorting.\n // Note: Only affects SCROLL_LONG_FILENAMES with SDSORT_CACHE_NAMES but not SDSORT_DYNAMIC_RAM.\n#endif\n\n\nWith this option enabled, items on SD cards will be sorted by name for easier navigation.\n\nBy default…\n\n\n Use the slowest -but safest- method for sorting.\n Folders are sorted to the top.\n The sort key is statically allocated.\n No added G-code (M34) support.\n 40 item sorting limit. (Items after the first 40 are unsorted.)\n\n\nSD sorting uses static allocation (as set by SDSORT_LIMIT), allowing the compiler to calculate the worst-case usage and throw an error if the SRAM limit is exceeded.\n\n\n SDSORT_USES_RAM provides faster sorting via a static directory buffer.\n SDSORT_USES_STACK does the same, but uses a local stack-based buffer.\n SDSORT_CACHE_NAMES will retain the sorted file listing in RAM. (Expensive!)\n SDSORT_DYNAMIC_RAM only uses RAM when the SD menu is visible. (Use with caution!)\n\n\nProgress Bar (character LCD)\n//#define LCD_PROGRESS_BAR\n#if ENABLED(LCD_PROGRESS_BAR)\n #define PROGRESS_BAR_BAR_TIME 2000 // Amount of time (ms) to show the progress bar\n #define PROGRESS_BAR_MSG_TIME 3000 // Amount of time (ms) to show the status message\n #define PROGRESS_MSG_EXPIRE 0 // Amount of time (ms) to retain the status message (0=forever)\n //#define PROGRESS_MSG_ONCE // Show messages for MSG_TIME then hide them\n //#define LCD_PROGRESS_BAR_TEST // Add a menu item to test the progress bar.\n#endif\n\n\nShow a progress bar on HD44780 LCDs for SD printing. Sub-options determine how long to show the progress bar and status message, how long to retain the status message, and whether to include a progress bar test in the Debug menu.\n\nSet Print Progress\n//#define LCD_SET_PROGRESS_MANUALLY\n\n\nAdd an M73 G-code to set the current percentage.\n\nLong Filename Host Support\n//#define LONG_FILENAME_HOST_SUPPORT\n\n\nAllow hosts to request long names for files and folders with M33 [path].\n\nScroll Long Filenames\n//#define SCROLL_LONG_FILENAMES\n\n\nEnable this option to scroll long filenames in the SD card menu.\n\nAbort on Endstop Hit\n//#define SD_ABORT_ON_ENDSTOP_HIT\n\n\nAdd an option for the firmware to abort SD printing if any endstop is triggered. Turn on with M540 S1 (or from the LCD menu) and make sure endstops are enabled (M120) during SD printing.\n\nReprint Last File\n//#define SD_REPRINT_LAST_SELECTED_FILE\n\n\nThis option makes it easier to print the same SD Card file again. Whenever an SD print completes the LCD Menu will open with the same file selected. From there you can click to start a new print, or you can navigate elsewhere.\n\nGraphical Display Extras\n#if ENABLED(DOGLCD)\n #define XYZ_HOLLOW_FRAME // Enable to save many cycles by drawing a hollow frame on the Info Screen\n #define MENU_HOLLOW_FRAME // Enable to save many cycles by drawing a hollow frame on Menu Screens\n //#define USE_BIG_EDIT_FONT // A bigger font is available for edit items. Costs 3120 bytes of PROGMEM.\n // Western only. Not available for Cyrillic, Kana, Turkish, Greek, or Chinese.\n //#define USE_SMALL_INFOFONT // A smaller font may be used on the Info Screen. Costs 2300 bytes of PROGMEM.\n // Western only. Not available for Cyrillic, Kana, Turkish, Greek, or Chinese.\n //#define DOGM_SPI_DELAY_US 5 // Enable this option and reduce the value to optimize screen updates.\n // The normal delay is 10µs. Use the lowest value that still gives a reliable display.\n#endif\n\n\nUse the optimizations here to improve printing performance, which can be adversely affected by graphical display drawing, especially when doing several short moves, and when printing on DELTA and SCARA machines.\n\nSome of these options may result in the display lagging behind controller events, as there is a trade-off between reliable printing performance versus fast display updates.\n\nWatchdog\n#define USE_WATCHDOG\n\n\nThe hardware watchdog should reset the microcontroller, disabling all outputs, in case the firmware gets stuck and doesn’t do temperature regulation.\n\nWatchdog Manual Reset\n#if ENABLED(USE_WATCHDOG)\n //#define WATCHDOG_RESET_MANUAL\n#endif\n\n\nIf you have a watchdog reboot in an ATmega2560 the device can hang forever, as a watchdog reset will leave the watchdog on. The WATCHDOG_RESET_MANUAL option works around this by eschewing the hardware reset. However, this feature is unsafe because it only works if interrupts are disabled, and the code could hang in an interrupt routine with interrupts disabled.\n\nBabystepping\n//#define BABYSTEPPING\n#if ENABLED(BABYSTEPPING)\n //#define BABYSTEP_XY // Also enable X/Y Babystepping. Not supported on DELTA!\n #define BABYSTEP_INVERT_Z false // Change if Z babysteps should go the other way\n #define BABYSTEP_MULTIPLICATOR 1 // Babysteps are very small. Increase for faster motion.\n //#define BABYSTEP_ZPROBE_OFFSET // Enable to combine M851 and Babystepping\n //#define DOUBLECLICK_FOR_Z_BABYSTEPPING // Double-click on the Status Screen for Z Babystepping.\n #define DOUBLECLICK_MAX_INTERVAL 1250 // Maximum interval between clicks, in milliseconds.\n // Note: Extra time may be added to mitigate controller latency.\n //#define BABYSTEP_ZPROBE_GFX_OVERLAY // Enable graphical overlay on Z-offset editor\n //#define BABYSTEP_ZPROBE_GFX_REVERSE // Reverses the direction of the CW/CCW indicators\n#endif\n\n\nBabystepping enables M290 and LCD menu items to move the axes by tiny increments without changing the current position values. This feature is used primarily to adjust the Z axis in the first layer of a print in real-time. Warning: Does not respect endstops!\n\nLinear Advance\n//#define LIN_ADVANCE\n\n#if ENABLED(LIN_ADVANCE)\n #define LIN_ADVANCE_K 75\n #define LIN_ADVANCE_E_D_RATIO 0 // The calculated ratio (or 0) according to the formula W * H / ((D / 2) ^ 2 * PI)\n // Example: 0.4 * 0.2 / ((1.75 / 2) ^ 2 * PI) = 0.033260135\n#endif\n\n\nThis feature allows Marlin to use linear pressure control for print extrusion, to eliminate ooze, improve corners, etc. See Configuration_adv.h and the Linear Advance page for more complete documentation.\n\nDelta / Scara Limits\n#if ENABLED(DELTA) &amp;&amp; !defined(DELTA_PROBEABLE_RADIUS)\n #define DELTA_PROBEABLE_RADIUS DELTA_PRINTABLE_RADIUS\n#elif IS_SCARA &amp;&amp; !defined(SCARA_PRINTABLE_RADIUS)\n #define SCARA_PRINTABLE_RADIUS (SCARA_LINKAGE_1 + SCARA_LINKAGE_2)\n#endif\n\n\n\nCustom Mesh Bounds\n#if ENABLED(MESH_BED_LEVELING) || ENABLED(AUTO_BED_LEVELING_UBL)\n // Override the mesh area if the automatic (max) area is too large\n //#define MESH_MIN_X MESH_INSET\n //#define MESH_MIN_Y MESH_INSET\n //#define MESH_MAX_X X_BED_SIZE - (MESH_INSET)\n //#define MESH_MAX_Y Y_BED_SIZE - (MESH_INSET)\n#endif\n\n\n\nEnhanced G-code\nG2/G3 Arc\n//\n// G2/G3 Arc Support\n//\n#define ARC_SUPPORT // Disable this feature to save ~3226 bytes\n#if ENABLED(ARC_SUPPORT)\n #define MM_PER_ARC_SEGMENT 1 // Length of each arc segment\n #define N_ARC_CORRECTION 25 // Number of intertpolated segments between corrections\n //#define ARC_P_CIRCLES // Enable the 'P' parameter to specify complete circles\n //#define CNC_WORKSPACE_PLANES // Allow G2/G3 to operate in XY, ZX, or YZ planes\n#endif\n\n\nG5 Bezier Curve\n//#define BEZIER_CURVE_SUPPORT\n\n\nSupport for G5 with XYZE destination and IJPQ offsets. Requires ~2666 bytes.\n\nG38.2/G38.3 Probe Target\n//#define G38_PROBE_TARGET\n#if ENABLED(G38_PROBE_TARGET)\n #define G38_MINIMUM_MOVE 0.0275 // (mm) Minimum distance that will produce a move\n#endif\n\n\nAdd commands G38.2 and G38.3 to probe towards target. Enable PROBE_DOUBLE_TOUCH if you want G38 to double touch.\n\nMinimum Steps Per Segment\n#define MIN_STEPS_PER_SEGMENT 6\n\n\nMoves (or segments) with fewer steps than this will be joined with the next move.\n\nMinimum Stepper Pulse\n#define MINIMUM_STEPPER_PULSE 0 // (µs) The smallest stepper pulse allowed\n\n\nThe minimum pulse width (in µs) for stepping a stepper. Set this if you find stepping unreliable, or if using a very fast CPU.\n\nParallel Heaters\n//#define HEATERS_PARALLEL\n\n\nControl heater 0 and heater 1 in parallel.\n\nBuffer / Hosts\nBlock Buffer\n#if ENABLED(SDSUPPORT)\n #define BLOCK_BUFFER_SIZE 16 // SD,LCD,Buttons take more memory, block buffer needs to be smaller\n#else\n #define BLOCK_BUFFER_SIZE 16 // maximize block buffer\n#endif\n\n\nThe number of linear motions that can be in the plan at any give time. The BLOCK_BUFFER_SIZE must be a power of 2, (8, 16, 32, etc.) because shifts and ors are used to do the ring-buffering.\n\nSerial Command Buffer\n#define MAX_CMD_SIZE 96\n#define BUFSIZE 4\n\n\nThe ASCII buffer for serial input. Individual command line length is set by MAX_CMD_SIZE, and should be long enough to hold a complete G-code line. Set the number of lines with BUFSIZE.\n\nTransmit to Host Buffer\n#define TX_BUFFER_SIZE 0\n\n\nTransmission to Host buffer size. To save 386 bytes of PROGMEM (and TX_BUFFER_SIZE+3 bytes of SRAM) set to 0. To buffer a simple “ok” you need 4 bytes. An ADVANCED_OK (M105) needs 32 bytes. For debug-echo: 128 bytes for the optimal speed. Other output doesn’t need to be that speedy.\n\nHost Receive Buffer\n//#define RX_BUFFER_SIZE 1024\n#if RX_BUFFER_SIZE &gt;= 1024\n // Enable to have the controller send XON/XOFF control characters to\n // the host to signal the RX buffer is becoming full.\n //#define SERIAL_XON_XOFF\n#endif\n\n\nHost Receive buffer size. Without XON/XOFF flow control (see SERIAL_XON_XOFF below) 32 bytes should be enough. To use flow control, set this buffer size to at least 1024 bytes.\n\nSD Transfer Stats\n#if ENABLED(SDSUPPORT)\n // Collect and display the maximum RX queue usage after an SD file transfer.\n //#define SERIAL_STATS_MAX_RX_QUEUED\n\n // Collect and display the number of dropped bytes after an SD file transfer.\n //#define SERIAL_STATS_DROPPED_RX\n#endif\n\n\n\nEmergency Parser\n//#define EMERGENCY_PARSER\n\n\nEnable an emergency-command parser to intercept certain commands as they enter the serial receive buffer, so they cannot be blocked. Currently handles M108, M112, and M410. Does not work on boards using AT90USB (USBCON) processors!\n\nNo Timeouts\n//#define NO_TIMEOUTS 1000 // (ms)\n\n\nBad serial connections can miss a received command by sending an “ok”, and some hosts will abort after 30 seconds. Some hosts start sending commands while receiving a ‘wait’. This “wait” is only sent when the buffer is empty. 1 second is a good value here. The HOST_KEEPALIVE feature provides another way to keep the host alive.\n\nAdvanced OK\n//#define ADVANCED_OK\n\n\nInclude extra information about the buffer in “ok” messages. Some hosts will have this feature soon. This could make the NO_TIMEOUTS unnecessary.\n\nFirmware Retraction\n//#define FWRETRACT // ONLY PARTIALLY TESTED\n#if ENABLED(FWRETRACT)\n #define MIN_AUTORETRACT 0.1 // When auto-retract is on, convert E moves of this length and over\n #define MAX_AUTORETRACT 10.0 // Upper limit for auto-retract conversion\n #define RETRACT_LENGTH 3 // Default retract length (positive mm)\n #define RETRACT_LENGTH_SWAP 13 // Default swap retract length (positive mm), for extruder change\n #define RETRACT_FEEDRATE 45 // Default feedrate for retracting (mm/s)\n #define RETRACT_ZLIFT 0 // Default retract Z-lift\n #define RETRACT_RECOVER_LENGTH 0 // Default additional recover length (mm, added to retract length when recovering)\n #define RETRACT_RECOVER_LENGTH_SWAP 0 // Default additional swap recover length (mm, added to retract length when recovering from extruder change)\n #define RETRACT_RECOVER_FEEDRATE 8 // Default feedrate for recovering from retraction (mm/s)\n #define RETRACT_RECOVER_FEEDRATE_SWAP 8 // Default feedrate for recovering from swap retraction (mm/s)\n#endif\n\n\nThis option adds G10/G11 commands for automatic firmware-based retract/recover. Use M207 and M208 to set the parameters, and M209 to enable/disable. With auto-retract enabled, all G1 E moves within the set range will be converted to firmware-based retract/recover moves.\n\nBe sure to turn off auto-retract during filament change! All M207/M208/M209 settings are saved to EEPROM.\n\nExtra Fan Speed\n//#define EXTRA_FAN_SPEED\n\n\nAdd a secondary fan speed for each print-cooling fan.\n\n M106 P[fan] T3-255 sets a secondary speed for [fan].\n M106 P[fan] T2 uses the set secondary speed.\n M106 P[fan] T1 restores the previous fan speed\n\n\nAdvanced Pause\n//#define ADVANCED_PAUSE_FEATURE\n#if ENABLED(ADVANCED_PAUSE_FEATURE)\n #define PAUSE_PARK_X_POS 3 // X position of hotend\n #define PAUSE_PARK_Y_POS 3 // Y position of hotend\n #define PAUSE_PARK_Z_ADD 10 // Z addition of hotend (lift)\n #define PAUSE_PARK_XY_FEEDRATE 100 // X and Y axes feedrate in mm/s (also used for delta printers Z axis)\n #define PAUSE_PARK_Z_FEEDRATE 5 // Z axis feedrate in mm/s (not used for delta printers)\n #define PAUSE_PARK_RETRACT_FEEDRATE 60 // Initial retract feedrate in mm/s\n #define PAUSE_PARK_RETRACT_LENGTH 2 // Initial retract in mm\n // It is a short retract used immediately after print interrupt before move to filament exchange position\n #define FILAMENT_CHANGE_UNLOAD_FEEDRATE 10 // Unload filament feedrate in mm/s - filament unloading can be fast\n #define FILAMENT_CHANGE_UNLOAD_LENGTH 100 // Unload filament length from hotend in mm\n // Longer length for bowden printers to unload filament from whole bowden tube,\n // shorter length for printers without bowden to unload filament from extruder only,\n // 0 to disable unloading for manual unloading\n #define FILAMENT_CHANGE_LOAD_FEEDRATE 6 // Load filament feedrate in mm/s - filament loading into the bowden tube can be fast\n #define FILAMENT_CHANGE_LOAD_LENGTH 0 // Load filament length over hotend in mm\n // Longer length for bowden printers to fast load filament into whole bowden tube over the hotend,\n // Short or zero length for printers without bowden where loading is not used\n #define ADVANCED_PAUSE_EXTRUDE_FEEDRATE 3 // Extrude filament feedrate in mm/s - must be slower than load feedrate\n #define ADVANCED_PAUSE_EXTRUDE_LENGTH 50 // Extrude filament length in mm after filament is loaded over the hotend,\n // 0 to disable for manual extrusion\n // Filament can be extruded repeatedly from the filament exchange menu to fill the hotend,\n // or until outcoming filament color is not clear for filament color change\n #define PAUSE_PARK_NOZZLE_TIMEOUT 45 // Turn off nozzle if user doesn't change filament within this time limit in seconds\n #define FILAMENT_CHANGE_NUMBER_OF_ALERT_BEEPS 5 // Number of alert beeps before printer goes quiet\n #define PAUSE_PARK_NO_STEPPER_TIMEOUT // Enable to have stepper motors hold position during filament change\n // even if it takes longer than DEFAULT_STEPPER_DEACTIVE_TIME.\n //#define PARK_HEAD_ON_PAUSE // Go to filament change position on pause, return to print position on resume\n //#define HOME_BEFORE_FILAMENT_CHANGE // Ensure homing has been completed prior to parking for filament change\n#endif\n\n\nExperimental feature for filament change support and parking the nozzle when paused. Adds the M600 command to perform a filament change. With PARK_HEAD_ON_PAUSE enabled also adds the M125 command to pause printing and park the nozzle. Requires an LCD display. Note that M600 is required for the default FILAMENT_RUNOUT_SCRIPT.\n\nStepper Drivers\nTrinamic TMC26X\n//#define HAVE_TMCDRIVER\n\n\nEnable this section if you have TMC26X motor drivers. You’ll need to import the TMC26XStepper library into the Arduino IDE. See the Configuration_adv.h file for the full set of sub-options.\n\nTrinamic TMC2130\n//#define HAVE_TMC2130\n\n\nEnable this option for SilentStepStick Trinamic TMC2130 SPI-configurable stepper drivers. You’ll also need the TMC2130Stepper Arduino library. See the Configuration_adv.h file for the full set of sub-options.\n\nTo use TMC2130 stepper drivers in SPI mode connect your SPI2130 pins to the hardware SPI interface on your board and define the required CS pins in your pins_MYBOARD.h file. (e.g., RAMPS 1.4 uses AUX3 pins X_CS_PIN 53, Y_CS_PIN 49, etc.).\n\nL6470 Drivers\n//#define HAVE_L6470DRIVER\n\n\nEnable this section if you have L6470 motor drivers. You need to import the L6470 library into the Arduino IDE for this. See the Configuration_adv.h file for the full set of sub-options.\n\nExperimental i2c Bus\n//#define EXPERIMENTAL_I2CBUS\n#define I2C_SLAVE_ADDRESS 0 // Set a value from 8 to 127 to act as a slave\n\n\nThis feature can be used to talk to slave devices on the i2c bus, passing data back to the host. With additional work the TWIBus class can be used to build a full protocol and add remote control features to Marlin, distributing load over two or more boards.\n; Example #1\n; This macro send the string \"Marlin\" to the slave device with address 0x63 (99)\n; It uses multiple M260 commands with one B[base 10] arg\nM260 A99 ; Target slave address\nM260 B77 ; M\nM260 B97 ; a\nM260 B114 ; r\nM260 B108 ; l\nM260 B105 ; i\nM260 B110 ; n\nM260 S1 ; Send the current buffer\n\n; Example #2\n; Request 6 bytes from slave device with address 0x63 (99)\nM261 A99 B5\n\n; Example #3\n; Example serial output of a M261 request\necho:i2c-reply: from:99 bytes:5 data:hello\n\n\nSpindle / Laser\n//#define SPINDLE_LASER_ENABLE\n#if ENABLED(SPINDLE_LASER_ENABLE)\n\n #define SPINDLE_LASER_ENABLE_INVERT false // set to \"true\" if the on/off function is reversed\n #define SPINDLE_LASER_PWM true // set to true if your controller supports setting the speed/power\n #define SPINDLE_LASER_PWM_INVERT true // set to \"true\" if the speed/power goes up when you want it to go slower\n #define SPINDLE_LASER_POWERUP_DELAY 5000 // delay in milliseconds to allow the spindle/laser to come up to speed/power\n #define SPINDLE_LASER_POWERDOWN_DELAY 5000 // delay in milliseconds to allow the spindle to stop\n #define SPINDLE_DIR_CHANGE true // set to true if your spindle controller supports changing spindle direction\n #define SPINDLE_INVERT_DIR false\n #define SPINDLE_STOP_ON_DIR_CHANGE true // set to true if Marlin should stop the spindle before changing rotation direction\n\n /**\n * The M3 &amp; M4 commands use the following equation to convert PWM duty cycle to speed/power\n *\n * SPEED/POWER = PWM duty cycle * SPEED_POWER_SLOPE + SPEED_POWER_INTERCEPT\n * where PWM duty cycle varies from 0 to 255\n *\n * Set the following for your controller (ALL MUST BE SET)\n */\n\n #define SPEED_POWER_SLOPE 118.4\n #define SPEED_POWER_INTERCEPT 0\n #define SPEED_POWER_MIN 5000\n #define SPEED_POWER_MAX 30000 // SuperPID router controller 0 - 30,000 RPM\n\n //#define SPEED_POWER_SLOPE 0.3922\n //#define SPEED_POWER_INTERCEPT 0\n //#define SPEED_POWER_MIN 10\n //#define SPEED_POWER_MAX 100 // 0-100%\n#endif\n\n\nEnable for Spindle and Laser control. Adds the M3, M4, and M5 commands to turn the spindle/laser on and off, and to set spindle speed, spindle direction, and laser power.\n\nSuperPid is a router/spindle speed controller used in the CNC milling community. Marlin can be used to turn the spindle on and off. It can also be used to set the spindle speed from 5,000 to 30,000 RPM.\n\nYou’ll need to select a pin for the ON/OFF function and optionally choose a 0-5V hardware PWM pin for the speed control and a pin for the rotation direction.\n\nSee the Laser and Spindle page for more details.\n\nFilament Width Sensor\n\n\n\n//#define FILAMENT_WIDTH_SENSOR\n\n\nEnable to add support for a filament width sensor such as Filament Width Sensor Prototype Version 3. With a filament sensor installed, Marlin can adjust the flow rate according to the measured filament width. Adjust the sub-options below according to your setup.\n\nOnly a single extruder is supported at this time.\n\n#define FILAMENT_SENSOR_EXTRUDER_NUM 0\n\n\nOnly one extruder can have a filament sensor. Specify here which extruder has it.\n\n#define MEASUREMENT_DELAY_CM 14\n\n\nDistance from the filament width sensor to the melt chamber.\n\n#define MEASURED_UPPER_LIMIT 3.30 // (mm) Upper limit used to validate sensor reading\n#define MEASURED_LOWER_LIMIT 1.90 // (mm) Lower limit used to validate sensor reading\n\n\nThe range of your filament width. Set these according to your filament preferences. The sample values here apply to 3mm. For 1.75mm you’ll use a range more like 1.60 to 1.90.\n\n#define MAX_MEASUREMENT_DELAY 20\n\n\nThis defines the size of the buffer to allocate for use with MEASUREMENT_DELAY_CM. The value must be greater than or equal to MEASUREMENT_DELAY_CM. Keep this setting low to reduce RAM usage.\n\n#define FILAMENT_LCD_DISPLAY\n\n\nPeriodically display a message on the LCD showing the measured filament diameter.\n\nCNC Coordinate Systems\n//#define CNC_COORDINATE_SYSTEMS\n\n\nEnables G53 and G54-G59.3 commands to select coordinate systems, plus G92.1 to reset the current workspace to native machine space. Workspaces set with this feature are also saved to EEPROM.\n\nPins Debugging\n//#define PINS_DEBUGGING\n\n\nEnable this option to add the M43 Debug Pins G-code. This command can be used to list pins, display their status, to watch pins for changes, observe endstops, toggle LEDs, test Z servo probe, toggle pins, etc.\n\nTemperature Auto-Report\n#define AUTO_REPORT_TEMPERATURES\n\n\nIt is recommended to enable this feature (along with EXTENDED_CAPABILITIES_REPORT) to install the M155 Auto-Report Temperature command. M115 tells Marlin to send the current temperature to the host at regular intervals, instead of requiring the host software to send M105 repeatedly. This saves a space in the command buffer and reduces overhead.\n\nExtended Capabilities Report\n#define EXTENDED_CAPABILITIES_REPORT\n\n\nThis option adds a list of capabilities to the output of M115, allowing savvy host software to take advantage of add-ons like AUTO_REPORT_TEMPERATURES.\n\nVolumetric Mode Default\n//#define VOLUMETRIC_DEFAULT_ON\n\n\nActivate this option to make volumetric extrusion the default method The last values loaded or set by M404 W and M200 D will be used as the Nominal and Actual filament diameters. With this option, M200 D0 must be used to disable volumetric mode when running length-based G-code.\n\nNo Workspace Offsets\n//#define NO_WORKSPACE_OFFSETS\n\n\nEnable this option for a leaner build of Marlin that removes all workspace offsets. This simplifies all coordinate transformations, leveling, etc., and may allow for slightly faster printing. With this option, M206 and M428 are disabled, and G92 reverts to its old behavior, as it is in Marlin 1.0.\n\nProportional Font Ratio\n#define PROPORTIONAL_FONT_RATIO 1.0\n\n\nSome hosts use a proportional font in their output console. This makes it hard to read output from Marlin that relies on fixed-width for alignment. This option tells Marlin how many spaces are required to fill up a typical character space in the host font. For clients that use a fixed-width font (like OctoPrint), leave this set to 1.0. Otherwise, adjust according to your host.\n\nFaster G-code Parser\n#define FASTER_GCODE_PARSER\n\n\nThis option uses a 28 byte SRAM buffer and an alternative method to get parameter values so the G-code parser can run a little faster. If possible, always leave this option enabled.\n\nEven More Options…\n/**\n * User-defined menu items that execute custom GCode\n */\n//#define CUSTOM_USER_MENUS\n#if ENABLED(CUSTOM_USER_MENUS)\n #define USER_SCRIPT_DONE \"M117 User Script Done\"\n #define USER_SCRIPT_AUDIBLE_FEEDBACK\n //#define USER_SCRIPT_RETURN // Return to status screen after a script\n\n #define USER_DESC_1 \"Home &amp; UBL Info\"\n #define USER_GCODE_1 \"G28\\nG29 W\"\n\n #define USER_DESC_2 \"Preheat for PLA\"\n #define USER_GCODE_2 \"M140 S\" STRINGIFY(PREHEAT_1_TEMP_BED) \"\\nM104 S\" STRINGIFY(PREHEAT_1_TEMP_HOTEND)\n\n #define USER_DESC_3 \"Preheat for ABS\"\n #define USER_GCODE_3 \"M140 S\" STRINGIFY(PREHEAT_2_TEMP_BED) \"\\nM104 S\" STRINGIFY(PREHEAT_2_TEMP_HOTEND)\n\n #define USER_DESC_4 \"Heat Bed/Home/Level\"\n #define USER_GCODE_4 \"M140 S\" STRINGIFY(PREHEAT_2_TEMP_BED) \"\\nG28\\nG29\"\n\n #define USER_DESC_5 \"Home &amp; Info\"\n #define USER_GCODE_5 \"G28\\nM503\"\n#endif\n\n/**\n * Specify an action command to send to the host when the printer is killed.\n * Will be sent in the form '//action:ACTION_ON_KILL', e.g. '//action:poweroff'.\n * The host must be configured to handle the action command.\n */\n//#define ACTION_ON_KILL \"poweroff\"\n\n/**\n * I2C position encoders for closed loop control.\n * Developed by Chris Barr at Aus3D.\n *\n * Wiki: http://wiki.aus3d.com.au/Magnetic_Encoder\n * Github: https://github.com/Aus3D/MagneticEncoder\n *\n * Supplier: http://aus3d.com.au/magnetic-encoder-module\n * Alternative Supplier: http://reliabuild3d.com/\n *\n * Reilabuild encoders have been modified to improve reliability.\n */\n\n//#define I2C_POSITION_ENCODERS\n#if ENABLED(I2C_POSITION_ENCODERS)\n\n #define I2CPE_ENCODER_CNT 1 // The number of encoders installed; max of 5\n // encoders supported currently.\n\n #define I2CPE_ENC_1_ADDR I2CPE_PRESET_ADDR_X // I2C address of the encoder. 30-200.\n #define I2CPE_ENC_1_AXIS X_AXIS // Axis the encoder module is installed on. &lt;X|Y|Z|E&gt;_AXIS.\n #define I2CPE_ENC_1_TYPE I2CPE_ENC_TYPE_LINEAR // Type of encoder: I2CPE_ENC_TYPE_LINEAR -or-\n // I2CPE_ENC_TYPE_ROTARY.\n #define I2CPE_ENC_1_TICKS_UNIT 2048 // 1024 for magnetic strips with 2mm poles; 2048 for\n // 1mm poles. For linear encoders this is ticks / mm,\n // for rotary encoders this is ticks / revolution.\n //#define I2CPE_ENC_1_TICKS_REV (16 * 200) // Only needed for rotary encoders; number of stepper\n // steps per full revolution (motor steps/rev * microstepping)\n //#define I2CPE_ENC_1_INVERT // Invert the direction of axis travel.\n #define I2CPE_ENC_1_EC_METHOD I2CPE_ECM_NONE // Type of error error correction.\n #define I2CPE_ENC_1_EC_THRESH 0.10 // Threshold size for error (in mm) above which the\n // printer will attempt to correct the error; errors\n // smaller than this are ignored to minimize effects of\n // measurement noise / latency (filter).\n\n #define I2CPE_ENC_2_ADDR I2CPE_PRESET_ADDR_Y // Same as above, but for encoder 2.\n #define I2CPE_ENC_2_AXIS Y_AXIS\n #define I2CPE_ENC_2_TYPE I2CPE_ENC_TYPE_LINEAR\n #define I2CPE_ENC_2_TICKS_UNIT 2048\n //#define I2CPE_ENC_2_TICKS_REV (16 * 200)\n //#define I2CPE_ENC_2_INVERT\n #define I2CPE_ENC_2_EC_METHOD I2CPE_ECM_NONE\n #define I2CPE_ENC_2_EC_THRESH 0.10\n\n #define I2CPE_ENC_3_ADDR I2CPE_PRESET_ADDR_Z // Encoder 3. Add additional configuration options\n #define I2CPE_ENC_3_AXIS Z_AXIS // as above, or use defaults below.\n\n #define I2CPE_ENC_4_ADDR I2CPE_PRESET_ADDR_E // Encoder 4.\n #define I2CPE_ENC_4_AXIS E_AXIS\n\n #define I2CPE_ENC_5_ADDR 34 // Encoder 5.\n #define I2CPE_ENC_5_AXIS E_AXIS\n\n // Default settings for encoders which are enabled, but without settings configured above.\n #define I2CPE_DEF_TYPE I2CPE_ENC_TYPE_LINEAR\n #define I2CPE_DEF_ENC_TICKS_UNIT 2048\n #define I2CPE_DEF_TICKS_REV (16 * 200)\n #define I2CPE_DEF_EC_METHOD I2CPE_ECM_NONE\n #define I2CPE_DEF_EC_THRESH 0.1\n\n //#define I2CPE_ERR_THRESH_ABORT 100.0 // Threshold size for error (in mm) error on any given\n // axis after which the printer will abort. Comment out to\n // disable abort behaviour.\n\n #define I2CPE_TIME_TRUSTED 10000 // After an encoder fault, there must be no further fault\n // for this amount of time (in ms) before the encoder\n // is trusted again.\n\n /**\n * Position is checked every time a new command is executed from the buffer but during long moves,\n * this setting determines the minimum update time between checks. A value of 100 works well with\n * error rolling average when attempting to correct only for skips and not for vibration.\n */\n #define I2CPE_MIN_UPD_TIME_MS 100 // Minimum time in miliseconds between encoder checks.\n\n // Use a rolling average to identify persistant errors that indicate skips, as opposed to vibration and noise.\n #define I2CPE_ERR_ROLLING_AVERAGE\n\n#endif // I2C_POSITION_ENCODERS\n\n/**\n * MAX7219 Debug Matrix\n *\n * Add support for a low-cost 8x8 LED Matrix based on the Max7219 chip, which can be used as a status\n * display. Requires 3 signal wires. Some useful debug options are included to demonstrate its usage.\n *\n * Fully assembled MAX7219 boards can be found on the internet for under $2(US).\n * For example, see https://www.ebay.com/sch/i.html?_nkw=332349290049\n */\n//#define MAX7219_DEBUG\n#if ENABLED(MAX7219_DEBUG)\n #define MAX7219_CLK_PIN 64 // 77 on Re-ARM // Configuration of the 3 pins to control the display\n #define MAX7219_DIN_PIN 57 // 78 on Re-ARM\n #define MAX7219_LOAD_PIN 44 // 79 on Re-ARM\n\n /**\n * Sample debug features\n * If you add more debug displays, be careful to avoid conflicts!\n */\n #define MAX7219_DEBUG_PRINTER_ALIVE // Blink corner LED of 8x8 matrix to show that the firmware is functioning\n #define MAX7219_DEBUG_STEPPER_HEAD 3 // Show the stepper queue head position on this and the next LED matrix row\n #define MAX7219_DEBUG_STEPPER_TAIL 5 // Show the stepper queue tail position on this and the next LED matrix row\n\n #define MAX7219_DEBUG_STEPPER_QUEUE 0 // Show the current stepper queue depth on this and the next LED matrix row\n // If you experience stuttering, reboots, etc. this option can reveal how\n // tweaks made to the configuration are affecting the printer in real-time.\n#endif\n\n\n\n\nPrusa MMU2 advanced settings (since Marlin 2.0)\n\nSerial connection\n\nA serial connection is required for communication between the printer board and the MMU2. The configuration differs between 8- and 32-bit boards.\n\n8-bit AVR boards\n\nOn a board with a ATmega2560/1280 microcontroller you have three potential serial ports to use for the MMU2: serial 1 (pins 18/19), serial 2 (pins 16/17), serial 3 (pins 14/15). Define the port your MMU2 is connected to\n\n #define INTERNAL_SERIAL_PORT 2\n\n\n\nThis activates an additional serial connection in Marlin named internalSerial. So the second define in the example configuration can just remain as it is.\n\n #define MMU2_SERIAL internalSerial\n\n\n\n32-bit boards\n\nWhen using a 32-bit board you just have to define the name of the serial port which will be used for communication with the MMU2.\n\n #define MMU2_SERIAL Serial1\n\n\n\nMMU2 Reset\n\nThe MMU2 provides two options how the printer board can trigger a reset: software and hardware reset. By default software reset is enabled. Hardware reset requires a digital output pin wired to the reset pin on the MMU2. To activate hardware reset you define the pin to use on the printer board\n\n #define MMU2_RST_PIN 23\n\n\n\n12V mode\n\nIf your MMU2 is powered from 12 V you can activate a special mode on the MMU2.\n\n // Enable if the MMU2 has 12V stepper motors (MMU2 Firmware 1.0.2 and up)\n #define MMU2_MODE_12V\n\n\n\nThis should reduce the noise of the MMU2 but has no effect on the general operation.\n\nFilament runout handling\n\nHere you define the gcode script which will be executed when the so-called FINDA sensor on the MMU2 detects a filament runout.\n\n // G-code to execute when MMU2 F.I.N.D.A. probe detects filament runout\n #define MMU2_FILAMENT_RUNOUT_SCRIPT \"M600\"\n\n\nThe default is M600 which requires ADVANCED_PAUSE_FEATURE.\n\nLCD Menu\n\n // Add MMU2 controls to the LCD menu\n #define MMU2_MENUS\n\n\n\nEnable this option to activate an additional menu to operate the MMU2 from the LCD.\n\nFilament load/unload settings\n\nLoad to nozzle\n\nThe MMU2 LCD menu allows you to load filament to the nozzle. The MMU2 will transport the filament all the way to the extruder gears. The required extruder steps to load it into the hotend have to be defined in Marlin.\n\n // This is for Prusa MK3-style extruders. Customize for your hardware.\n #define MMU2_LOAD_TO_NOZZLE_SEQUENCE \\\n { 7.2, 562 }, \\\n { 14.4, 871 }, \\\n { 36.0, 1393 }, \\\n { 14.4, 871 }, \\\n { 50.0, 198 }\n\n\n\nThe values are relative E distances and feed rates in mm/m. The defaults are based on the nozzle to extruder gear distance of a Prusa MK3 extruder, so if required you have to modifiy those to your extruder/hotend setup accordingly.\n\nUnload filament\n\nTo unload filament using the LCD menu a generic ramming sequence will be exectued before the MMU2 will retract the filament. The steps to do so are defined using\n\n #define MMU2_RAMMING_SEQUENCE \\\n { 1.0, 1000 }, \\\n { 1.0, 1500 }, \\\n { 2.0, 2000 }, \\\n { 1.5, 3000 }, \\\n { 2.5, 4000 }, \\\n { -15.0, 5000 }, \\\n { -14.0, 1200 }, \\\n { -6.0, 600 }, \\\n { 10.0, 700 }, \\\n { -10.0, 400 }, \\\n { -50.0, 2000 }\n\n\n\nThe values are relative E distances and feed rates in mm/m. The default values are based on a E3D V6 hotend and the nozzle to extruder gear distance of a Prusa MK3 extruder, so if required you have to modifiy those to your extruder/hotend setup accordingly.\n\nEject filament\n\nEject filament will do a simple retraction of the filament out of the hotend without ramming. The feedrate to do so is defined using\n #define MMU2_FILAMENTCHANGE_EJECT_FEED 80.0\n\n\n\nDebug\n\n #define MMU2_DEBUG // Write debug info to serial output\n\n\nEnable this option to get debug output related to the printer to MMU2 communication. This will consume some PROGMEM.\n", "link": "/docs/configuration/configuration.html", "excerpt": "Complete guide to Marlin configuration options.", "class": "conf" } ,{ "title": "Laser/Spindle Configuration", "content": " \nThis document is based on Marlin 1.1.9\n \n\n\nNote: Because of the way Marlin currently (1.1.9) implements M3-M5, for best results we recommend (#11576) using a fan PWM pin and the M106 command instead of M3-M5. The simplest way to do this is to define FAN1_PIN as one of the available PWM pins on your board.\n\nFor example, to define pin 6 as the second fan just add this line to Configuration.h:\n#define FAN1_PIN 6 // 2nd fan output attached to laser TTL input\n\n\nYou can then control the laser from your G-code using M106 P1, like so…\nM106 P1 S0 ; Laser off (P1 = 2nd fan output)\nM106 P1 S128 ; Laser at 50%\nM106 P1 S255 ; Laser at 100%\n\n\nNOTE: You can use Fan0 if it is available, in which case you will not need to define the above. As of this edit, Marlin can control up to 3 fans via M106/M107. To use more pins you may need to modify Marlin as described in Issue #12961.\n\n\n\nPins\nAlternatively, you could configure the following to use M3, M4 and M5.\n\nIn the pins_MYBOARD.h file for your board make sure the following pins are defined:\n#define SPINDLE_LASER_ENABLE_PIN xx // digital pin\n#define SPINDLE_LASER_PWM_PIN yy // digital pin - MUST BE HARDWARE PWM\n#define SPINDLE_DIR_PIN zz // digital pin\n\n\nSelecting the pin for SPINDLE_LASER_ENABLE_PIN is fairly easy. Just select any free digital pin with a 0 to 3.3V-5V logic level.\n\nIt is highly recommended that an external 1k-10k pullup resistor be connected to the SPINDLE_LASER_ENABLE_PIN. This will prevent the spindle/laser from powering on briefly during power up or when the controller is reset (which happens whenever you connect or disconnect from most controllers).\n\nPicking the PWM pin can be tricky. There are only 15 hardware PWM pins on an ATMEGA2560. Some are used by the system interrupts so are unavailable. Others are usually hardwired in the controller to functions you can’t do without. Fans, servos and some specialized functions all want to have a PWM pin. Usually you’ll end up picking a function you can do without, commenting that function out (or not enabling it) and assigning its pin number to the speed pin.\n\nFor all CPUs the hardware PWMs on TIMER1 are not available. Marlin uses TIMER1 to generate interrupts and sets it up in such a way that the none of its PWMs can be used.\n\nServos also make hardware PWM(s) unavailable. In this case it’s only the “A” PWM that’s unavailable. The other hardware PWM(s) on that timer are available for general use.\n\nATmega2560 PWM Assignments and Clients\n\nBelow is a table that can be used when selecting the speed pin on a 2560. (Other CPUs include a subset of the 2560 pins.)\n\nThere are 16 PWM ports assigned to 15 physical pins.\n\nPin 13 has two ports assigned to it. (0A and 1C)\n\n\n \n \n Timer + Port\n Digital Pin\n Normal Assignment\n System Use\n Optional Clients\n \n \n TIMER3B\n 2\n X_MAX\n  \n  \n \n \n TIMER3C\n 3\n X_MIN\n  \n  \n \n \n TIMER0B\n 4\n HEATER_4\n  \n  \n \n \n TIMER3A\n 5\n HEATER_5\n  \n *servo 0-11 ISR\n \n \n TIMER4A\n 6\n HEATER_6\n  \n *servo 12-23 ISR\n \n \n TIMER4B\n 7\n LCD\n  \n  \n \n \n TIMER4C\n 8\n HOTBED\n  \n  \n \n \n TIMER2B\n 9\n HEATER_1\n  \n  \n \n \n TIMER2A\n 10\n HEATER_0\n  \n  \n \n \n TIMER1A\n 11\n HEATER_7\n *stepper ISR\n  \n \n \n TIMER1B\n 12\n PS_ON_PIN\n *stepper ISR\n  \n \n \n TIMER0A\n 13\n LED\n LED PWM\n  \n \n \n TIMER1C\n 13\n  \n *stepper ISR\n  \n \n \n TIMER5C\n 44\n LCD\n  \n stepper motor current XY PWM\n \n \n TIMER5B\n 45\n LCD\n  \n stepper motor current Z PWM\n \n \n TIMER5A\n 46\n Z_STEP\n  \n stepper motor current E PWM or *servo 24-35 ISR\n \n \n\n\n* These hardware PWMs are not available. The pin can still be used for general purpose digital I/O.\n\n\nIn addition to the above, fans can be assigned to PWM pins. If you pick a pin that’s already assigned to a fan then you’ll need to delete the fan or change its pin assignment. This is needed even if FAN_FAST_PWM is disabled.\n\nNOTE: Most pins hardwired to a heater or fan are usually driven by a MOSFET with a pullup on its output through an LED to +12V/+24V. This will probably damage your spindle controller unless you add a protection circuit. If there isn’t a +12V/+24V pullup you’ll need an external 1k-10k pullup resistor to the pin.\n\nAT90USB646, 647, 1286 &amp; 1287 PWM assignments\n\n\n As with the atmega2560, the PWMs on Timer1 are not available.\n These chips have 10 PWMs assigned to 9 pins. TIMER0A and TIMER1C are tied to the same pin. Most Arduino IDE extensions only make TIMER1C available (Teensyduino included).\n\n\nATmega644 &amp; 1284 PWM assignments\n\n\n As with the 2560, the PWMs on Timer1 are not available.\n All PWMs have their own pins.\n\n", "link": "/docs/configuration/laser_spindle.html", "excerpt": "Configuring a laser or spindle tool in Marlin.", "class": "conf" } ,{ "title": "Probe Configuration", "content": " \nThis document is based on Marlin 1.1.0\n \n\nBed Probe Configuration\n\nNo matter how well you constrain, tighten up, and align the components of your 3D printer, there are bound to be imperfections in alignment that can negatively affect print quality. Among these imperfections, irregularities in bed-nozzle distance is one of the most problematic. After all, if the first layer doesn’t adhere to the bed then the rest of the print job is moot.\n\nMarlin includes a “Bed Leveling” feature that compensates for these imperfections by taking measurements of the bed-nozzle distance at 3 or more points and then adjusting the nozzle position throughout the print so that it remains at a consistent distance from the bed.\n\nMarlin allows you to take these bed measurements using nothing but a piece of paper, but for an improved experience the best option is to install a bed probe (also called a “Z probe”).\n\nBed Probes\n\nMarlin 1.1 supports a wide variety of probe types:\n\n\n Simple switch (FIX_MOUNTED_PROBE)\n Switch on a servo arm (Z_ENDSTOP_SERVO_NR)\n Switch on a solenoid (SOLENOID_PROBE)\n Inductive probes (FIX_MOUNTED_PROBE)\n BLTouch - and clones (BLTOUCH)\n Sled-mounted probe (Z_PROBE_SLED)\n Allen-key delta probe (Z_PROBE_ALLEN_KEY)\n No probe (PROBE_MANUALLY)\n\n\nBed Leveling Methods\n\nMarlin includes various methods of probing and leveling:\n\n\n “3-Point” probes a triangle to determine the height and tilt of the bed plane. During printing the nozzle is adjusted in X, Y, and Z, so you can even print on a badly-tilted bed. However, this method requires a very flat and even surface.\n “Linear Grid” probes a square grid (as much as possible on DELTA) to determine the height and tilt of the bed. After that it works just the same way as 3-point leveling.\n “Bilinear Grid” probes a grid in the same manner as Linear Grid, but during printing the Z axis is adjusted according to bilinear interpolation between the measured points. This allows the printer to compensate for an uneven surface,\n “Mesh Bed Leveling” works in the same manner as “Bilinear Grid” but takes different G29 parameters. (This feature is superseded by combining the manual probe option with bilinear leveling, and will not be included in future versions of Marlin.)\n “Unified Bed Leveling” combines elements of bilinear and planar leveling and includes extra utilities to help improve measurement accuracy, especially for deltas. See (link) for an article specifically about this feature.\n\n\nConfiguration\n\n1. Z Probe Pin\n\nBefore configuring any bed probe be sure to read its documentation and the documentation for your electronics. Make sure you know to which pins the probe will be connected. Marlin provides reasonable defaults, but they will not apply to every situation.\n\nIn general, on deltabots the probe should be connected to the unused Z-Min endstop pin (if there is one). On machines that use Z-min for an endstop, the Z-Max pin is recommended next, so this is set as the default alternative on most boards.\n\n\n If the probe is connected to the Z-Min pin, enable Z_MIN_PROBE_USES_Z_MIN_ENDSTOP_PIN.\n If the probe is connected to any other pin, enable Z_MIN_PROBE_ENDSTOP.\n If the probe is connected to any other pin, set Z_MIN_PROBE_PIN to its digital (DIO) pin number.\n\n\n2. Probe Type\n\nWhat kind of probe do you have?\n\n\n FIX_MOUNTED_PROBE\nUse this option for a fixed switch or inductive probe. This is the option to select if the nozzle itself is used as the probe.\n Z_ENDSTOP_SERVO_NR\nEndstop switches are inexpensive, and some printer kits include one or two replacement parts. So one popular probe type mounts an endstop switch on a servo-driven arm. Set this option to 0 for a servo-probe connected to the first servo plug, 1 for the next servo plug, etc. Set the servo’s deployed/stowed angles with the Z_SERVO_ANGLES setting.\n SOLENOID_PROBE\nSelect this option for a switch mounted on a solenoid.\n BLTOUCH\nThe BLTouch by ANTCLABS is a compact probe specifically designed for use on inexpensive 3D printers. It uses a Hall effect sensor to detect the movement of a metal pin that can be magnetically extended and retracted. The BLTouch connects to the servo pins which function to send commands to the probe.\n Z_PROBE_SLED\nThis option applies to a switch mounted on a “sled” that can be docked to the end of the X axis. The X carriage can pick up this sled, use it to perform probing, and put it back when done.\n Z_PROBE_ALLEN_KEY\nThis is a popular solution on deltas. A spare Allen key is used with an endstop switch to make a probe that’s deployed and stowed by turning the key 90 degrees. You can either deploy and stow the key manually or configure movements that bump the key against some fixed point. Options for this type of probe are included in the delta example configurations that come with Marlin.\n PROBE_MANUALLY\nThe bed-nozzle distance can be measured without a probe by following a manual procedure. The nozzle moves to each point and pauses. You adjust the Z height so that the nozzle is touching the bed. Once the Z height is adjusted, you tell the machine to go to the next point. Continue until all points are probed. This option can be used with all Auto Bed Leveling options except UBL, which is freestanding.\n\n\n3. Other Probe Options\n\n\n LCD_BED_LEVELING provides a guided process to assist with PROBE_MANUALLY (or Mesh Bed Leveling). Without this option you must send G29 to move to the next point and G1 (or buttons in your host software) to adjust the Z axis.\n Z_MIN_PROBE_ENDSTOP_INVERTING should be set to true if your probe uses normally-open (NO) switches. Normally-closed switches are recommended because they have the appropriate failsafe state and are less prone to false positives.\n ENDSTOPPULLUP_ZMIN_PROBE may be used if you need to disable the endstop pullup for some reason, such as having an external pull-down resistor on a normally-open switch.\n USE_ZMAX_PLUG must be enabled if the probe is connected to the Z-Max endstop pin. USE_ZMIN_PLUG must be enabled if the probe is connected to the Z-Min endstop pin. Et cetera, et cetera.\n\n", "link": "/docs/configuration/probes.html", "excerpt": "Configuring a bed probe in Marlin.", "class": "conf" } ]